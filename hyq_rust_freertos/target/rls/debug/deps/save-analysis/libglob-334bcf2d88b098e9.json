{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49],"program":"/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","glob","/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","-C","metadata=334bcf2d88b098e9","-C","extra-filename=-334bcf2d88b098e9","--out-dir","/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","-L","dependency=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,68,111,99,117,109,101,110,116,115,47,114,117,115,116,95,102,114,101,101,114,116,111,115,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,103,108,111,98,45,51,51,52,98,99,102,50,100,56,56,98,48,57,56,101,57,46,114,108,105,98]},"prelude":{"crate_id":{"name":"glob","disambiguator":[14294674805418740751,10317511523456041125]},"crate_root":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src","external_crates":[{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[853209657226342047,8462664850197014382]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[772178867720458397,10513760593670507587]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17633954781163668134,3962627684191718065]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7858001605524721373,8369385247697161108]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5226771781757675641,11183407964508506038]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15950205559580256541,6605390554280573401]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[5066653915378193616,7813142097187859454]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1328488228804362593,9042026925657904388]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[3005442698276396085,7194037300925619286]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[11662190156692096384,12505544175813687064]}}],"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":48369,"line_start":11,"line_end":1312,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":467,"byte_end":48369,"line_start":11,"line_end":1312,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/glob-0.2.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":52},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":96},{"krate":0,"index":100},{"krate":0,"index":164},{"krate":0,"index":204},{"krate":0,"index":198},{"krate":0,"index":194},{"krate":0,"index":182},{"krate":0,"index":178},{"krate":0,"index":174},{"krate":0,"index":170},{"krate":0,"index":166},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":208},{"krate":0,"index":244},{"krate":0,"index":238},{"krate":0,"index":234},{"krate":0,"index":222},{"krate":0,"index":218},{"krate":0,"index":214},{"krate":0,"index":210},{"krate":0,"index":248},{"krate":0,"index":288},{"krate":0,"index":284},{"krate":0,"index":278},{"krate":0,"index":274},{"krate":0,"index":262},{"krate":0,"index":258},{"krate":0,"index":254},{"krate":0,"index":250},{"krate":0,"index":290},{"krate":0,"index":300},{"krate":0,"index":296},{"krate":0,"index":292},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":138},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":302},{"krate":0,"index":338},{"krate":0,"index":332},{"krate":0,"index":328},{"krate":0,"index":316},{"krate":0,"index":312},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":148}],"decl_id":null,"docs":" Support for matching file paths against Unix shell style patterns.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2265,"byte_end":2270,"line_start":52,"line_end":52,"column_start":12,"column_end":17},"name":"Paths","qualname":"::Paths","value":"Paths {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" An iterator that yields `Path`s from the filesystem that match a particular\n pattern.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4287,"byte_end":4291,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"glob","qualname":"::glob","value":"fn (pattern: &str) -> Result<Paths, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that produces all the Paths that match the given pattern,\n which may be absolute or relative to the current working directory.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4969,"byte_end":4978,"line_start":132,"line_end":132,"column_start":8,"column_end":17},"name":"glob_with","qualname":"::glob_with","value":"fn (pattern: &str, options: &MatchOptions) -> Result<Paths, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator that produces all the Paths that match the given pattern,\n which may be absolute or relative to the current working directory.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7984,"byte_end":7993,"line_start":228,"line_end":228,"column_start":12,"column_end":21},"name":"GlobError","qualname":"::GlobError","value":"GlobError {  }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" A glob iteration error.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8116,"byte_end":8120,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"path","qualname":"<GlobError>::path","value":"fn (&self) -> &Path","parent":null,"children":[],"decl_id":null,"docs":" The Path that the error corresponds to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8207,"byte_end":8212,"line_start":240,"line_end":240,"column_start":12,"column_end":17},"name":"error","qualname":"<GlobError>::error","value":"fn (&self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" The error in question.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8969,"byte_end":8979,"line_start":271,"line_end":271,"column_start":10,"column_end":20},"name":"GlobResult","qualname":"::GlobResult","value":"Result<PathBuf, GlobError>","parent":null,"children":[],"decl_id":null,"docs":" An alias for a glob iteration result.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12981,"byte_end":12993,"line_start":375,"line_end":375,"column_start":12,"column_end":24},"name":"PatternError","qualname":"::PatternError","value":"PatternError { pos, msg }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65}],"decl_id":null,"docs":" A pattern parsing error.\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12931,"byte_end":12969,"line_start":374,"line_end":374,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":63},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13073,"byte_end":13076,"line_start":377,"line_end":377,"column_start":9,"column_end":12},"name":"pos","qualname":"::PatternError::pos","value":"usize","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" The approximate character index of where the error occurred.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":65},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13134,"byte_end":13137,"line_start":380,"line_end":380,"column_start":9,"column_end":12},"name":"msg","qualname":"::PatternError::msg","value":"&'static str","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" A message describing the error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14781,"byte_end":14788,"line_start":424,"line_end":424,"column_start":12,"column_end":19},"name":"Pattern","qualname":"::Pattern","value":"Pattern {  }","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" A compiled Unix shell style pattern.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14770,"byte_end":14869,"line_start":424,"line_end":428,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16139,"byte_end":16142,"line_start":477,"line_end":477,"column_start":12,"column_end":15},"name":"new","qualname":"<Pattern>::new","value":"fn (pattern: &str) -> Result<Pattern, PatternError>","parent":null,"children":[],"decl_id":null,"docs":" This function compiles Unix shell style patterns.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20891,"byte_end":20897,"line_start":594,"line_end":594,"column_start":12,"column_end":18},"name":"escape","qualname":"<Pattern>::escape","value":"fn (s: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escape metacharacters within the given string by surrounding them in\n brackets. The resulting string will, when compiled into a `Pattern`,\n match the input string and nothing else.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21859,"byte_end":21866,"line_start":625,"line_end":625,"column_start":12,"column_end":19},"name":"matches","qualname":"<Pattern>::matches","value":"fn (&self, str: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `str` matches this `Pattern` using the default\n match options (i.e. `MatchOptions::new()`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22122,"byte_end":22134,"line_start":631,"line_end":631,"column_start":12,"column_end":24},"name":"matches_path","qualname":"<Pattern>::matches_path","value":"fn (&self, path: &Path) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `Path`, when converted to a `str`, matches this\n `Pattern` using the default match options (i.e. `MatchOptions::new()`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22402,"byte_end":22414,"line_start":638,"line_end":638,"column_start":12,"column_end":24},"name":"matches_with","qualname":"<Pattern>::matches_with","value":"fn (&self, str: &str, options: &MatchOptions) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `str` matches this `Pattern` using the specified\n match options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22680,"byte_end":22697,"line_start":644,"line_end":644,"column_start":12,"column_end":29},"name":"matches_path_with","qualname":"<Pattern>::matches_path_with","value":"fn (&self, path: &Path, options: &MatchOptions) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the given `Path`, when converted to a `str`, matches this\n `Pattern` using the specified match options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22945,"byte_end":22951,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Pattern>::as_str","value":"fn <'a> (&'a self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Access the original glob pattern.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32419,"byte_end":32431,"line_start":898,"line_end":898,"column_start":12,"column_end":24},"name":"MatchOptions","qualname":"::MatchOptions","value":"MatchOptions { case_sensitive, require_literal_separator, require_literal_leading_dot }","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" Configuration options to modify the behaviour of `Pattern::matches_with(..)`\n","sig":null,"attributes":[{"value":"allow(missing_copy_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32305,"byte_end":32343,"line_start":896,"line_end":896,"column_start":1,"column_end":39}},{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32408,"byte_end":33337,"line_start":898,"line_end":916,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":137},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32690,"byte_end":32704,"line_start":903,"line_end":903,"column_start":9,"column_end":23},"name":"case_sensitive","qualname":"::MatchOptions::case_sensitive","value":"bool","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Whether or not patterns should be matched in a case-sensitive manner.\n This currently only considers upper/lower case relationships between\n ASCII characters, but in future this might be extended to work with\n Unicode.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":139},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32893,"byte_end":32918,"line_start":908,"line_end":908,"column_start":9,"column_end":34},"name":"require_literal_separator","qualname":"::MatchOptions::require_literal_separator","value":"bool","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" If this is true then path-component separator characters (e.g. `/` on\n Posix) must be matched by a literal `/`, rather than by `*` or `?` or\n `[...]`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33301,"byte_end":33328,"line_start":915,"line_end":915,"column_start":9,"column_end":36},"name":"require_literal_leading_dot","qualname":"::MatchOptions::require_literal_leading_dot","value":"bool","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" If this is true then paths that contain components that start with a `.`\n will not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\n or `[...]` will not match. This is useful because such files are\n conventionally considered hidden on Unix systems and it might be\n desirable to skip them when listing files.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33804,"byte_end":33807,"line_start":932,"line_end":932,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchOptions>::new","value":"fn () -> MatchOptions","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `MatchOptions` with default field values. This is used\n when calling functions that do not take an explicit `MatchOptions`\n parameter.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8045,"byte_end":8054,"line_start":233,"line_end":233,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8280,"byte_end":8289,"line_start":245,"line_end":245,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8464,"byte_end":8473,"line_start":254,"line_end":254,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9029,"byte_end":9034,"line_start":273,"line_end":273,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13171,"byte_end":13183,"line_start":383,"line_end":383,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13270,"byte_end":13282,"line_start":389,"line_end":389,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14929,"byte_end":14936,"line_start":431,"line_end":431,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15053,"byte_end":15060,"line_start":437,"line_end":437,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15999,"byte_end":16006,"line_start":473,"line_end":473,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33344,"byte_end":33356,"line_start":918,"line_end":918,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8045,"byte_end":8054,"line_start":233,"line_end":233,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8280,"byte_end":8289,"line_start":245,"line_end":245,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":152},"to":{"krate":1,"index":2464}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8464,"byte_end":8473,"line_start":254,"line_end":254,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":152},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9029,"byte_end":9034,"line_start":273,"line_end":273,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":60},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13171,"byte_end":13183,"line_start":383,"line_end":383,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":158},"to":{"krate":1,"index":2464}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13270,"byte_end":13282,"line_start":389,"line_end":389,"column_start":23,"column_end":35},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":158},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14929,"byte_end":14936,"line_start":431,"line_end":431,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":164},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15053,"byte_end":15060,"line_start":437,"line_end":437,"column_start":18,"column_end":25},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":164},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15999,"byte_end":16006,"line_start":473,"line_end":473,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,103,108,111,98,45,48,46,50,46,49,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33344,"byte_end":33356,"line_start":918,"line_end":918,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}}]}