{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48],"program":"/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","clap","/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","--cfg","feature=\"ansi_term\"","--cfg","feature=\"atty\"","--cfg","feature=\"color\"","--cfg","feature=\"default\"","--cfg","feature=\"strsim\"","--cfg","feature=\"suggestions\"","--cfg","feature=\"vec_map\"","-C","metadata=3bb111fd4b26ac92","-C","extra-filename=-3bb111fd4b26ac92","--out-dir","/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","-L","dependency=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","--extern","ansi_term=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libansi_term-f775cf444bc750e9.rlib","--extern","atty=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libatty-be2ec1c03110e26c.rlib","--extern","bitflags=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libbitflags-9d9f9764ca8612fc.rlib","--extern","strsim=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libstrsim-b4f7dac79d43df0b.rlib","--extern","textwrap=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libtextwrap-beb4e2e92a10335a.rlib","--extern","unicode_width=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libunicode_width-4918b331d05ca4e1.rlib","--extern","vec_map=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libvec_map-27550508834a0a9e.rlib","--cap-lints","allow","--error-format=json","--sysroot","/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,68,111,99,117,109,101,110,116,115,47,114,117,115,116,95,102,114,101,101,114,116,111,115,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,99,108,97,112,45,51,98,98,49,49,49,102,100,52,98,50,54,97,99,57,50,46,114,108,105,98]},"prelude":{"crate_id":{"name":"clap","disambiguator":[5390643349318813439,7227054253948405389]},"crate_root":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src","external_crates":[{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[853209657226342047,8462664850197014382]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[772178867720458397,10513760593670507587]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17633954781163668134,3962627684191718065]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7858001605524721373,8369385247697161108]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5226771781757675641,11183407964508506038]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15950205559580256541,6605390554280573401]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[5066653915378193616,7813142097187859454]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1328488228804362593,9042026925657904388]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[3005442698276396085,7194037300925619286]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[11662190156692096384,12505544175813687064]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":11,"id":{"name":"ansi_term","disambiguator":[18156938781293929830,4544075089001847907]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":12,"id":{"name":"atty","disambiguator":[8691199249358065161,14416068893755108236]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":13,"id":{"name":"libc","disambiguator":[1234200285838522050,8387995073866950579]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":14,"id":{"name":"bitflags","disambiguator":[9570611911524362371,5008813414111620232]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":15,"id":{"name":"strsim","disambiguator":[17710204199228533584,6328048557244627841]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":16,"id":{"name":"textwrap","disambiguator":[18089037030905242718,1706082974782043793]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":17,"id":{"name":"unicode_width","disambiguator":[10422560825334449675,429977393765225106]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","num":18,"id":{"name":"vec_map","disambiguator":[798816941709727696,16802147638216170220]}}],"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":351,"byte_end":24248,"line_start":6,"line_end":629,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":3198},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22060,"byte_end":22063,"line_start":554,"line_end":554,"column_start":16,"column_end":19},"alias_span":null,"name":"Arg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3328},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22065,"byte_end":22073,"line_start":554,"line_end":554,"column_start":21,"column_end":29},"alias_span":null,"name":"ArgGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3208},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22075,"byte_end":22085,"line_start":554,"line_end":554,"column_start":31,"column_end":41},"alias_span":null,"name":"ArgMatches","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3700},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22087,"byte_end":22098,"line_start":554,"line_end":554,"column_start":43,"column_end":54},"alias_span":null,"name":"ArgSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3228},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22100,"byte_end":22108,"line_start":554,"line_end":554,"column_start":56,"column_end":64},"alias_span":null,"name":"OsValues","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3248},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22110,"byte_end":22120,"line_start":554,"line_end":554,"column_start":66,"column_end":76},"alias_span":null,"name":"SubCommand","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3218},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22122,"byte_end":22128,"line_start":554,"line_end":554,"column_start":78,"column_end":84},"alias_span":null,"name":"Values","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22145,"byte_end":22148,"line_start":555,"line_end":555,"column_start":15,"column_end":18},"alias_span":null,"name":"App","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3120},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22150,"byte_end":22161,"line_start":555,"line_end":555,"column_start":20,"column_end":31},"alias_span":null,"name":"AppSettings","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3748},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22177,"byte_end":22183,"line_start":556,"line_end":556,"column_start":14,"column_end":20},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3770},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22202,"byte_end":22207,"line_start":557,"line_end":557,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3754},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22209,"byte_end":22218,"line_start":557,"line_end":557,"column_start":25,"column_end":34},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2200},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22220,"byte_end":22226,"line_start":557,"line_end":557,"column_start":36,"column_end":42},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3792},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22250,"byte_end":22255,"line_start":558,"line_end":558,"column_start":22,"column_end":27},"alias_span":null,"name":"Shell","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":351,"byte_end":24248,"line_start":6,"line_end":629,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/clap-2.33.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":36},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":126},{"krate":0,"index":936},{"krate":0,"index":2062},{"krate":0,"index":2102},{"krate":0,"index":2154},{"krate":0,"index":2168},{"krate":0,"index":2262},{"krate":0,"index":2302},{"krate":0,"index":2312},{"krate":0,"index":2516},{"krate":0,"index":2524},{"krate":0,"index":2526}],"decl_id":null,"docs":" `clap` is a simple-to-use, efficient, and full-featured library for parsing command line\n arguments and subcommands when writing console/terminal applications.","sig":null,"attributes":[{"value":"crate_type = \"lib\"","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20689,"byte_end":20711,"line_start":519,"line_end":519,"column_start":1,"column_end":23}},{"value":"deny(missing_docs,\n       missing_debug_implementations,\n       missing_copy_implementations,\n       trivial_casts,\n       unused_import_braces,\n       unused_allocation)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20767,"byte_end":20914,"line_start":521,"line_end":522,"column_start":1,"column_end":50}},{"value":"forbid(unstable_features)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21152,"byte_end":21177,"line_start":526,"line_end":526,"column_start":63,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":3096},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134635,"byte_end":134643,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"AppFlags","qualname":"::app::settings::AppFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134624,"byte_end":134651,"line_start":56,"line_end":56,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":135055,"byte_end":135058,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<AppFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":135104,"byte_end":135110,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"zeroed","qualname":"<AppFlags>::zeroed","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1227},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":139497,"byte_end":139513,"line_start":171,"line_end":171,"column_start":5,"column_end":21},"name":"AllowInvalidUtf8","qualname":"::app::settings::AppSettings::AllowInvalidUtf8","value":"AppSettings::AllowInvalidUtf8","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should *not* be treated as an error.\n This is the default behavior of `clap`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1229},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":139872,"byte_end":139891,"line_start":178,"line_end":178,"column_start":5,"column_end":24},"name":"AllArgsOverrideSelf","qualname":"::app::settings::AppSettings::AllArgsOverrideSelf","value":"AppSettings::AllArgsOverrideSelf","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":140940,"byte_end":140958,"line_start":203,"line_end":203,"column_start":5,"column_end":23},"name":"AllowLeadingHyphen","qualname":"::app::settings::AppSettings::AllowLeadingHyphen","value":"AppSettings::AllowLeadingHyphen","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\n like `-10`. (which would otherwise be parsed as another flag or option)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1233},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":141721,"byte_end":141741,"line_start":225,"line_end":225,"column_start":5,"column_end":25},"name":"AllowNegativeNumbers","qualname":"::app::settings::AppSettings::AllowNegativeNumbers","value":"AppSettings::AllowNegativeNumbers","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Allows negative numbers to pass as values. This is similar to\n `AllowLeadingHyphen` except that it only allows numbers, all\n other undefined leading hyphens will fail to parse.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":146136,"byte_end":146158,"line_start":332,"line_end":332,"column_start":5,"column_end":27},"name":"AllowMissingPositional","qualname":"::app::settings::AppSettings::AllowMissingPositional","value":"AppSettings::AllowMissingPositional","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Allows one to implement two styles of CLIs where positionals can be used out of order.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":147743,"byte_end":147767,"line_start":368,"line_end":368,"column_start":5,"column_end":29},"name":"AllowExternalSubcommands","qualname":"::app::settings::AppSettings::AllowExternalSubcommands","value":"AppSettings::AllowExternalSubcommands","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that an unexpected positional argument,\n which would otherwise cause a [`ErrorKind::UnknownArgument`] error,\n should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":148603,"byte_end":148624,"line_start":390,"line_end":390,"column_start":5,"column_end":26},"name":"ArgsNegateSubcommands","qualname":"::app::settings::AppSettings::ArgsNegateSubcommands","value":"AppSettings::ArgsNegateSubcommands","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that use of a valid [argument] negates [subcommands] being used after. By default\n `clap` allows arguments between subcommands such as\n `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that\n functionality and says that arguments can only follow the *final* subcommand. For instance\n using this setting makes only the following invocations possible:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":149335,"byte_end":149354,"line_start":410,"line_end":410,"column_start":5,"column_end":24},"name":"ArgRequiredElseHelp","qualname":"::app::settings::AppSettings::ArgRequiredElseHelp","value":"AppSettings::ArgRequiredElseHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (and then exit gracefully),\n if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":149830,"byte_end":149841,"line_start":428,"line_end":428,"column_start":5,"column_end":16},"name":"ColoredHelp","qualname":"::app::settings::AppSettings::ColoredHelp","value":"AppSettings::ColoredHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Uses colorized help messages.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1245},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":150428,"byte_end":150437,"line_start":448,"line_end":448,"column_start":5,"column_end":14},"name":"ColorAuto","qualname":"::app::settings::AppSettings::ColorAuto","value":"AppSettings::ColorAuto","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Enables colored output only when the output is going to a terminal or TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":150976,"byte_end":150987,"line_start":466,"line_end":466,"column_start":5,"column_end":16},"name":"ColorAlways","qualname":"::app::settings::AppSettings::ColorAlways","value":"AppSettings::ColorAlways","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Enables colored output regardless of whether or not the output is going to a terminal/TTY.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":151516,"byte_end":151526,"line_start":484,"line_end":484,"column_start":5,"column_end":15},"name":"ColorNever","qualname":"::app::settings::AppSettings::ColorNever","value":"AppSettings::ColorNever","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables colored output no matter if the output is going to a terminal/TTY, or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":151868,"byte_end":151891,"line_start":496,"line_end":496,"column_start":5,"column_end":28},"name":"DontCollapseArgsInUsage","qualname":"::app::settings::AppSettings::DontCollapseArgsInUsage","value":"AppSettings::DontCollapseArgsInUsage","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":152650,"byte_end":152675,"line_start":515,"line_end":515,"column_start":5,"column_end":30},"name":"DontDelimitTrailingValues","qualname":"::app::settings::AppSettings::DontDelimitTrailingValues","value":"AppSettings::DontDelimitTrailingValues","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\n was used.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":153752,"byte_end":153768,"line_start":546,"line_end":546,"column_start":5,"column_end":21},"name":"DisableHelpFlags","qualname":"::app::settings::AppSettings::DisableHelpFlags","value":"AppSettings::DisableHelpFlags","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables `-h` and `--help` [`App`] without affecting any of the [`SubCommand`]s\n (Defaults to `false`; application *does* have help flags)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":154486,"byte_end":154507,"line_start":567,"line_end":567,"column_start":5,"column_end":26},"name":"DisableHelpSubcommand","qualname":"::app::settings::AppSettings::DisableHelpSubcommand","value":"AppSettings::DisableHelpSubcommand","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables the `help` subcommand","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":155648,"byte_end":155662,"line_start":600,"line_end":600,"column_start":5,"column_end":19},"name":"DisableVersion","qualname":"::app::settings::AppSettings::DisableVersion","value":"AppSettings::DisableVersion","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s\n (Defaults to `false`; application *does* have a version flag)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1261},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":156114,"byte_end":156132,"line_start":614,"line_end":614,"column_start":5,"column_end":23},"name":"DeriveDisplayOrder","qualname":"::app::settings::AppSettings::DeriveDisplayOrder","value":"AppSettings::DeriveDisplayOrder","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Displays the arguments and [`SubCommand`]s in the help message in the order that they were\n declared in, and not alphabetically which is the default.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1263},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":156918,"byte_end":156931,"line_start":635,"line_end":635,"column_start":5,"column_end":18},"name":"GlobalVersion","qualname":"::app::settings::AppSettings::GlobalVersion","value":"AppSettings::GlobalVersion","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies to use the version of the current command for all child [`SubCommand`]s.\n (Defaults to `false`; subcommands have independent version strings from their parents.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":157322,"byte_end":157328,"line_start":649,"line_end":649,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::app::settings::AppSettings::Hidden","value":"AppSettings::Hidden","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that this [`SubCommand`] should be hidden from help messages","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":157507,"byte_end":157531,"line_start":653,"line_end":653,"column_start":5,"column_end":29},"name":"HidePossibleValuesInHelp","qualname":"::app::settings::AppSettings::HidePossibleValuesInHelp","value":"AppSettings::HidePossibleValuesInHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Tells `clap` *not* to print possible values when displaying help information.\n This can be useful if there are many values, or they are explained elsewhere.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":159029,"byte_end":159045,"line_start":683,"line_end":683,"column_start":5,"column_end":21},"name":"InferSubcommands","qualname":"::app::settings::AppSettings::InferSubcommands","value":"AppSettings::InferSubcommands","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to\n match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":159764,"byte_end":159776,"line_start":701,"line_end":701,"column_start":5,"column_end":17},"name":"NoBinaryName","qualname":"::app::settings::AppSettings::NoBinaryName","value":"AppSettings::NoBinaryName","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that the parser should not assume the first argument passed is the binary name.\n This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one\n one would not normally type the binary or program name for each command.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":160089,"byte_end":160101,"line_start":713,"line_end":713,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::app::settings::AppSettings::NextLineHelp","value":"AppSettings::NextLineHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Places the help string for all arguments on the line after the argument.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":161643,"byte_end":161668,"line_start":752,"line_end":752,"column_start":5,"column_end":30},"name":"PropagateGlobalValuesDown","qualname":"::app::settings::AppSettings::PropagateGlobalValuesDown","value":"AppSettings::PropagateGlobalValuesDown","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" **DEPRECATED**: This setting is no longer required in order to propagate values up or down","sig":null,"attributes":[{"value":"deprecated(since = \"2.27.0\",\n             note = \"No longer required to propagate values\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":161558,"byte_end":161638,"line_start":751,"line_end":751,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":163531,"byte_end":163552,"line_start":797,"line_end":797,"column_start":5,"column_end":26},"name":"SubcommandsNegateReqs","qualname":"::app::settings::AppSettings::SubcommandsNegateReqs","value":"AppSettings::SubcommandsNegateReqs","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Allows [`SubCommand`]s to override all requirements of the parent command.\n For example if you had a subcommand or top level application with a required argument\n that is only required as long as there is no subcommand present,\n using this setting would allow you to set those arguments to [`Arg::required(true)`]\n and yet receive no error so long as the user uses a valid subcommand instead.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1279},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":164628,"byte_end":164654,"line_start":820,"line_end":820,"column_start":5,"column_end":31},"name":"SubcommandRequiredElseHelp","qualname":"::app::settings::AppSettings::SubcommandRequiredElseHelp","value":"AppSettings::SubcommandRequiredElseHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that the help text should be displayed (before exiting gracefully) if no\n [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":165847,"byte_end":165857,"line_start":853,"line_end":853,"column_start":5,"column_end":15},"name":"StrictUtf8","qualname":"::app::settings::AppSettings::StrictUtf8","value":"AppSettings::StrictUtf8","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that any invalid UTF-8 code points should be treated as an error and fail\n with a [`ErrorKind::InvalidUtf8`] error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":166587,"byte_end":166605,"line_start":875,"line_end":875,"column_start":5,"column_end":23},"name":"SubcommandRequired","qualname":"::app::settings::AppSettings::SubcommandRequired","value":"AppSettings::SubcommandRequired","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Allows specifying that if no [`SubCommand`] is present at runtime,\n error and exit gracefully.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":167506,"byte_end":167520,"line_start":898,"line_end":898,"column_start":5,"column_end":19},"name":"TrailingVarArg","qualname":"::app::settings::AppSettings::TrailingVarArg","value":"AppSettings::TrailingVarArg","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Specifies that the final positional argument is a \"VarArg\" and that `clap` should not\n attempt to parse any further args.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168196,"byte_end":168214,"line_start":917,"line_end":917,"column_start":5,"column_end":23},"name":"UnifiedHelpMessage","qualname":"::app::settings::AppSettings::UnifiedHelpMessage","value":"AppSettings::UnifiedHelpMessage","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Groups flags and options together, presenting a more unified help message\n (a la `getopts` or `docopt` style).","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":168991,"byte_end":169013,"line_start":939,"line_end":939,"column_start":5,"column_end":27},"name":"VersionlessSubcommands","qualname":"::app::settings::AppSettings::VersionlessSubcommands","value":"AppSettings::VersionlessSubcommands","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Disables `-V` and `--version` for all [`SubCommand`]s\n (Defaults to `false`; subcommands *do* have version flags.)","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":169819,"byte_end":169830,"line_start":961,"line_end":961,"column_start":5,"column_end":16},"name":"WaitOnError","qualname":"::app::settings::AppSettings::WaitOnError","value":"AppSettings::WaitOnError","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":" Will display a message \"Press \\[ENTER\\]/\\[RETURN\\] to continue...\" and wait for user before\n exiting","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":169852,"byte_end":169868,"line_start":963,"line_end":963,"column_start":20,"column_end":36},"name":"NeedsLongVersion","qualname":"::app::settings::AppSettings::NeedsLongVersion","value":"AppSettings::NeedsLongVersion","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":169890,"byte_end":169903,"line_start":965,"line_end":965,"column_start":20,"column_end":33},"name":"NeedsLongHelp","qualname":"::app::settings::AppSettings::NeedsLongHelp","value":"AppSettings::NeedsLongHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1297},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":169925,"byte_end":169944,"line_start":967,"line_end":967,"column_start":20,"column_end":39},"name":"NeedsSubcommandHelp","qualname":"::app::settings::AppSettings::NeedsSubcommandHelp","value":"AppSettings::NeedsSubcommandHelp","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1299},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":169966,"byte_end":169992,"line_start":969,"line_end":969,"column_start":20,"column_end":46},"name":"LowIndexMultiplePositional","qualname":"::app::settings::AppSettings::LowIndexMultiplePositional","value":"AppSettings::LowIndexMultiplePositional","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170014,"byte_end":170028,"line_start":971,"line_end":971,"column_start":20,"column_end":34},"name":"TrailingValues","qualname":"::app::settings::AppSettings::TrailingValues","value":"AppSettings::TrailingValues","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1303},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170050,"byte_end":170066,"line_start":973,"line_end":973,"column_start":20,"column_end":36},"name":"ValidNegNumFound","qualname":"::app::settings::AppSettings::ValidNegNumFound","value":"AppSettings::ValidNegNumFound","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1305},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170088,"byte_end":170098,"line_start":975,"line_end":975,"column_start":20,"column_end":30},"name":"Propagated","qualname":"::app::settings::AppSettings::Propagated","value":"AppSettings::Propagated","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1307},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170120,"byte_end":170133,"line_start":977,"line_end":977,"column_start":20,"column_end":33},"name":"ValidArgFound","qualname":"::app::settings::AppSettings::ValidArgFound","value":"AppSettings::ValidArgFound","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170155,"byte_end":170167,"line_start":979,"line_end":979,"column_start":20,"column_end":32},"name":"ContainsLast","qualname":"::app::settings::AppSettings::ContainsLast","value":"AppSettings::ContainsLast","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3120},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":137692,"byte_end":137703,"line_start":130,"line_end":130,"column_start":10,"column_end":21},"name":"AppSettings","qualname":"::app::settings::AppSettings","value":"AppSettings::{AllowInvalidUtf8, AllArgsOverrideSelf, AllowLeadingHyphen, AllowNegativeNumbers, AllowMissingPositional, AllowExternalSubcommands, ArgsNegateSubcommands, ArgRequiredElseHelp, ColoredHelp, ColorAuto, ColorAlways, ColorNever, DontCollapseArgsInUsage, DontDelimitTrailingValues, DisableHelpFlags, DisableHelpSubcommand, DisableVersion, DeriveDisplayOrder, GlobalVersion, Hidden, HidePossibleValuesInHelp, InferSubcommands, NoBinaryName, NextLineHelp, PropagateGlobalValuesDown, SubcommandsNegateReqs, SubcommandRequiredElseHelp, StrictUtf8, SubcommandRequired, TrailingVarArg, UnifiedHelpMessage, VersionlessSubcommands, WaitOnError, NeedsLongVersion, NeedsLongHelp, NeedsSubcommandHelp, LowIndexMultiplePositional, TrailingValues, ValidNegNumFound, Propagated, ValidArgFound, ContainsLast}","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235},{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1275},{"krate":0,"index":1277},{"krate":0,"index":1279},{"krate":0,"index":1281},{"krate":0,"index":1283},{"krate":0,"index":1285},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1303},{"krate":0,"index":1305},{"krate":0,"index":1307},{"krate":0,"index":1309}],"decl_id":null,"docs":" Application level settings, which affect how [`App`] operates","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":137683,"byte_end":170170,"line_start":130,"line_end":980,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3154},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179206,"byte_end":179212,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Parser","qualname":"::app::parser::Parser","value":"Parser { meta, g_settings, flags, opts, positionals, subcommands, groups, global_args, required, r_ifs, overrides, help_message, version_message }","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1345},{"krate":0,"index":1347},{"krate":0,"index":1349},{"krate":0,"index":1351},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1363},{"krate":0,"index":1365},{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179114,"byte_end":179153,"line_start":49,"line_end":49,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1343},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179249,"byte_end":179253,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"meta","qualname":"::app::parser::Parser::meta","value":"app::meta::AppMeta<'b>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1347},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179300,"byte_end":179310,"line_start":58,"line_end":58,"column_start":9,"column_end":19},"name":"g_settings","qualname":"::app::parser::Parser::g_settings","value":"app::settings::AppFlags","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1349},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179330,"byte_end":179335,"line_start":59,"line_end":59,"column_start":9,"column_end":14},"name":"flags","qualname":"::app::parser::Parser::flags","value":"std::vec::Vec<args::arg_builder::flag::FlagBuilder<'a, 'b>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1351},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179371,"byte_end":179375,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"name":"opts","qualname":"::app::parser::Parser::opts","value":"std::vec::Vec<args::arg_builder::option::OptBuilder<'a, 'b>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1353},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179410,"byte_end":179421,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"name":"positionals","qualname":"::app::parser::Parser::positionals","value":"vec_map::VecMap<args::arg_builder::positional::PosBuilder<'a, 'b>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1355},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179459,"byte_end":179470,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"name":"subcommands","qualname":"::app::parser::Parser::subcommands","value":"std::vec::Vec<app::App<'a, 'b>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1357},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179498,"byte_end":179504,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"name":"groups","qualname":"::app::parser::Parser::groups","value":"std::vec::Vec<args::group::ArgGroup<'a>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1359},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179533,"byte_end":179544,"line_start":64,"line_end":64,"column_start":9,"column_end":20},"name":"global_args","qualname":"::app::parser::Parser::global_args","value":"std::vec::Vec<args::arg::Arg<'a, 'b>>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1361},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179572,"byte_end":179580,"line_start":65,"line_end":65,"column_start":9,"column_end":17},"name":"required","qualname":"::app::parser::Parser::required","value":"std::vec::Vec<&'a str>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1363},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179604,"byte_end":179609,"line_start":66,"line_end":66,"column_start":9,"column_end":14},"name":"r_ifs","qualname":"::app::parser::Parser::r_ifs","value":"std::vec::Vec<(&'a str, &'b str, &'a str)>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1365},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179653,"byte_end":179662,"line_start":67,"line_end":67,"column_start":9,"column_end":18},"name":"overrides","qualname":"::app::parser::Parser::overrides","value":"std::vec::Vec<(&'b str, &'a str)>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179788,"byte_end":179800,"line_start":71,"line_end":71,"column_start":9,"column_end":21},"name":"help_message","qualname":"::app::parser::Parser::help_message","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179827,"byte_end":179842,"line_start":72,"line_end":72,"column_start":9,"column_end":24},"name":"version_message","qualname":"::app::parser::Parser::version_message","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":3154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179949,"byte_end":179958,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Parser<'a, 'b>>::with_name","value":"fn (n: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":180178,"byte_end":180188,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"help_short","qualname":"<Parser<'a, 'b>>::help_short","value":"fn (&mut self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":180384,"byte_end":180397,"line_start":97,"line_end":97,"column_start":12,"column_end":25},"name":"version_short","qualname":"<Parser<'a, 'b>>::version_short","value":"fn (&mut self, s: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":180596,"byte_end":180614,"line_start":105,"line_end":105,"column_start":12,"column_end":30},"name":"gen_completions_to","qualname":"<Parser<'a, 'b>>::gen_completions_to","value":"fn <W> (&mut self, for_shell: Shell, buf: &mut W) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":180987,"byte_end":181002,"line_start":117,"line_end":117,"column_start":12,"column_end":27},"name":"gen_completions","qualname":"<Parser<'a, 'b>>::gen_completions","value":"fn (&mut self, for_shell: Shell, od: OsString) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":187267,"byte_end":187274,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"add_arg","qualname":"<Parser<'a, 'b>>::add_arg","value":"fn (&mut self, a: Arg<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":188450,"byte_end":188461,"line_start":318,"line_end":318,"column_start":12,"column_end":23},"name":"add_arg_ref","qualname":"<Parser<'a, 'b>>::add_arg_ref","value":"fn (&mut self, a: &Arg<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":189505,"byte_end":189514,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"add_group","qualname":"<Parser<'a, 'b>>::add_group","value":"fn (&mut self, group: ArgGroup<'a>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":190414,"byte_end":190428,"line_start":370,"line_end":370,"column_start":12,"column_end":26},"name":"add_subcommand","qualname":"<Parser<'a, 'b>>::add_subcommand","value":"fn (&mut self, mut subcmd: App<'a, 'b>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":190825,"byte_end":190843,"line_start":384,"line_end":384,"column_start":12,"column_end":30},"name":"propagate_settings","qualname":"<Parser<'a, 'b>>::propagate_settings","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":192273,"byte_end":192293,"line_start":420,"line_end":420,"column_start":12,"column_end":32},"name":"derive_display_order","qualname":"<Parser<'a, 'b>>::derive_display_order","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193289,"byte_end":193297,"line_start":450,"line_end":450,"column_start":12,"column_end":20},"name":"required","qualname":"<Parser<'a, 'b>>::required","value":"fn (&self) -> Iter<&str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193429,"byte_end":193437,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"has_args","qualname":"<Parser<'a, 'b>>::has_args","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193408,"byte_end":193417,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193575,"byte_end":193583,"line_start":459,"line_end":459,"column_start":12,"column_end":20},"name":"has_opts","qualname":"<Parser<'a, 'b>>::has_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193554,"byte_end":193563,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193651,"byte_end":193660,"line_start":462,"line_end":462,"column_start":12,"column_end":21},"name":"has_flags","qualname":"<Parser<'a, 'b>>::has_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193630,"byte_end":193639,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193729,"byte_end":193744,"line_start":465,"line_end":465,"column_start":12,"column_end":27},"name":"has_positionals","qualname":"<Parser<'a, 'b>>::has_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193708,"byte_end":193717,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193819,"byte_end":193834,"line_start":468,"line_end":468,"column_start":12,"column_end":27},"name":"has_subcommands","qualname":"<Parser<'a, 'b>>::has_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193798,"byte_end":193807,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193909,"byte_end":193925,"line_start":471,"line_end":471,"column_start":12,"column_end":28},"name":"has_visible_opts","qualname":"<Parser<'a, 'b>>::has_visible_opts","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":193888,"byte_end":193897,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194110,"byte_end":194127,"line_start":479,"line_end":479,"column_start":12,"column_end":29},"name":"has_visible_flags","qualname":"<Parser<'a, 'b>>::has_visible_flags","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194089,"byte_end":194098,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194314,"byte_end":194337,"line_start":487,"line_end":487,"column_start":12,"column_end":35},"name":"has_visible_positionals","qualname":"<Parser<'a, 'b>>::has_visible_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194293,"byte_end":194302,"line_start":486,"line_end":486,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194564,"byte_end":194587,"line_start":497,"line_end":497,"column_start":12,"column_end":35},"name":"has_visible_subcommands","qualname":"<Parser<'a, 'b>>::has_visible_subcommands","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194543,"byte_end":194552,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194831,"byte_end":194837,"line_start":506,"line_end":506,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Parser<'a, 'b>>::is_set","value":"fn (&self, s: AS) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194810,"byte_end":194819,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194914,"byte_end":194917,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"set","qualname":"<Parser<'a, 'b>>::set","value":"fn (&mut self, s: AS) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194893,"byte_end":194902,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194987,"byte_end":194992,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"unset","qualname":"<Parser<'a, 'b>>::unset","value":"fn (&mut self, s: AS) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":194966,"byte_end":194975,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":195120,"byte_end":195138,"line_start":515,"line_end":515,"column_start":12,"column_end":30},"name":"verify_positionals","qualname":"<Parser<'a, 'b>>::verify_positionals","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":201176,"byte_end":201193,"line_start":645,"line_end":645,"column_start":12,"column_end":29},"name":"propagate_globals","qualname":"<Parser<'a, 'b>>::propagate_globals","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":208605,"byte_end":208621,"line_start":843,"line_end":843,"column_start":12,"column_end":28},"name":"get_matches_with","qualname":"<Parser<'a, 'b>>::get_matches_with","value":"fn <I, T> (&mut self, matcher: &mut ArgMatcher<'a>, it: &mut Peekable<I>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":229814,"byte_end":229828,"line_start":1344,"line_end":1344,"column_start":12,"column_end":26},"name":"groups_for_arg","qualname":"<Parser<'a, 'b>>::groups_for_arg","value":"fn (&self, name: &str) -> Option<Vec<&'a str>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":230515,"byte_end":230528,"line_start":1368,"line_end":1368,"column_start":12,"column_end":25},"name":"args_in_group","qualname":"<Parser<'a, 'b>>::args_in_group","value":"fn (&self, group: &str) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":231486,"byte_end":231504,"line_start":1398,"line_end":1398,"column_start":12,"column_end":30},"name":"arg_names_in_group","qualname":"<Parser<'a, 'b>>::arg_names_in_group","value":"fn (&self, group: &str) -> Vec<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":232069,"byte_end":232092,"line_start":1419,"line_end":1419,"column_start":12,"column_end":35},"name":"create_help_and_version","qualname":"<Parser<'a, 'b>>::create_help_and_version","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":251588,"byte_end":251601,"line_start":1924,"line_end":1924,"column_start":12,"column_end":25},"name":"write_version","qualname":"<Parser<'a, 'b>>::write_version","value":"fn <W> (&self, w: &mut W, use_long: bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":252409,"byte_end":252419,"line_start":1946,"line_end":1946,"column_start":12,"column_end":22},"name":"print_help","qualname":"<Parser<'a, 'b>>::print_help","value":"fn (&self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":252585,"byte_end":252595,"line_start":1952,"line_end":1952,"column_start":12,"column_end":22},"name":"write_help","qualname":"<Parser<'a, 'b>>::write_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":252710,"byte_end":252725,"line_start":1956,"line_end":1956,"column_start":12,"column_end":27},"name":"write_long_help","qualname":"<Parser<'a, 'b>>::write_long_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":252839,"byte_end":252853,"line_start":1960,"line_end":1960,"column_start":12,"column_end":26},"name":"write_help_err","qualname":"<Parser<'a, 'b>>::write_help_err","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":252971,"byte_end":252983,"line_start":1964,"line_end":1964,"column_start":12,"column_end":24},"name":"add_defaults","qualname":"<Parser<'a, 'b>>::add_defaults","value":"fn (&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":256347,"byte_end":256354,"line_start":2039,"line_end":2039,"column_start":12,"column_end":19},"name":"add_env","qualname":"<Parser<'a, 'b>>::add_env","value":"fn (&mut self, matcher: &mut ArgMatcher<'a>) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":257632,"byte_end":257637,"line_start":2073,"line_end":2073,"column_start":12,"column_end":17},"name":"flags","qualname":"<Parser<'a, 'b>>::flags","value":"fn (&self) -> Iter<FlagBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":257708,"byte_end":257712,"line_start":2075,"line_end":2075,"column_start":12,"column_end":16},"name":"opts","qualname":"<Parser<'a, 'b>>::opts","value":"fn (&self) -> Iter<OptBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":257781,"byte_end":257792,"line_start":2077,"line_end":2077,"column_start":12,"column_end":23},"name":"positionals","qualname":"<Parser<'a, 'b>>::positionals","value":"fn (&self) -> map::Values<PosBuilder<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":257877,"byte_end":257888,"line_start":2079,"line_end":2079,"column_start":12,"column_end":23},"name":"subcommands","qualname":"<Parser<'a, 'b>>::subcommands","value":"fn (&self) -> Iter<App>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":258058,"byte_end":258063,"line_start":2083,"line_end":2083,"column_start":12,"column_end":17},"name":"color","qualname":"<Parser<'a, 'b>>::color","value":"fn (&self) -> ColorWhen","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":258491,"byte_end":258503,"line_start":2098,"line_end":2098,"column_start":12,"column_end":24},"name":"find_any_arg","qualname":"<Parser<'a, 'b>>::find_any_arg","value":"fn (&self, name: &str) -> Option<&AnyArg<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":259753,"byte_end":259768,"line_start":2138,"line_end":2138,"column_start":12,"column_end":27},"name":"find_subcommand","qualname":"<Parser<'a, 'b>>::find_subcommand","value":"fn (&'b self, sc: &str) -> Option<&'b App<'a, 'b>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3170},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260831,"byte_end":260838,"line_start":4,"line_end":4,"column_start":12,"column_end":19},"name":"AppMeta","qualname":"::app::meta::AppMeta","value":"AppMeta { name, bin_name, author, version, long_version, about, long_about, more_help, pre_help, aliases, usage_str, usage, help_str, disp_ord, term_w, max_w, template }","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260754,"byte_end":260793,"line_start":2,"line_end":2,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1579},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260853,"byte_end":260857,"line_start":5,"line_end":5,"column_start":9,"column_end":13},"name":"name","qualname":"::app::meta::AppMeta::name","value":"std::string::String","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1581},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260875,"byte_end":260883,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"bin_name","qualname":"::app::meta::AppMeta::bin_name","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1583},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260909,"byte_end":260915,"line_start":7,"line_end":7,"column_start":9,"column_end":15},"name":"author","qualname":"::app::meta::AppMeta::author","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1585},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260942,"byte_end":260949,"line_start":8,"line_end":8,"column_start":9,"column_end":16},"name":"version","qualname":"::app::meta::AppMeta::version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1587},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":260976,"byte_end":260988,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"name":"long_version","qualname":"::app::meta::AppMeta::long_version","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1589},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261015,"byte_end":261020,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"name":"about","qualname":"::app::meta::AppMeta::about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1591},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261047,"byte_end":261057,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"name":"long_about","qualname":"::app::meta::AppMeta::long_about","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1593},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261084,"byte_end":261093,"line_start":12,"line_end":12,"column_start":9,"column_end":18},"name":"more_help","qualname":"::app::meta::AppMeta::more_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1595},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261120,"byte_end":261128,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"name":"pre_help","qualname":"::app::meta::AppMeta::pre_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1597},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261155,"byte_end":261162,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"aliases","qualname":"::app::meta::AppMeta::aliases","value":"std::option::Option<std::vec::Vec<(&'b str, bool)>>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1599},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261221,"byte_end":261230,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"usage_str","qualname":"::app::meta::AppMeta::usage_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1601},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261257,"byte_end":261262,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"usage","qualname":"::app::meta::AppMeta::usage","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1603},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261288,"byte_end":261296,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"help_str","qualname":"::app::meta::AppMeta::help_str","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1605},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261323,"byte_end":261331,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::app::meta::AppMeta::disp_ord","value":"usize","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1607},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261348,"byte_end":261354,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"name":"term_w","qualname":"::app::meta::AppMeta::term_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1609},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261379,"byte_end":261384,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"name":"max_w","qualname":"::app::meta::AppMeta::max_w","value":"std::option::Option<usize>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1611},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261409,"byte_end":261417,"line_start":21,"line_end":21,"column_start":9,"column_end":17},"name":"template","qualname":"::app::meta::AppMeta::template","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3170},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261473,"byte_end":261476,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<AppMeta<'b>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261521,"byte_end":261530,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"with_name","qualname":"<AppMeta<'b>>::with_name","value":"fn (s: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63713,"byte_end":63716,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"App","qualname":"::app::App","value":"App { p }","parent":null,"children":[{"krate":0,"index":557}],"decl_id":null,"docs":" Used to create a representation of a command line program and all possible command line\n arguments. Application settings are set using the \"builder pattern\" with the\n [`App::get_matches`] family of methods being the terminal methods that starts the\n runtime-parsing process. These methods then return information about the user supplied\n arguments (or lack there of).","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63662,"byte_end":63701,"line_start":59,"line_end":59,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":557},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63768,"byte_end":63769,"line_start":64,"line_end":64,"column_start":24,"column_end":25},"name":"p","qualname":"::app::App::p","value":"app::parser::Parser<'a, 'b>","parent":{"krate":0,"index":760},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64228,"byte_end":64231,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<App<'a, 'b>>::new","value":"fn <S> (n: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an application requiring a name. The name may be, but doesn't\n have to be same as the binary. The name will be displayed to the user when they request to\n print version or help and usage information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64383,"byte_end":64391,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"get_name","qualname":"<App<'a, 'b>>::get_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the app\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":64476,"byte_end":64488,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"get_bin_name","qualname":"<App<'a, 'b>>::get_bin_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the binary\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":65281,"byte_end":65294,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"with_defaults","qualname":"<App<'a, 'b>>::with_defaults","value":"fn <S> (n: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an application requiring a name, but uses the [`crate_authors!`]\n and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.","sig":null,"attributes":[{"value":"deprecated(since = \"2.14.1\",\n             note =\n                 \"Can never work; use explicit App::author() and App::version() calls instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":65156,"byte_end":65269,"line_start":106,"line_end":106,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":68352,"byte_end":68358,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"author","qualname":"<App<'a, 'b>>::author","value":"fn <S> (mut self, author: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of author(s) that will be displayed to the user when they\n request the help information with `--help` or `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":69173,"byte_end":69181,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"bin_name","qualname":"<App<'a, 'b>>::bin_name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Overrides the system-determined binary name. This should only be used when absolutely\n necessary, such as when the binary name for your application is misleading, or perhaps\n *not* how the user should invoke your program.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":70007,"byte_end":70012,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"about","qualname":"<App<'a, 'b>>::about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information with `-h`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":70984,"byte_end":70994,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"long_about","qualname":"<App<'a, 'b>>::long_about","value":"fn <S> (mut self, about: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string describing what the program does. This will be displayed when displaying help\n information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":71927,"byte_end":71931,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"name":"name","qualname":"<App<'a, 'b>>::name","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the program's name. This will be displayed when displaying help information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":72540,"byte_end":72550,"line_start":294,"line_end":294,"column_start":12,"column_end":22},"name":"after_help","qualname":"<App<'a, 'b>>::after_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **after** the auto-generated help information. This is often used\n to describe how to use the arguments, or caveats to be noted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":73117,"byte_end":73128,"line_start":311,"line_end":311,"column_start":12,"column_end":23},"name":"before_help","qualname":"<App<'a, 'b>>::before_help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds additional help information to be displayed in addition to auto-generated help. This\n information is displayed **before** the auto-generated help information. This is often used\n for header information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":74186,"byte_end":74193,"line_start":337,"line_end":337,"column_start":12,"column_end":19},"name":"version","qualname":"<App<'a, 'b>>::version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":75354,"byte_end":75366,"line_start":368,"line_end":368,"column_start":12,"column_end":24},"name":"long_version","qualname":"<App<'a, 'b>>::long_version","value":"fn <S> (mut self, ver: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a string of the version number to be displayed when displaying version or help\n information with `--version`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":76485,"byte_end":76490,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"usage","qualname":"<App<'a, 'b>>::usage","value":"fn <S> (mut self, usage: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom usage string to override the auto-generated usage string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":78001,"byte_end":78005,"line_start":436,"line_end":436,"column_start":12,"column_end":16},"name":"help","qualname":"<App<'a, 'b>>::help","value":"fn <S> (mut self, help: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a custom help message and overrides the auto-generated one. This should only be used\n when the auto-generated message does not suffice.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":79026,"byte_end":79036,"line_start":462,"line_end":462,"column_start":12,"column_end":22},"name":"help_short","qualname":"<App<'a, 'b>>::help_short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the [`short`] for the auto-generated `help` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":80050,"byte_end":80063,"line_start":488,"line_end":488,"column_start":12,"column_end":25},"name":"version_short","qualname":"<App<'a, 'b>>::version_short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the [`short`] for the auto-generated `version` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":80703,"byte_end":80715,"line_start":508,"line_end":508,"column_start":12,"column_end":24},"name":"help_message","qualname":"<App<'a, 'b>>::help_message","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help text for the auto-generated `help` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":81361,"byte_end":81376,"line_start":526,"line_end":526,"column_start":12,"column_end":27},"name":"version_message","qualname":"<App<'a, 'b>>::version_message","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help text for the auto-generated `version` argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":83367,"byte_end":83375,"line_start":570,"line_end":570,"column_start":12,"column_end":20},"name":"template","qualname":"<App<'a, 'b>>::template","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the help template to be used, overriding the default format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":83998,"byte_end":84005,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"setting","qualname":"<App<'a, 'b>>::setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single command, or [`SubCommand`], level settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":84615,"byte_end":84623,"line_start":610,"line_end":610,"column_start":12,"column_end":20},"name":"settings","qualname":"<App<'a, 'b>>::settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables multiple command, or [`SubCommand`], level settings","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":85352,"byte_end":85366,"line_start":633,"line_end":633,"column_start":12,"column_end":26},"name":"global_setting","qualname":"<App<'a, 'b>>::global_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables a single setting that is propagated down through all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":86154,"byte_end":86169,"line_start":656,"line_end":656,"column_start":12,"column_end":27},"name":"global_settings","qualname":"<App<'a, 'b>>::global_settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enables multiple settings which are propagated *down* through all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":86796,"byte_end":86809,"line_start":678,"line_end":678,"column_start":12,"column_end":25},"name":"unset_setting","qualname":"<App<'a, 'b>>::unset_setting","value":"fn (mut self, setting: AppSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables a single command, or [`SubCommand`], level setting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":87425,"byte_end":87439,"line_start":698,"line_end":698,"column_start":12,"column_end":26},"name":"unset_settings","qualname":"<App<'a, 'b>>::unset_settings","value":"fn (mut self, settings: &[AppSettings]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disables multiple command, or [`SubCommand`], level settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":88604,"byte_end":88618,"line_start":730,"line_end":730,"column_start":12,"column_end":26},"name":"set_term_width","qualname":"<App<'a, 'b>>::set_term_width","value":"fn (mut self, width: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will\n ignore terminal widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":89623,"byte_end":89637,"line_start":758,"line_end":758,"column_start":12,"column_end":26},"name":"max_term_width","qualname":"<App<'a, 'b>>::max_term_width","value":"fn (mut self, w: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal\n widths and use source formatting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":90494,"byte_end":90497,"line_start":784,"line_end":784,"column_start":12,"column_end":15},"name":"arg","qualname":"<App<'a, 'b>>::arg","value":"fn <A> (mut self, a: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to the list of valid possibilities.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":91044,"byte_end":91048,"line_start":803,"line_end":803,"column_start":12,"column_end":16},"name":"args","qualname":"<App<'a, 'b>>::args","value":"fn (mut self, args: &[Arg<'a, 'b>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to the list of valid possibilities","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":91900,"byte_end":91914,"line_start":827,"line_end":827,"column_start":12,"column_end":26},"name":"arg_from_usage","qualname":"<App<'a, 'b>>::arg_from_usage","value":"fn (mut self, usage: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for adding a single [argument] from a usage type string. The string\n used follows the same rules and syntax as [`Arg::from_usage`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":92912,"byte_end":92927,"line_start":854,"line_end":854,"column_start":12,"column_end":27},"name":"args_from_usage","qualname":"<App<'a, 'b>>::args_from_usage","value":"fn (mut self, usage: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] at once from a usage string, one per line. See\n [`Arg::from_usage`] for details on the syntax and rules supported.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":93943,"byte_end":93948,"line_start":881,"line_end":881,"column_start":12,"column_end":17},"name":"alias","qualname":"<App<'a, 'b>>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":95212,"byte_end":95219,"line_start":910,"line_end":910,"column_start":12,"column_end":19},"name":"aliases","qualname":"<App<'a, 'b>>::aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that\n automatically dispatch as if this subcommand was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":96204,"byte_end":96217,"line_start":936,"line_end":936,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<App<'a, 'b>>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`SubCommand`] alias that functions exactly like those defined with\n [`App::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":97173,"byte_end":97188,"line_start":960,"line_end":960,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<App<'a, 'b>>::visible_aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined\n with [`App::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":99159,"byte_end":99164,"line_start":1005,"line_end":1005,"column_start":12,"column_end":17},"name":"group","qualname":"<App<'a, 'b>>::group","value":"fn (mut self, group: ArgGroup<'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\n By placing them in a logical group, you can build easier requirement and exclusion rules.\n For instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\n one) argument from that group must be present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":100171,"byte_end":100177,"line_start":1035,"line_end":1035,"column_start":12,"column_end":18},"name":"groups","qualname":"<App<'a, 'b>>::groups","value":"fn (mut self, groups: &[ArgGroup<'a>]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [`ArgGroup`]s to the [`App`] at once.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":101078,"byte_end":101088,"line_start":1059,"line_end":1059,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<App<'a, 'b>>::subcommand","value":"fn (mut self, subcmd: App<'a, 'b>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively\n sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\n etc. They also function just like [`App`]s, in that they get their own auto generated help,\n version, and usage.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":101909,"byte_end":101920,"line_start":1080,"line_end":1080,"column_start":12,"column_end":23},"name":"subcommands","qualname":"<App<'a, 'b>>::subcommands","value":"fn <I> (mut self, subcmds: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple subcommands to the list of valid possibilities by iterating over an\n [`IntoIterator`] of [`SubCommand`]s","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":104317,"byte_end":104330,"line_start":1137,"line_end":1137,"column_start":12,"column_end":25},"name":"display_order","qualname":"<App<'a, 'b>>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower\n value will be displayed first in the help message. This is helpful when one would like to\n emphasise frequently used subcommands, or prioritize those towards the top of the list.\n Duplicate values **are** allowed. Subcommands with duplicate display orders will be\n displayed in alphabetical order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":105190,"byte_end":105200,"line_start":1159,"line_end":1159,"column_start":12,"column_end":22},"name":"print_help","qualname":"<App<'a, 'b>>::print_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `-h` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":106452,"byte_end":106467,"line_start":1189,"line_end":1189,"column_start":12,"column_end":27},"name":"print_long_help","qualname":"<App<'a, 'b>>::print_long_help","value":"fn (&mut self) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same\n method as if someone ran `--help` to request the help message","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":107632,"byte_end":107642,"line_start":1217,"line_end":1217,"column_start":12,"column_end":22},"name":"write_help","qualname":"<App<'a, 'b>>::write_help","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `-h`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":108925,"byte_end":108940,"line_start":1248,"line_end":1248,"column_start":12,"column_end":27},"name":"write_long_help","qualname":"<App<'a, 'b>>::write_long_help","value":"fn <W> (&mut self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the full help message to the user to a [`io::Write`] object in the same method as if\n the user ran `--help`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":110106,"byte_end":110119,"line_start":1276,"line_end":1276,"column_start":12,"column_end":25},"name":"write_version","qualname":"<App<'a, 'b>>::write_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":110963,"byte_end":110981,"line_start":1297,"line_end":1297,"column_start":12,"column_end":30},"name":"write_long_version","qualname":"<App<'a, 'b>>::write_long_version","value":"fn <W> (&self, w: &mut W) -> ClapResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes the version message to the user to a [`io::Write`] object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":114124,"byte_end":114139,"line_start":1384,"line_end":1384,"column_start":12,"column_end":27},"name":"gen_completions","qualname":"<App<'a, 'b>>::gen_completions","value":"fn <T, S> (&mut self, bin_name: S, for_shell: Shell, out_dir: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a completions file for a specified shell at compile time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":115497,"byte_end":115515,"line_start":1427,"line_end":1427,"column_start":12,"column_end":30},"name":"gen_completions_to","qualname":"<App<'a, 'b>>::gen_completions_to","value":"fn <W, S> (&mut self, bin_name: S, for_shell: Shell, buf: &mut W) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a completions file for a specified shell at runtime.  Until `cargo install` can\n install extra files like a completion script, this may be used e.g. in a command that\n outputs the contents of the completion script, to be redirected into a file by the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":116387,"byte_end":116398,"line_start":1451,"line_end":1451,"column_start":12,"column_end":23},"name":"get_matches","qualname":"<App<'a, 'b>>::get_matches","value":"fn (self) -> ArgMatches<'a>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process, upon a failed parse an error will be displayed to the user and\n the process will exit with the appropriate error code. By default this method gets all user\n provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\n which are legal on many platforms.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":117790,"byte_end":117806,"line_start":1478,"line_end":1478,"column_start":12,"column_end":28},"name":"get_matches_safe","qualname":"<App<'a, 'b>>::get_matches_safe","value":"fn (self) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\n the process on failed parse. By default this method gets matches from [`env::args_os`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":118937,"byte_end":118953,"line_start":1504,"line_end":1504,"column_start":12,"column_end":28},"name":"get_matches_from","qualname":"<App<'a, 'b>>::get_matches_from","value":"fn <I, T> (mut self, itr: I) -> ArgMatches<'a>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\n and will automatically exit with an error message. This method, however, lets you specify\n what iterator to use when performing matches, such as a [`Vec`] of your making.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":121409,"byte_end":121430,"line_start":1561,"line_end":1561,"column_start":12,"column_end":33},"name":"get_matches_from_safe","qualname":"<App<'a, 'b>>::get_matches_from_safe","value":"fn <I, T> (mut self, itr: I) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process. A combination of [`App::get_matches_from`], and\n [`App::get_matches_safe`]","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":122589,"byte_end":122617,"line_start":1590,"line_end":1590,"column_start":12,"column_end":40},"name":"get_matches_from_safe_borrow","qualname":"<App<'a, 'b>>::get_matches_from_safe_borrow","value":"fn <I, T> (&mut self, itr: I) -> ClapResult<ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\n the desired functionality, instead prefer [`App::get_matches_from_safe`] which *does*\n consume `self`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3198},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342729,"byte_end":342732,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"Arg","qualname":"::args::arg::Arg","value":"Arg { b, s, v, index, r_ifs }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761}],"decl_id":null,"docs":" The abstract representation of a command line argument. Used to set all the options and\n relationships that define a valid argument for the program.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342652,"byte_end":342691,"line_start":41,"line_end":41,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1753},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342784,"byte_end":342785,"line_start":47,"line_end":47,"column_start":24,"column_end":25},"name":"b","qualname":"::args::arg::Arg::b","value":"args::arg_builder::base::Base<'a, 'b>","parent":{"krate":0,"index":3198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342824,"byte_end":342825,"line_start":48,"line_end":48,"column_start":24,"column_end":25},"name":"s","qualname":"::args::arg::Arg::s","value":"args::arg_builder::switched::Switched<'b>","parent":{"krate":0,"index":3198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1757},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342864,"byte_end":342865,"line_start":49,"line_end":49,"column_start":24,"column_end":25},"name":"v","qualname":"::args::arg::Arg::v","value":"args::arg_builder::valued::Valued<'a, 'b>","parent":{"krate":0,"index":3198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1759},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342906,"byte_end":342911,"line_start":50,"line_end":50,"column_start":24,"column_end":29},"name":"index","qualname":"::args::arg::Arg::index","value":"std::option::Option<u64>","parent":{"krate":0,"index":3198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1761},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":342949,"byte_end":342954,"line_start":51,"line_end":51,"column_start":24,"column_end":29},"name":"r_ifs","qualname":"::args::arg::Arg::r_ifs","value":"std::option::Option<std::vec::Vec<(&'a str, &'b str)>>","parent":{"krate":0,"index":3198},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":343797,"byte_end":343806,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Arg<'a, 'b>>::with_name","value":"fn (n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\n information about whether or not the argument was used at runtime, get values, set\n relationships with other args, etc..","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":352808,"byte_end":352818,"line_start":290,"line_end":290,"column_start":12,"column_end":22},"name":"from_usage","qualname":"<Arg<'a, 'b>>::from_usage","value":"fn (u: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings\n for the [`Arg`]. The syntax is flexible, but there are some rules to follow.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":354253,"byte_end":354258,"line_start":331,"line_end":331,"column_start":12,"column_end":17},"name":"short","qualname":"<Arg<'a, 'b>>::short","value":"fn <S> (mut self, s: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short version of the argument without the preceding `-`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":355753,"byte_end":355757,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"long","qualname":"<Arg<'a, 'b>>::long","value":"fn (mut self, l: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long version of the argument without the preceding `--`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":356720,"byte_end":356725,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"alias","qualname":"<Arg<'a, 'b>>::alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden arguments as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":357886,"byte_end":357893,"line_start":427,"line_end":427,"column_start":12,"column_end":19},"name":"aliases","qualname":"<Arg<'a, 'b>>::aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that\n automatically dispatch as if this argument was used. This is more efficient, and easier\n than creating multiple hidden subcommands as one only needs to check for the existence of\n this command, and not all variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":358999,"byte_end":359012,"line_start":458,"line_end":458,"column_start":12,"column_end":25},"name":"visible_alias","qualname":"<Arg<'a, 'b>>::visible_alias","value":"fn <S> (mut self, name: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding a [`Arg`] alias that functions exactly like those defined with\n [`Arg::alias`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":359972,"byte_end":359987,"line_start":485,"line_end":485,"column_start":12,"column_end":27},"name":"visible_aliases","qualname":"<Arg<'a, 'b>>::visible_aliases","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows adding multiple [`Arg`] aliases that functions exactly like those defined\n with [`Arg::aliases`], except that they are visible inside the help message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":362109,"byte_end":362113,"line_start":546,"line_end":546,"column_start":12,"column_end":16},"name":"help","qualname":"<Arg<'a, 'b>>::help","value":"fn (mut self, h: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the short help text of the argument that will be displayed to the user when they print\n the help information with `-h`. Typically, this is a short (one line) description of the\n arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":364669,"byte_end":364678,"line_start":617,"line_end":617,"column_start":12,"column_end":21},"name":"long_help","qualname":"<Arg<'a, 'b>>::long_help","value":"fn (mut self, h: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the long help text of the argument that will be displayed to the user when they print\n the help information with `--help`. Typically this a more detailed (multi-line) message\n that describes the arg.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":368117,"byte_end":368121,"line_start":694,"line_end":694,"column_start":12,"column_end":16},"name":"last","qualname":"<Arg<'a, 'b>>::last","value":"fn (self, l: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that this arg is the last, or final, positional argument (i.e. has the highest\n index) and is *only* able to be accessed via the `--` syntax (i.e. `$ prog args --\n last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax\n they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also\n allows one to access this arg early using the `--` syntax. Accessing an arg early, even with\n the `--` syntax is otherwise not possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":370129,"byte_end":370137,"line_start":753,"line_end":753,"column_start":12,"column_end":20},"name":"required","qualname":"<Arg<'a, 'b>>::required","value":"fn (self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether or not the argument is required by default. Required by default means it is\n required, when no other conflicting rules have been evaluated. Conflicting rules take\n precedence over being required. **Default:** `false`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":372211,"byte_end":372225,"line_start":815,"line_end":815,"column_start":12,"column_end":26},"name":"require_equals","qualname":"<Arg<'a, 'b>>::require_equals","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Requires that options use the `--option=val` syntax (i.e. an equals between the option and\n associated value) **Default:** `false`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1040},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":374824,"byte_end":374843,"line_start":880,"line_end":880,"column_start":12,"column_end":31},"name":"allow_hyphen_values","qualname":"<Arg<'a, 'b>>::allow_hyphen_values","value":"fn (self, a: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows values which start with a leading hyphen (`-`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":377072,"byte_end":377087,"line_start":943,"line_end":943,"column_start":12,"column_end":27},"name":"required_unless","qualname":"<Arg<'a, 'b>>::required_unless","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an arg that override this arg's required setting. (i.e. this arg will be required\n unless this other argument is present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":379668,"byte_end":379687,"line_start":1015,"line_end":1015,"column_start":12,"column_end":31},"name":"required_unless_all","qualname":"<Arg<'a, 'b>>::required_unless_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's required setting. (i.e. this arg will be required unless\n all these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":382478,"byte_end":382497,"line_start":1091,"line_end":1091,"column_start":12,"column_end":31},"name":"required_unless_one","qualname":"<Arg<'a, 'b>>::required_unless_one","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets args that override this arg's [required] setting. (i.e. this arg will be required\n unless *at least one of* these other arguments are present).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":384245,"byte_end":384259,"line_start":1139,"line_end":1139,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<Arg<'a, 'b>>::conflicts_with","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a conflicting argument by name. I.e. when using this argument,\n the following argument can't be present and vice versa.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":386102,"byte_end":386120,"line_start":1189,"line_end":1189,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<Arg<'a, 'b>>::conflicts_with_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per\n argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":391234,"byte_end":391248,"line_start":1298,"line_end":1298,"column_start":12,"column_end":26},"name":"overrides_with","qualname":"<Arg<'a, 'b>>::overrides_with","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets a overridable argument by name. I.e. this argument and the following argument\n will override each other in POSIX style (whichever argument was specified at runtime\n **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":392808,"byte_end":392826,"line_start":1334,"line_end":1334,"column_start":12,"column_end":30},"name":"overrides_with_all","qualname":"<Arg<'a, 'b>>::overrides_with_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple mutually overridable arguments by name. I.e. this argument and the following\n argument will override each other in POSIX style (whichever argument was specified at\n runtime **last** \"wins\")","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":395081,"byte_end":395089,"line_start":1400,"line_end":1400,"column_start":12,"column_end":20},"name":"requires","qualname":"<Arg<'a, 'b>>::requires","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an argument by name that is required when this one is present I.e. when\n using this argument, the following argument *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":397452,"byte_end":397463,"line_start":1470,"line_end":1470,"column_start":12,"column_end":23},"name":"requires_if","qualname":"<Arg<'a, 'b>>::requires_if","value":"fn (mut self, val: &'b str, arg: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows a conditional requirement. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":399543,"byte_end":399555,"line_start":1530,"line_end":1530,"column_start":12,"column_end":24},"name":"requires_ifs","qualname":"<Arg<'a, 'b>>::requires_ifs","value":"fn (mut self, ifs: &[(&'b str, &'a str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows multiple conditional requirements. The requirement will only become valid if this arg's value\n equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":402226,"byte_end":402237,"line_start":1608,"line_end":1608,"column_start":12,"column_end":23},"name":"required_if","qualname":"<Arg<'a, 'b>>::required_if","value":"fn (mut self, arg: &'a str, val: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] conditionally. The requirement will only\n become valid if the specified `arg`'s value equals `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":405355,"byte_end":405367,"line_start":1697,"line_end":1697,"column_start":12,"column_end":24},"name":"required_ifs","qualname":"<Arg<'a, 'b>>::required_ifs","value":"fn (mut self, ifs: &[(&'a str, &'b str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows specifying that an argument is [required] based on multiple conditions. The\n conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid\n if one of the specified `arg`'s value equals it's corresponding `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":408029,"byte_end":408041,"line_start":1774,"line_end":1774,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<Arg<'a, 'b>>::requires_all","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets multiple arguments by names that are required when this one is present I.e. when\n using this argument, the following arguments *must* be present.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":409975,"byte_end":409986,"line_start":1827,"line_end":1827,"column_start":12,"column_end":23},"name":"takes_value","qualname":"<Arg<'a, 'b>>::takes_value","value":"fn (self, tv: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument takes a value at run time.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":411083,"byte_end":411103,"line_start":1863,"line_end":1863,"column_start":12,"column_end":32},"name":"hide_possible_values","qualname":"<Arg<'a, 'b>>::hide_possible_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies if the possible values of an argument should be displayed in the help text or\n not. Defaults to `false` (i.e. show possible values)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":412154,"byte_end":412172,"line_start":1897,"line_end":1897,"column_start":12,"column_end":30},"name":"hide_default_value","qualname":"<Arg<'a, 'b>>::hide_default_value","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies if the default value of an argument should be displayed in the help text or\n not. Defaults to `false` (i.e. show default value)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":414337,"byte_end":414342,"line_start":1952,"line_end":1952,"column_start":12,"column_end":17},"name":"index","qualname":"<Arg<'a, 'b>>::index","value":"fn (mut self, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the index of a positional argument **starting at** 1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":422457,"byte_end":422465,"line_start":2148,"line_end":2148,"column_start":12,"column_end":20},"name":"multiple","qualname":"<Arg<'a, 'b>>::multiple","value":"fn (self, multi: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that the argument may appear more than once. For flags, this results\n in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\n would count as three occurrences. For options there is a distinct difference in multiple\n occurrences vs multiple values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":424645,"byte_end":424661,"line_start":2201,"line_end":2201,"column_start":12,"column_end":28},"name":"value_terminator","qualname":"<Arg<'a, 'b>>::value_terminator","value":"fn (mut self, term: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a value that *stops* parsing multiple values of a give argument. By default when\n one sets [`multiple(true)`] on an argument, clap will continue parsing values for that\n argument until it reaches another valid argument, or one of the other more specific settings\n for multiple values is used (such as [`min_values`], [`max_values`] or\n [`number_of_values`]).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":426615,"byte_end":426621,"line_start":2250,"line_end":2250,"column_start":12,"column_end":18},"name":"global","qualname":"<Arg<'a, 'b>>::global","value":"fn (self, g: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that an argument can be matched to all child [`SubCommand`]s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":427995,"byte_end":428007,"line_start":2292,"line_end":2292,"column_start":12,"column_end":24},"name":"empty_values","qualname":"<Arg<'a, 'b>>::empty_values","value":"fn (mut self, ev: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows an argument to accept explicitly empty values. An empty value must be specified at\n the command line with an explicit `\"\"`, or `''`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":429570,"byte_end":429576,"line_start":2344,"line_end":2344,"column_start":12,"column_end":18},"name":"hidden","qualname":"<Arg<'a, 'b>>::hidden","value":"fn (self, h: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":431433,"byte_end":431448,"line_start":2399,"line_end":2399,"column_start":12,"column_end":27},"name":"possible_values","qualname":"<Arg<'a, 'b>>::possible_values","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a list of possible values for this argument. At runtime, `clap` verifies that\n only one of the specified values was used, or fails with an error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":433623,"byte_end":433637,"line_start":2463,"line_end":2463,"column_start":12,"column_end":26},"name":"possible_value","qualname":"<Arg<'a, 'b>>::possible_value","value":"fn (mut self, name: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\n that only one of the specified values was used, or fails with error message.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":435530,"byte_end":435546,"line_start":2517,"line_end":2517,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<Arg<'a, 'b>>::case_insensitive","value":"fn (self, ci: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When used with [`Arg::possible_values`] it allows the argument value to pass validation even if\n the case differs from that of the specified `possible_value`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":436626,"byte_end":436631,"line_start":2555,"line_end":2555,"column_start":12,"column_end":17},"name":"group","qualname":"<Arg<'a, 'b>>::group","value":"fn (mut self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name of the [`ArgGroup`] the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":437832,"byte_end":437838,"line_start":2595,"line_end":2595,"column_start":12,"column_end":18},"name":"groups","qualname":"<Arg<'a, 'b>>::groups","value":"fn (mut self, names: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":439531,"byte_end":439547,"line_start":2642,"line_end":2642,"column_start":12,"column_end":28},"name":"number_of_values","qualname":"<Arg<'a, 'b>>::number_of_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies how many values are required to satisfy this argument. For example, if you had a\n `-f <file>` argument where you wanted exactly 3 'files' you would set\n `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n 3 and only 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":441490,"byte_end":441499,"line_start":2684,"line_end":2684,"column_start":12,"column_end":21},"name":"validator","qualname":"<Arg<'a, 'b>>::validator","value":"fn <F> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows one to perform a custom validation on the argument value. You provide a closure\n which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\n message displayed to the user.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":443088,"byte_end":443100,"line_start":2722,"line_end":2722,"column_start":12,"column_end":24},"name":"validator_os","qualname":"<Arg<'a, 'b>>::validator_os","value":"fn <F> (mut self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Works identically to Validator but is intended to be used with values that could\n contain non UTF-8 formatted strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":445384,"byte_end":445394,"line_start":2786,"line_end":2786,"column_start":12,"column_end":22},"name":"max_values","qualname":"<Arg<'a, 'b>>::max_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *maximum* number of values are for this argument. For example, if you had a\n `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and\n this argument would be satisfied if the user provided, 1, 2, or 3 values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":447644,"byte_end":447654,"line_start":2849,"line_end":2849,"column_start":12,"column_end":22},"name":"min_values","qualname":"<Arg<'a, 'b>>::min_values","value":"fn (mut self, qty: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the *minimum* number of values for this argument. For example, if you had a\n `-f <file>` argument where you wanted at least 2 'files' you would set\n `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\n values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":449698,"byte_end":449711,"line_start":2900,"line_end":2900,"column_start":12,"column_end":25},"name":"use_delimiter","qualname":"<Arg<'a, 'b>>::use_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies whether or not an argument should allow grouping of multiple values via a\n delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\n and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\n value delimiter for all arguments that accept values (options and positional arguments)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":453243,"byte_end":453260,"line_start":2987,"line_end":2987,"column_start":12,"column_end":29},"name":"require_delimiter","qualname":"<Arg<'a, 'b>>::require_delimiter","value":"fn (mut self, d: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that *multiple values* may only be set using the delimiter. This means if an\n if an option is encountered, and no delimiter is found, it automatically assumed that no\n additional values for that option follow. This is unlike the default, where it is generally\n assumed that more values will follow regardless of whether or not a delimiter is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":454583,"byte_end":454598,"line_start":3023,"line_end":3023,"column_start":12,"column_end":27},"name":"value_delimiter","qualname":"<Arg<'a, 'b>>::value_delimiter","value":"fn (mut self, d: &str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the separator to use when values are clumped together, defaults to `,` (comma).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":457427,"byte_end":457438,"line_start":3094,"line_end":3094,"column_start":12,"column_end":23},"name":"value_names","qualname":"<Arg<'a, 'b>>::value_names","value":"fn (mut self, names: &[&'b str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify multiple names for values of option arguments. These names are cosmetic only, used\n for help and usage strings only. The names are **not** used to access arguments. The values\n of the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n `two` `one` will be the first matched value, `two` will be the second).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":459702,"byte_end":459712,"line_start":3162,"line_end":3162,"column_start":12,"column_end":22},"name":"value_name","qualname":"<Arg<'a, 'b>>::value_name","value":"fn (mut self, name: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the name for value of [option] or [positional] arguments inside of help\n documentation. This name is cosmetic only, the name is **not** used to access arguments.\n This setting can be very helpful when describing the type of input the user should be\n using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to\n use all capital letters for the value name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":463075,"byte_end":463088,"line_start":3238,"line_end":3238,"column_start":12,"column_end":25},"name":"default_value","qualname":"<Arg<'a, 'b>>::default_value","value":"fn (self, val: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument when *not* specified at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":463467,"byte_end":463483,"line_start":3246,"line_end":3246,"column_start":12,"column_end":28},"name":"default_value_os","qualname":"<Arg<'a, 'b>>::default_value_os","value":"fn (mut self, val: &'a OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a default value in the exact same manner as [`Arg::default_value`]\n only using [`OsStr`]s instead.\n [`Arg::default_value`]: ./struct.Arg.html#method.default_value\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":467263,"byte_end":467279,"line_start":3348,"line_end":3348,"column_start":12,"column_end":28},"name":"default_value_if","qualname":"<Arg<'a, 'b>>::default_value_if","value":"fn (self, arg: &'a str, val: Option<&'b str>, default: &'b str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to\n `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be\n present at runtime **and** have the value `val`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":467825,"byte_end":467844,"line_start":3360,"line_end":3360,"column_start":12,"column_end":31},"name":"default_value_if_os","qualname":"<Arg<'a, 'b>>::default_value_if_os","value":"fn (mut self, arg: &'a str, val: Option<&'b OsStr>, default: &'b OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides a conditional default value in the exact same manner as [`Arg::default_value_if`]\n only using [`OsStr`]s instead.\n [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":471310,"byte_end":471327,"line_start":3462,"line_end":3462,"column_start":12,"column_end":29},"name":"default_value_ifs","qualname":"<Arg<'a, 'b>>::default_value_ifs","value":"fn (mut self, ifs: &[(&'a str, Option<&'b str>, &'b str)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`].\n The method takes a slice of tuples in the `(arg, Option<val>, default)` format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":472037,"byte_end":472057,"line_start":3478,"line_end":3478,"column_start":12,"column_end":32},"name":"default_value_ifs_os","qualname":"<Arg<'a, 'b>>::default_value_ifs_os","value":"fn (mut self, ifs: &[(&'a str, Option<&'b OsStr>, &'b OsStr)]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides multiple conditional default values in the exact same manner as\n [`Arg::default_value_ifs`] only using [`OsStr`]s instead.\n [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs\n [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":476189,"byte_end":476192,"line_start":3590,"line_end":3590,"column_start":12,"column_end":15},"name":"env","qualname":"<Arg<'a, 'b>>::env","value":"fn (self, name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment, if available. If it is not present in the environment, then default\n rules will apply.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":476499,"byte_end":476505,"line_start":3597,"line_end":3597,"column_start":12,"column_end":18},"name":"env_os","qualname":"<Arg<'a, 'b>>::env_os","value":"fn (mut self, name: &'a OsStr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specifies that if the value is not passed in as an argument, that it should be retrieved\n from the environment if available in the exact same manner as [`Arg::env`] only using\n [`OsStr`]s instead.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":476718,"byte_end":476733,"line_start":3605,"line_end":3605,"column_start":12,"column_end":27},"name":"hide_env_values","qualname":"<Arg<'a, 'b>>::hide_env_values","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" @TODO @p2 @docs @release: write docs\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":478570,"byte_end":478584,"line_start":3658,"line_end":3658,"column_start":12,"column_end":26},"name":"next_line_help","qualname":"<Arg<'a, 'b>>::next_line_help","value":"fn (mut self, nlh: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" When set to `true` the help string will be displayed on the line after the argument and\n indented once. This can be helpful for arguments with very long or complex help messages.\n This can also be helpful for arguments with very long flag names, or many/long value names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":481142,"byte_end":481155,"line_start":3722,"line_end":3722,"column_start":12,"column_end":25},"name":"display_order","qualname":"<Arg<'a, 'b>>::display_order","value":"fn (mut self, ord: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows custom ordering of args within the help message. Args with a lower value will be\n displayed first in the help message. This is helpful when one would like to emphasise\n frequently used args, or prioritize those towards the top of the list. Duplicate values\n **are** allowed. Args with duplicate display orders will be displayed in alphabetical\n order.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":482317,"byte_end":482320,"line_start":3746,"line_end":3746,"column_start":12,"column_end":15},"name":"raw","qualname":"<Arg<'a, 'b>>::raw","value":"fn (self, raw: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Indicates that all parameters passed after this should not be parsed\n individually, but rather passed in their entirety. It is worth noting\n that setting this requires all values to come after a `--` to indicate they\n should all be captured. For example:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":484394,"byte_end":484411,"line_start":3819,"line_end":3819,"column_start":12,"column_end":29},"name":"hidden_short_help","qualname":"<Arg<'a, 'b>>::hidden_short_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from short help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":486563,"byte_end":486579,"line_start":3896,"line_end":3896,"column_start":12,"column_end":28},"name":"hidden_long_help","qualname":"<Arg<'a, 'b>>::hidden_long_help","value":"fn (self, hide: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Hides an argument from long help message output.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1144},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":486909,"byte_end":486915,"line_start":3907,"line_end":3907,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Arg<'a, 'b>>::is_set","value":"fn (&self, s: ArgSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if one of the [`ArgSettings`] settings is set for the argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1146},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487116,"byte_end":487119,"line_start":3914,"line_end":3914,"column_start":12,"column_end":15},"name":"set","qualname":"<Arg<'a, 'b>>::set","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets one of the [`ArgSettings`] settings for the argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487335,"byte_end":487340,"line_start":3922,"line_end":3922,"column_start":12,"column_end":17},"name":"unset","qualname":"<Arg<'a, 'b>>::unset","value":"fn (mut self, s: ArgSettings) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Unsets one of the [`ArgSettings`] settings for the argument.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487451,"byte_end":487455,"line_start":3928,"line_end":3928,"column_start":12,"column_end":16},"name":"setb","qualname":"<Arg<'a, 'b>>::setb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487545,"byte_end":487551,"line_start":3933,"line_end":3933,"column_start":12,"column_end":18},"name":"unsetb","qualname":"<Arg<'a, 'b>>::unsetb","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1184},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488222,"byte_end":488228,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"AnyArg","qualname":"::args::any_arg::AnyArg","value":"AnyArg<'n, 'e>: std_fmt::Display","parent":null,"children":[{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1214},{"krate":0,"index":1216},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488264,"byte_end":488268,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"name","qualname":"::args::any_arg::AnyArg::name","value":"fn (&self) -> &'n str","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488295,"byte_end":488304,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"overrides","qualname":"::args::any_arg::AnyArg::overrides","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488342,"byte_end":488349,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"aliases","qualname":"::args::any_arg::AnyArg::aliases","value":"fn (&self) -> Option<Vec<&'e str>>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488389,"byte_end":488397,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"requires","qualname":"::args::any_arg::AnyArg::requires","value":"fn (&self) -> Option<&[(Option<&'e str>, &'n str)]>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488454,"byte_end":488463,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"blacklist","qualname":"::args::any_arg::AnyArg::blacklist","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488501,"byte_end":488516,"line_start":18,"line_end":18,"column_start":8,"column_end":23},"name":"required_unless","qualname":"::args::any_arg::AnyArg::required_unless","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488554,"byte_end":488560,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"is_set","qualname":"::args::any_arg::AnyArg::is_set","value":"fn (&self, ArgSettings) -> bool","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488597,"byte_end":488600,"line_start":20,"line_end":20,"column_start":8,"column_end":11},"name":"set","qualname":"::args::any_arg::AnyArg::set","value":"fn (&mut self, ArgSettings) -> ()","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488633,"byte_end":488643,"line_start":21,"line_end":21,"column_start":8,"column_end":18},"name":"has_switch","qualname":"::args::any_arg::AnyArg::has_switch","value":"fn (&self) -> bool","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488667,"byte_end":488675,"line_start":22,"line_end":22,"column_start":8,"column_end":16},"name":"max_vals","qualname":"::args::any_arg::AnyArg::max_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488706,"byte_end":488714,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"min_vals","qualname":"::args::any_arg::AnyArg::min_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488745,"byte_end":488753,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"num_vals","qualname":"::args::any_arg::AnyArg::num_vals","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1210},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488784,"byte_end":488797,"line_start":25,"line_end":25,"column_start":8,"column_end":21},"name":"possible_vals","qualname":"::args::any_arg::AnyArg::possible_vals","value":"fn (&self) -> Option<&[&'e str]>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488835,"byte_end":488844,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"validator","qualname":"::args::any_arg::AnyArg::validator","value":"fn (&self) -> Option<&Rc<Fn(String) -> Result<(), String>>>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488909,"byte_end":488921,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"validator_os","qualname":"::args::any_arg::AnyArg::validator_os","value":"fn (&self) -> Option<&Rc<Fn(&OsStr) -> Result<(), OsString>>>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488988,"byte_end":488993,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"short","qualname":"::args::any_arg::AnyArg::short","value":"fn (&self) -> Option<char>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1218},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489025,"byte_end":489029,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"long","qualname":"::args::any_arg::AnyArg::long","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489064,"byte_end":489073,"line_start":30,"line_end":30,"column_start":8,"column_end":17},"name":"val_delim","qualname":"::args::any_arg::AnyArg::val_delim","value":"fn (&self) -> Option<char>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1222},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489105,"byte_end":489116,"line_start":31,"line_end":31,"column_start":8,"column_end":19},"name":"takes_value","qualname":"::args::any_arg::AnyArg::takes_value","value":"fn (&self) -> bool","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489140,"byte_end":489149,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"val_names","qualname":"::args::any_arg::AnyArg::val_names","value":"fn (&self) -> Option<&VecMap<&'e str>>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489193,"byte_end":489197,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"help","qualname":"::args::any_arg::AnyArg::help","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489232,"byte_end":489241,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"long_help","qualname":"::args::any_arg::AnyArg::long_help","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489276,"byte_end":489287,"line_start":35,"line_end":35,"column_start":8,"column_end":19},"name":"default_val","qualname":"::args::any_arg::AnyArg::default_val","value":"fn (&self) -> Option<&'e OsStr>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489324,"byte_end":489340,"line_start":36,"line_end":36,"column_start":8,"column_end":24},"name":"default_vals_ifs","qualname":"::args::any_arg::AnyArg::default_vals_ifs","value":"fn (&self) -> Option<map::Values<(&'n str, Option<&'e OsStr>, &'e OsStr)>>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489420,"byte_end":489423,"line_start":37,"line_end":37,"column_start":8,"column_end":11},"name":"env","qualname":"::args::any_arg::AnyArg::env","value":"fn <'s> (&'s self) -> Option<(&'n OsStr, Option<&'s OsString>)>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489491,"byte_end":489505,"line_start":38,"line_end":38,"column_start":8,"column_end":22},"name":"longest_filter","qualname":"::args::any_arg::AnyArg::longest_filter","value":"fn (&self) -> bool","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":489529,"byte_end":489543,"line_start":39,"line_end":39,"column_start":8,"column_end":22},"name":"val_terminator","qualname":"::args::any_arg::AnyArg::val_terminator","value":"fn (&self) -> Option<&'e str>","parent":{"krate":0,"index":1184},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3208},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":493978,"byte_end":493988,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"ArgMatches","qualname":"::args::arg_matches::ArgMatches","value":"ArgMatches { args, subcommand, usage }","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777}],"decl_id":null,"docs":" Used to get information about the arguments that where supplied to the program at runtime by\n the user. New instances of this struct are obtained by using the [`App::get_matches`] family of\n methods.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1773},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494018,"byte_end":494022,"line_start":62,"line_end":62,"column_start":24,"column_end":28},"name":"args","qualname":"::args::arg_matches::ArgMatches::args","value":"std::collections::HashMap<&'a str, args::matched_arg::MatchedArg>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1775},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494077,"byte_end":494087,"line_start":63,"line_end":63,"column_start":24,"column_end":34},"name":"subcommand","qualname":"::args::arg_matches::ArgMatches::subcommand","value":"std::option::Option<std::boxed::Box<args::subcommand::SubCommand<'a>>>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1777},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494141,"byte_end":494146,"line_start":64,"line_end":64,"column_start":24,"column_end":29},"name":"usage","qualname":"::args::arg_matches::ArgMatches::usage","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":3208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494417,"byte_end":494420,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgMatches<'a>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":495643,"byte_end":495651,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"value_of","qualname":"<ArgMatches<'a>>::value_of","value":"fn <S> (&self, name: S) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\n an additional value at runtime). If the option wasn't present at runtime\n it returns `None`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":497077,"byte_end":497091,"line_start":144,"line_end":144,"column_start":12,"column_end":26},"name":"value_of_lossy","qualname":"<ArgMatches<'a>>::value_of_lossy","value":"fn <S> (&'a self, name: S) -> Option<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy value of a specific argument. If the argument wasn't present at runtime\n it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\n invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":498821,"byte_end":498832,"line_start":180,"line_end":180,"column_start":12,"column_end":23},"name":"value_of_os","qualname":"<ArgMatches<'a>>::value_of_os","value":"fn <S> (&self, name: S) -> Option<&OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OS version of a string value of a specific argument. If the option wasn't present\n at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\n regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\n Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\n value may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":499986,"byte_end":499995,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"values_of","qualname":"<ArgMatches<'a>>::values_of","value":"fn <S> (&'a self, name: S) -> Option<Values<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n (i.e. an argument that takes multiple values at runtime). If the option wasn't present at\n runtime it returns `None`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":501548,"byte_end":501563,"line_start":246,"line_end":246,"column_start":12,"column_end":27},"name":"values_of_lossy","qualname":"<ArgMatches<'a>>::values_of_lossy","value":"fn <S> (&'a self, name: S) -> Option<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the lossy values of a specific argument. If the option wasn't present at runtime\n it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\n those invalid points will be replaced with `\\u{FFFD}`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":503592,"byte_end":503604,"line_start":289,"line_end":289,"column_start":12,"column_end":24},"name":"values_of_os","qualname":"<ArgMatches<'a>>::values_of_os","value":"fn <S> (&'a self, name: S) -> Option<OsValues<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\n specific argument. If the option wasn't present at runtime it returns `None`. An OS value\n on Unix-like systems is any series of bytes, regardless of whether or not they contain\n valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\n filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":504436,"byte_end":504446,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"is_present","qualname":"<ArgMatches<'a>>::is_present","value":"fn <S> (&self, name: S) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if an argument was present at runtime, otherwise `false`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":505984,"byte_end":505998,"line_start":363,"line_end":363,"column_start":12,"column_end":26},"name":"occurrences_of","qualname":"<ArgMatches<'a>>::occurrences_of","value":"fn <S> (&self, name: S) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of times an argument was used at runtime. If an argument isn't present\n it will return `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":511549,"byte_end":511557,"line_start":497,"line_end":497,"column_start":12,"column_end":20},"name":"index_of","qualname":"<ArgMatches<'a>>::index_of","value":"fn <S> (&self, name: S) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the starting index of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":515167,"byte_end":515177,"line_start":579,"line_end":579,"column_start":12,"column_end":22},"name":"indices_of","qualname":"<ArgMatches<'a>>::indices_of","value":"fn <S> (&'a self, name: S) -> Option<Indices<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Gets all indices of the argument in respect to all other arguments. Indices are\n similar to argv indices, but are not exactly 1:1.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":516841,"byte_end":516859,"line_start":621,"line_end":621,"column_start":12,"column_end":30},"name":"subcommand_matches","qualname":"<ArgMatches<'a>>::subcommand_matches","value":"fn <S> (&self, name: S) -> Option<&ArgMatches<'a>>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\n the subcommand wasn't present at runtime.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":519813,"byte_end":519828,"line_start":688,"line_end":688,"column_start":12,"column_end":27},"name":"subcommand_name","qualname":"<ArgMatches<'a>>::subcommand_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`]\n as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know\n which subcommand was actually used. This method returns the name of the subcommand that was\n used at runtime, or `None` if one wasn't.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522024,"byte_end":522034,"line_start":739,"line_end":739,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<ArgMatches<'a>>::subcommand","value":"fn (&self) -> (&str, Option<&ArgMatches<'a>>)","parent":null,"children":[],"decl_id":null,"docs":" This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\n by returning a tuple with both pieces of information.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":522665,"byte_end":522670,"line_start":759,"line_end":759,"column_start":12,"column_end":17},"name":"usage","qualname":"<ArgMatches<'a>>::usage","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523655,"byte_end":523661,"line_start":790,"line_end":790,"column_start":12,"column_end":18},"name":"Values","qualname":"::args::arg_matches::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":1785}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\n method.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3228},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525406,"byte_end":525414,"line_start":841,"line_end":841,"column_start":12,"column_end":20},"name":"OsValues","qualname":"::args::arg_matches::OsValues","value":"OsValues {  }","parent":null,"children":[{"krate":0,"index":1793}],"decl_id":null,"docs":" An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\n method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n [`Values`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3238},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":526923,"byte_end":526930,"line_start":892,"line_end":892,"column_start":12,"column_end":19},"name":"Indices","qualname":"::args::arg_matches::Indices","value":"Indices {  }","parent":null,"children":[{"krate":0,"index":1801}],"decl_id":null,"docs":" An iterator for getting multiple indices out of an argument via the [`ArgMatches::indices_of`]\n method.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529263,"byte_end":529273,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"ArgMatcher","qualname":"::args::arg_matcher::ArgMatcher","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529212,"byte_end":529251,"line_start":14,"line_end":14,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529441,"byte_end":529444,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgMatcher<'a>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529493,"byte_end":529514,"line_start":24,"line_end":24,"column_start":12,"column_end":33},"name":"process_arg_overrides","qualname":"<ArgMatcher<'a>>::process_arg_overrides","value":"fn <'b> (&mut self, a: Option<&AnyArg<'a, 'b>>, overrides: &mut Vec<(&'b str, &'a str)>, required: &mut Vec<&'a str>, check_all: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":531063,"byte_end":531084,"line_start":56,"line_end":56,"column_start":12,"column_end":33},"name":"handle_self_overrides","qualname":"<ArgMatcher<'a>>::handle_self_overrides","value":"fn <'b> (&mut self, a: Option<&AnyArg<'a, 'b>>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532034,"byte_end":532044,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"is_present","qualname":"<ArgMatcher<'a>>::is_present","value":"fn (&self, name: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":532124,"byte_end":532141,"line_start":83,"line_end":83,"column_start":12,"column_end":29},"name":"propagate_globals","qualname":"<ArgMatcher<'a>>::propagate_globals","value":"fn (&mut self, global_arg_vec: &[&'a str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":533914,"byte_end":533921,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ArgMatcher<'a>>::get_mut","value":"fn (&mut self, arg: &str) -> Option<&mut MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534012,"byte_end":534015,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"get","qualname":"<ArgMatcher<'a>>::get","value":"fn (&self, arg: &str) -> Option<&MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534094,"byte_end":534100,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"remove","qualname":"<ArgMatcher<'a>>::remove","value":"fn (&mut self, arg: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534164,"byte_end":534174,"line_start":131,"line_end":131,"column_start":12,"column_end":22},"name":"remove_all","qualname":"<ArgMatcher<'a>>::remove_all","value":"fn (&mut self, args: &[&str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534295,"byte_end":534301,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"insert","qualname":"<ArgMatcher<'a>>::insert","value":"fn (&mut self, name: &'a str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534389,"byte_end":534397,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"contains","qualname":"<ArgMatcher<'a>>::contains","value":"fn (&self, arg: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534470,"byte_end":534478,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ArgMatcher<'a>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534533,"byte_end":534538,"line_start":143,"line_end":143,"column_start":12,"column_end":17},"name":"usage","qualname":"<ArgMatcher<'a>>::usage","value":"fn (&mut self, usage: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534609,"byte_end":534618,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"arg_names","qualname":"<ArgMatcher<'a>>::arg_names","value":"fn (&'a self) -> Vec<&'a str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534708,"byte_end":534713,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"entry","qualname":"<ArgMatcher<'a>>::entry","value":"fn (&mut self, arg: &'a str) -> Entry<&'a str, MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534808,"byte_end":534818,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"subcommand","qualname":"<ArgMatcher<'a>>::subcommand","value":"fn (&mut self, sc: SubCommand<'a>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534906,"byte_end":534921,"line_start":151,"line_end":151,"column_start":12,"column_end":27},"name":"subcommand_name","qualname":"<ArgMatcher<'a>>::subcommand_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":534986,"byte_end":534990,"line_start":153,"line_end":153,"column_start":12,"column_end":16},"name":"iter","qualname":"<ArgMatcher<'a>>::iter","value":"fn (&self) -> Iter<&str, MatchedArg>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":535059,"byte_end":535076,"line_start":155,"line_end":155,"column_start":12,"column_end":29},"name":"inc_occurrence_of","qualname":"<ArgMatcher<'a>>::inc_occurrence_of","value":"fn (&mut self, arg: &'a str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":535381,"byte_end":535399,"line_start":165,"line_end":165,"column_start":12,"column_end":30},"name":"inc_occurrences_of","qualname":"<ArgMatcher<'a>>::inc_occurrences_of","value":"fn (&mut self, args: &[&'a str]) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":535595,"byte_end":535605,"line_start":172,"line_end":172,"column_start":12,"column_end":22},"name":"add_val_to","qualname":"<ArgMatcher<'a>>::add_val_to","value":"fn (&mut self, arg: &'a str, val: &OsStr) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":535878,"byte_end":535890,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"add_index_to","qualname":"<ArgMatcher<'a>>::add_index_to","value":"fn (&mut self, arg: &'a str, idx: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":536143,"byte_end":536158,"line_start":190,"line_end":190,"column_start":12,"column_end":27},"name":"needs_more_vals","qualname":"<ArgMatcher<'a>>::needs_more_vals","value":"fn <'b, A> (&self, o: &A) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3248},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538081,"byte_end":538091,"line_start":31,"line_end":31,"column_start":12,"column_end":22},"name":"SubCommand","qualname":"::args::subcommand::SubCommand","value":"SubCommand { name, matches }","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1811}],"decl_id":null,"docs":" The abstract representation of a command line subcommand.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1809},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538121,"byte_end":538125,"line_start":32,"line_end":32,"column_start":24,"column_end":28},"name":"name","qualname":"::args::subcommand::SubCommand::name","value":"std::string::String","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1811},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538158,"byte_end":538165,"line_start":33,"line_end":33,"column_start":24,"column_end":31},"name":"matches","qualname":"::args::subcommand::SubCommand::matches","value":"args::arg_matches::ArgMatches<'a>","parent":{"krate":0,"index":3248},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538610,"byte_end":538619,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"with_name","qualname":"<SubCommand<'a>>::with_name","value":"fn <'b> (name: &str) -> App<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of a subcommand requiring a name. The name will be displayed\n to the user when they print version or help and usage information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3258},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539748,"byte_end":539759,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"FlagBuilder","qualname":"::args::arg_builder::flag::FlagBuilder","value":"FlagBuilder { b, s }","parent":null,"children":[{"krate":0,"index":1821},{"krate":0,"index":1823}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1821},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539796,"byte_end":539797,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::flag::FlagBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1823},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539821,"byte_end":539822,"line_start":21,"line_end":21,"column_start":9,"column_end":10},"name":"s","qualname":"::args::arg_builder::flag::FlagBuilder::s","value":"args::arg_builder::switched::Switched<'e>","parent":{"krate":0,"index":3258},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539887,"byte_end":539890,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<FlagBuilder<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3272},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544697,"byte_end":544707,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"PosBuilder","qualname":"::args::arg_builder::positional::PosBuilder","value":"PosBuilder { b, v, index }","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1845}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544605,"byte_end":544644,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1841},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544744,"byte_end":544745,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::positional::PosBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1843},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544769,"byte_end":544770,"line_start":23,"line_end":23,"column_start":9,"column_end":10},"name":"v","qualname":"::args::arg_builder::positional::PosBuilder::v","value":"args::arg_builder::valued::Valued<'n, 'e>","parent":{"krate":0,"index":3272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1845},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544796,"byte_end":544801,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"name":"index","qualname":"::args::arg_builder::positional::PosBuilder::index","value":"u64","parent":{"krate":0,"index":3272},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544856,"byte_end":544859,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<PosBuilder<'n, 'e>>::new","value":"fn (name: &'n str, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":545033,"byte_end":545045,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"from_arg_ref","qualname":"<PosBuilder<'n, 'e>>::from_arg_ref","value":"fn (a: &Arg<'n, 'e>, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":545446,"byte_end":545454,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"from_arg","qualname":"<PosBuilder<'n, 'e>>::from_arg","value":"fn (mut a: Arg<'n, 'e>, idx: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":545884,"byte_end":545896,"line_start":63,"line_end":63,"column_start":12,"column_end":24},"name":"multiple_str","qualname":"<PosBuilder<'n, 'e>>::multiple_str","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":546181,"byte_end":546197,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"name_no_brackets","qualname":"<PosBuilder<'n, 'e>>::name_no_brackets","value":"fn (&self) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3282},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":551991,"byte_end":552001,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"OptBuilder","qualname":"::args::arg_builder::option::OptBuilder","value":"OptBuilder { b, s, v }","parent":null,"children":[{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1865}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":551899,"byte_end":551938,"line_start":13,"line_end":13,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1861},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552038,"byte_end":552039,"line_start":20,"line_end":20,"column_start":9,"column_end":10},"name":"b","qualname":"::args::arg_builder::option::OptBuilder::b","value":"args::arg_builder::base::Base<'n, 'e>","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1863},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552063,"byte_end":552064,"line_start":21,"line_end":21,"column_start":9,"column_end":10},"name":"s","qualname":"::args::arg_builder::option::OptBuilder::s","value":"args::arg_builder::switched::Switched<'e>","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1865},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552088,"byte_end":552089,"line_start":22,"line_end":22,"column_start":9,"column_end":10},"name":"v","qualname":"::args::arg_builder::option::OptBuilder::v","value":"args::arg_builder::valued::Valued<'n, 'e>","parent":{"krate":0,"index":3282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552155,"byte_end":552158,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<OptBuilder<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3292},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559385,"byte_end":559389,"line_start":4,"line_end":4,"column_start":12,"column_end":16},"name":"Base","qualname":"::args::arg_builder::base::Base","value":"Base { name, help, long_help, blacklist, settings, r_unless, overrides, groups, requires }","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1879},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559426,"byte_end":559430,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"name","qualname":"::args::arg_builder::base::Base::name","value":"&'a str","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1881},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559449,"byte_end":559453,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"help","qualname":"::args::arg_builder::base::Base::help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1883},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559480,"byte_end":559489,"line_start":10,"line_end":10,"column_start":9,"column_end":18},"name":"long_help","qualname":"::args::arg_builder::base::Base::long_help","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1885},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559516,"byte_end":559525,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"blacklist","qualname":"::args::arg_builder::base::Base::blacklist","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1887},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559557,"byte_end":559565,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"settings","qualname":"::args::arg_builder::base::Base::settings","value":"args::settings::ArgFlags","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1889},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559585,"byte_end":559593,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"name":"r_unless","qualname":"::args::arg_builder::base::Base::r_unless","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1891},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559625,"byte_end":559634,"line_start":14,"line_end":14,"column_start":9,"column_end":18},"name":"overrides","qualname":"::args::arg_builder::base::Base::overrides","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1893},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559666,"byte_end":559672,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"groups","qualname":"::args::arg_builder::base::Base::groups","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1895},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559704,"byte_end":559712,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"requires","qualname":"::args::arg_builder::base::Base::requires","value":"std::option::Option<std::vec::Vec<(std::option::Option<&'b str>, &'a str)>>","parent":{"krate":0,"index":3292},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559797,"byte_end":559800,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<Base<'n, 'e>>::new","value":"fn (name: &'n str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559926,"byte_end":559929,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"set","qualname":"<Base<'n, 'e>>::set","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559994,"byte_end":559999,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"unset","qualname":"<Base<'n, 'e>>::unset","value":"fn (&mut self, s: ArgSettings) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":560066,"byte_end":560072,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"is_set","qualname":"<Base<'n, 'e>>::is_set","value":"fn (&self, s: ArgSettings) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3306},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560519,"byte_end":560525,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Valued","qualname":"::args::arg_builder::valued::Valued","value":"Valued { possible_vals, val_names, num_vals, max_vals, min_vals, validator, validator_os, val_delim, default_val, default_vals_ifs, env, terminator }","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1935}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560451,"byte_end":560490,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1913},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560562,"byte_end":560575,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"name":"possible_vals","qualname":"::args::arg_builder::valued::Valued::possible_vals","value":"std::option::Option<std::vec::Vec<&'b str>>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1915},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560607,"byte_end":560616,"line_start":15,"line_end":15,"column_start":9,"column_end":18},"name":"val_names","qualname":"::args::arg_builder::valued::Valued::val_names","value":"std::option::Option<vec_map::VecMap<&'b str>>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560651,"byte_end":560659,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"num_vals","qualname":"::args::arg_builder::valued::Valued::num_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560682,"byte_end":560690,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"max_vals","qualname":"::args::arg_builder::valued::Valued::max_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1921},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560713,"byte_end":560721,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"min_vals","qualname":"::args::arg_builder::valued::Valued::min_vals","value":"std::option::Option<u64>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1923},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560744,"byte_end":560753,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"validator","qualname":"::args::arg_builder::valued::Valued::validator","value":"std::option::Option<std::rc::Rc<(dyn std::ops::Fn(std::string::String) -> std::result::Result<(), std::string::String> + 'static)>>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1925},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560809,"byte_end":560821,"line_start":20,"line_end":20,"column_start":9,"column_end":21},"name":"validator_os","qualname":"::args::arg_builder::valued::Valued::validator_os","value":"std::option::Option<std::rc::Rc<(dyn for<'r> std::ops::Fn(&'r std::ffi::OsStr) -> std::result::Result<(), std::ffi::OsString> + 'static)>>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1927},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560879,"byte_end":560888,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"name":"val_delim","qualname":"::args::arg_builder::valued::Valued::val_delim","value":"std::option::Option<char>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1929},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560912,"byte_end":560923,"line_start":22,"line_end":22,"column_start":9,"column_end":20},"name":"default_val","qualname":"::args::arg_builder::valued::Valued::default_val","value":"std::option::Option<&'b std::ffi::OsStr>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1931},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":560952,"byte_end":560968,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"name":"default_vals_ifs","qualname":"::args::arg_builder::valued::Valued::default_vals_ifs","value":"std::option::Option<vec_map::VecMap<(&'a str, std::option::Option<&'b std::ffi::OsStr>, &'b std::ffi::OsStr)>>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1933},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561035,"byte_end":561038,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"env","qualname":"::args::arg_builder::valued::Valued::env","value":"std::option::Option<(&'a std::ffi::OsStr, std::option::Option<std::ffi::OsString>)>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1935},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561087,"byte_end":561097,"line_start":25,"line_end":25,"column_start":9,"column_end":19},"name":"terminator","qualname":"::args::arg_builder::valued::Valued::terminator","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3306},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561621,"byte_end":561628,"line_start":48,"line_end":48,"column_start":12,"column_end":19},"name":"fill_in","qualname":"<Valued<'n, 'e>>::fill_in","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3312},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562157,"byte_end":562165,"line_start":4,"line_end":4,"column_start":12,"column_end":20},"name":"Switched","qualname":"::args::arg_builder::switched::Switched","value":"Switched { short, long, aliases, disp_ord, unified_ord }","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562180,"byte_end":562185,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"short","qualname":"::args::arg_builder::switched::Switched::short","value":"std::option::Option<char>","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562209,"byte_end":562213,"line_start":6,"line_end":6,"column_start":9,"column_end":13},"name":"long","qualname":"::args::arg_builder::switched::Switched::long","value":"std::option::Option<&'b str>","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562240,"byte_end":562247,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"name":"aliases","qualname":"::args::arg_builder::switched::Switched::aliases","value":"std::option::Option<std::vec::Vec<(&'b str, bool)>>","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1949},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562306,"byte_end":562314,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"name":"disp_ord","qualname":"::args::arg_builder::switched::Switched::disp_ord","value":"usize","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1951},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562331,"byte_end":562342,"line_start":9,"line_end":9,"column_start":9,"column_end":20},"name":"unified_ord","qualname":"::args::arg_builder::switched::Switched::unified_ord","value":"usize","parent":{"krate":0,"index":3312},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3318},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563072,"byte_end":563082,"line_start":6,"line_end":6,"column_start":12,"column_end":22},"name":"MatchedArg","qualname":"::args::matched_arg::MatchedArg","value":"MatchedArg { occurs, indices, vals }","parent":null,"children":[{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1959}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1955},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563108,"byte_end":563114,"line_start":7,"line_end":7,"column_start":24,"column_end":30},"name":"occurs","qualname":"::args::matched_arg::MatchedArg::occurs","value":"u64","parent":{"krate":0,"index":3318},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1957},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563144,"byte_end":563151,"line_start":8,"line_end":8,"column_start":24,"column_end":31},"name":"indices","qualname":"::args::matched_arg::MatchedArg::indices","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":3318},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1959},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563188,"byte_end":563192,"line_start":9,"line_end":9,"column_start":24,"column_end":28},"name":"vals","qualname":"::args::matched_arg::MatchedArg::vals","value":"std::vec::Vec<std::ffi::OsString>","parent":{"krate":0,"index":3318},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563424,"byte_end":563427,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<MatchedArg>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3328},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567466,"byte_end":567474,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"ArgGroup","qualname":"::args::group::ArgGroup","value":"ArgGroup { name, args, required, requires, conflicts, multiple }","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973}],"decl_id":null,"docs":" `ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these\n arguments\". By placing arguments in a logical group, you can create easier requirement and\n exclusion rules instead of having to list each argument individually, or when you want a rule\n to apply \"any but not all\" arguments.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1963},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567504,"byte_end":567508,"line_start":82,"line_end":82,"column_start":24,"column_end":28},"name":"name","qualname":"::args::group::ArgGroup::name","value":"&'a str","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1965},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567542,"byte_end":567546,"line_start":83,"line_end":83,"column_start":24,"column_end":28},"name":"args","qualname":"::args::group::ArgGroup::args","value":"std::vec::Vec<&'a str>","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1967},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567585,"byte_end":567593,"line_start":84,"line_end":84,"column_start":24,"column_end":32},"name":"required","qualname":"::args::group::ArgGroup::required","value":"bool","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1969},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567624,"byte_end":567632,"line_start":85,"line_end":85,"column_start":24,"column_end":32},"name":"requires","qualname":"::args::group::ArgGroup::requires","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1971},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567679,"byte_end":567688,"line_start":86,"line_end":86,"column_start":24,"column_end":33},"name":"conflicts","qualname":"::args::group::ArgGroup::conflicts","value":"std::option::Option<std::vec::Vec<&'a str>>","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1973},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567735,"byte_end":567743,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"name":"multiple","qualname":"::args::group::ArgGroup::multiple","value":"bool","parent":{"krate":0,"index":3328},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":568135,"byte_end":568144,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"with_name","qualname":"<ArgGroup<'a>>::with_name","value":"fn (n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\n get values from the group or refer to the group inside of conflict and requirement rules.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":569630,"byte_end":569633,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"arg","qualname":"<ArgGroup<'a>>::arg","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds an [argument] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":570600,"byte_end":570604,"line_start":180,"line_end":180,"column_start":12,"column_end":16},"name":"args","qualname":"<ArgGroup<'a>>::args","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adds multiple [arguments] to this group by name","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":572346,"byte_end":572354,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"multiple","qualname":"<ArgGroup<'a>>::multiple","value":"fn (mut self, m: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":574106,"byte_end":574114,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"required","qualname":"<ArgGroup<'a>>::required","value":"fn (mut self, r: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the group as required or not. A required group will be displayed in the usage string\n of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states\n that one argument from this group *must* be present at runtime (unless\n conflicting with another argument).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2022},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":575532,"byte_end":575540,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"requires","qualname":"<ArgGroup<'a>>::requires","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when any one of the arguments from\n this group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2024},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":577204,"byte_end":577216,"line_start":342,"line_end":342,"column_start":12,"column_end":24},"name":"requires_all","qualname":"<ArgGroup<'a>>::requires_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the requirement rules of this group. This is not to be confused with a\n [required group]. Requirement rules function just like [argument requirement rules], you\n can name other arguments or groups that must be present when one of the arguments from this\n group is used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":578563,"byte_end":578577,"line_start":376,"line_end":376,"column_start":12,"column_end":26},"name":"conflicts_with","qualname":"<ArgGroup<'a>>::conflicts_with","value":"fn (mut self, n: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":580102,"byte_end":580120,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"conflicts_with_all","qualname":"<ArgGroup<'a>>::conflicts_with_all","value":"fn (mut self, ns: &[&'a str]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the exclusion rules of this group. Exclusion rules function just like\n [argument exclusion rules], you can name other arguments or groups that must *not* be\n present when one of the arguments from this group are used.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3682},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587231,"byte_end":587239,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"ArgFlags","qualname":"::args::settings::ArgFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587220,"byte_end":587247,"line_start":33,"line_end":33,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587276,"byte_end":587279,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgFlags>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1989},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588781,"byte_end":588789,"line_start":75,"line_end":75,"column_start":5,"column_end":13},"name":"Required","qualname":"::args::settings::ArgSettings::Required","value":"ArgSettings::Required","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument must be used\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1991},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588867,"byte_end":588875,"line_start":77,"line_end":77,"column_start":5,"column_end":13},"name":"Multiple","qualname":"::args::settings::ArgSettings::Multiple","value":"ArgSettings::Multiple","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument may be used multiple times such as `--flag --flag`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1993},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588944,"byte_end":588955,"line_start":79,"line_end":79,"column_start":5,"column_end":16},"name":"EmptyValues","qualname":"::args::settings::ArgSettings::EmptyValues","value":"ArgSettings::EmptyValues","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument allows empty values such as `--option \"\"`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1995},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589099,"byte_end":589105,"line_start":83,"line_end":83,"column_start":5,"column_end":11},"name":"Global","qualname":"::args::settings::ArgSettings::Global","value":"ArgSettings::Global","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument should be propagated down through all child [`SubCommand`]s","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1997},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589169,"byte_end":589175,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Hidden","qualname":"::args::settings::ArgSettings::Hidden","value":"ArgSettings::Hidden","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1999},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589246,"byte_end":589256,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"TakesValue","qualname":"::args::settings::ArgSettings::TakesValue","value":"ArgSettings::TakesValue","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument accepts a value, such as `--option <value>`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2001},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589341,"byte_end":589358,"line_start":89,"line_end":89,"column_start":5,"column_end":22},"name":"UseValueDelimiter","qualname":"::args::settings::ArgSettings::UseValueDelimiter","value":"ArgSettings::UseValueDelimiter","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Determines if the argument allows values to be grouped via a delimiter\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2003},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589424,"byte_end":589436,"line_start":91,"line_end":91,"column_start":5,"column_end":17},"name":"NextLineHelp","qualname":"::args::settings::ArgSettings::NextLineHelp","value":"ArgSettings::NextLineHelp","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Prints the help text on the line after the argument\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2005},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589512,"byte_end":589528,"line_start":93,"line_end":93,"column_start":5,"column_end":21},"name":"RequireDelimiter","qualname":"::args::settings::ArgSettings::RequireDelimiter","value":"ArgSettings::RequireDelimiter","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Requires the use of a value delimiter for all multiple values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2007},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589589,"byte_end":589607,"line_start":95,"line_end":95,"column_start":5,"column_end":23},"name":"HidePossibleValues","qualname":"::args::settings::ArgSettings::HidePossibleValues","value":"ArgSettings::HidePossibleValues","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Hides the possible values from the help string\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2009},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589655,"byte_end":589673,"line_start":97,"line_end":97,"column_start":5,"column_end":23},"name":"AllowLeadingHyphen","qualname":"::args::settings::ArgSettings::AllowLeadingHyphen","value":"ArgSettings::AllowLeadingHyphen","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Allows vals that start with a '-'\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2011},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589729,"byte_end":589742,"line_start":99,"line_end":99,"column_start":5,"column_end":18},"name":"RequireEquals","qualname":"::args::settings::ArgSettings::RequireEquals","value":"ArgSettings::RequireEquals","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Require options use `--option=val` syntax\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2013},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589861,"byte_end":589865,"line_start":102,"line_end":102,"column_start":5,"column_end":9},"name":"Last","qualname":"::args::settings::ArgSettings::Last","value":"ArgSettings::Last","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Specifies that the arg is the last positional argument and may be accessed early via `--`\n syntax\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2015},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":589924,"byte_end":589940,"line_start":104,"line_end":104,"column_start":5,"column_end":21},"name":"HideDefaultValue","qualname":"::args::settings::ArgSettings::HideDefaultValue","value":"ArgSettings::HideDefaultValue","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Hides the default value from the help string\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2017},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590000,"byte_end":590015,"line_start":106,"line_end":106,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::args::settings::ArgSettings::CaseInsensitive","value":"ArgSettings::CaseInsensitive","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Makes `Arg::possible_values` case insensitive\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2019},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590066,"byte_end":590079,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"HideEnvValues","qualname":"::args::settings::ArgSettings::HideEnvValues","value":"ArgSettings::HideEnvValues","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" Hides ENV values in the help message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2021},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590149,"byte_end":590164,"line_start":110,"line_end":110,"column_start":5,"column_end":20},"name":"HiddenShortHelp","qualname":"::args::settings::ArgSettings::HiddenShortHelp","value":"ArgSettings::HiddenShortHelp","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in short help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590233,"byte_end":590247,"line_start":112,"line_end":112,"column_start":5,"column_end":19},"name":"HiddenLongHelp","qualname":"::args::settings::ArgSettings::HiddenLongHelp","value":"ArgSettings::HiddenLongHelp","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":" The argument should **not** be shown in long help text\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2025},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590268,"byte_end":590285,"line_start":113,"line_end":113,"column_start":20,"column_end":37},"name":"RequiredUnlessAll","qualname":"::args::settings::ArgSettings::RequiredUnlessAll","value":"ArgSettings::RequiredUnlessAll","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2027},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590306,"byte_end":590326,"line_start":114,"line_end":114,"column_start":20,"column_end":40},"name":"ValueDelimiterNotSet","qualname":"::args::settings::ArgSettings::ValueDelimiterNotSet","value":"ArgSettings::ValueDelimiterNotSet","parent":{"krate":0,"index":3700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3700},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588729,"byte_end":588740,"line_start":73,"line_end":73,"column_start":10,"column_end":21},"name":"ArgSettings","qualname":"::args::settings::ArgSettings","value":"ArgSettings::{Required, Multiple, EmptyValues, Global, Hidden, TakesValue, UseValueDelimiter, NextLineHelp, RequireDelimiter, HidePossibleValues, AllowLeadingHyphen, RequireEquals, Last, HideDefaultValue, CaseInsensitive, HideEnvValues, HiddenShortHelp, HiddenLongHelp, RequiredUnlessAll, ValueDelimiterNotSet}","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1991},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005},{"krate":0,"index":2007},{"krate":0,"index":2009},{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":2015},{"krate":0,"index":2017},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2025},{"krate":0,"index":2027}],"decl_id":null,"docs":" Various settings that apply to arguments and may be set, unset, and checked via getter/setter\n methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588720,"byte_end":590329,"line_start":73,"line_end":115,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643170,"byte_end":643174,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Auto","qualname":"::fmt::ColorWhen::Auto","value":"ColorWhen::Auto","parent":{"krate":0,"index":3732},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643180,"byte_end":643186,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Always","qualname":"::fmt::ColorWhen::Always","value":"ColorWhen::Always","parent":{"krate":0,"index":3732},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643192,"byte_end":643197,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Never","qualname":"::fmt::ColorWhen::Never","value":"ColorWhen::Never","parent":{"krate":0,"index":3732},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3732},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643154,"byte_end":643163,"line_start":14,"line_end":14,"column_start":10,"column_end":19},"name":"ColorWhen","qualname":"::fmt::ColorWhen","value":"ColorWhen::{Auto, Always, Never}","parent":null,"children":[{"krate":0,"index":2057},{"krate":0,"index":2059},{"krate":0,"index":2061}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":643145,"byte_end":643200,"line_start":14,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645611,"byte_end":645616,"line_start":121,"line_end":121,"column_start":5,"column_end":10},"name":"Error","qualname":"::fmt::Format::Error","value":"Format::Error(T)","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Defines the style used for errors, defaults to Red\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645689,"byte_end":645696,"line_start":123,"line_end":123,"column_start":5,"column_end":12},"name":"Warning","qualname":"::fmt::Format::Warning","value":"Format::Warning(T)","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Defines the style used for warnings, defaults to Yellow\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645771,"byte_end":645775,"line_start":125,"line_end":125,"column_start":5,"column_end":9},"name":"Good","qualname":"::fmt::Format::Good","value":"Format::Good(T)","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Defines the style used for good values, defaults to Green\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2077},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645820,"byte_end":645824,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"None","qualname":"::fmt::Format::None","value":"Format::None(T)","parent":{"krate":0,"index":3748},"children":[],"decl_id":null,"docs":" Defines no formatting style\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3748},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645536,"byte_end":645542,"line_start":119,"line_end":119,"column_start":10,"column_end":16},"name":"Format","qualname":"::fmt::Format","value":"Format::{Error, Warning, Good, None}","parent":null,"children":[{"krate":0,"index":2065},{"krate":0,"index":2069},{"krate":0,"index":2073},{"krate":0,"index":2077}],"decl_id":null,"docs":" Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow,\n and Good=Green\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2200},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":652670,"byte_end":652676,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Result","qualname":"::errors::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Short hand for [`Result`] type","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2083},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":653406,"byte_end":653418,"line_start":39,"line_end":39,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::errors::ErrorKind::InvalidValue","value":"ErrorKind::InvalidValue","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when an [`Arg`] has a set of possible values,\n and the user provides a value which isn't in that set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2085},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":653890,"byte_end":653905,"line_start":53,"line_end":53,"column_start":5,"column_end":20},"name":"UnknownArgument","qualname":"::errors::ErrorKind::UnknownArgument","value":"ErrorKind::UnknownArgument","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when a user provides a flag, option, argument or subcommand which isn't defined.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2087},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":655016,"byte_end":655033,"line_start":77,"line_end":77,"column_start":5,"column_end":22},"name":"InvalidSubcommand","qualname":"::errors::ErrorKind::InvalidSubcommand","value":"ErrorKind::InvalidSubcommand","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for\n being similar enough to an existing subcommand.\n If it doesn't meet the threshold, or the 'suggestions' feature is disabled,\n the more general [`UnknownArgument`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2089},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":656309,"byte_end":656331,"line_start":104,"line_end":104,"column_start":5,"column_end":27},"name":"UnrecognizedSubcommand","qualname":"::errors::ErrorKind::UnrecognizedSubcommand","value":"ErrorKind::UnrecognizedSubcommand","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides an unrecognized [`SubCommand`] which either\n doesn't meet the threshold for being similar enough to an existing subcommand,\n or the 'suggestions' feature is disabled.\n Otherwise the more detailed [`InvalidSubcommand`] error is returned.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2091},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":656859,"byte_end":656869,"line_start":121,"line_end":121,"column_start":5,"column_end":15},"name":"EmptyValue","qualname":"::errors::ErrorKind::EmptyValue","value":"ErrorKind::EmptyValue","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides an empty value for an option that does not allow empty\n values.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2093},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":657640,"byte_end":657655,"line_start":144,"line_end":144,"column_start":5,"column_end":20},"name":"ValueValidation","qualname":"::errors::ErrorKind::ValueValidation","value":"ErrorKind::ValueValidation","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value for an argument with a custom validation and the\n value fails that validation.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2095},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":658277,"byte_end":658290,"line_start":162,"line_end":162,"column_start":5,"column_end":18},"name":"TooManyValues","qualname":"::errors::ErrorKind::TooManyValues","value":"ErrorKind::TooManyValues","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when a user provides more values for an argument than were defined by setting\n [`Arg::max_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2097},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":658914,"byte_end":658926,"line_start":180,"line_end":180,"column_start":5,"column_end":17},"name":"TooFewValues","qualname":"::errors::ErrorKind::TooFewValues","value":"ErrorKind::TooFewValues","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides fewer values for an argument than were defined by setting\n [`Arg::min_values`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2099},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":659768,"byte_end":659787,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"WrongNumberOfValues","qualname":"::errors::ErrorKind::WrongNumberOfValues","value":"ErrorKind::WrongNumberOfValues","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides a different number of values for an argument than what's\n been defined by setting [`Arg::number_of_values`] or than was implicitly set by\n [`Arg::value_names`].","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2101},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":660422,"byte_end":660438,"line_start":221,"line_end":221,"column_start":5,"column_end":21},"name":"ArgumentConflict","qualname":"::errors::ErrorKind::ArgumentConflict","value":"ErrorKind::ArgumentConflict","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides two values which conflict with each other and can't be used\n together.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":660907,"byte_end":660930,"line_start":236,"line_end":236,"column_start":5,"column_end":28},"name":"MissingRequiredArgument","qualname":"::errors::ErrorKind::MissingRequiredArgument","value":"ErrorKind::MissingRequiredArgument","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user does not provide one or more required arguments.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2105},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":661643,"byte_end":661660,"line_start":256,"line_end":256,"column_start":5,"column_end":22},"name":"MissingSubcommand","qualname":"::errors::ErrorKind::MissingSubcommand","value":"ErrorKind::MissingSubcommand","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\n but the user does not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2107},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":662589,"byte_end":662616,"line_start":277,"line_end":277,"column_start":5,"column_end":32},"name":"MissingArgumentOrSubcommand","qualname":"::errors::ErrorKind::MissingArgumentOrSubcommand","value":"ErrorKind::MissingArgumentOrSubcommand","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when either an argument or [`SubCommand`] is required, as defined by\n [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":663156,"byte_end":663179,"line_start":293,"line_end":293,"column_start":5,"column_end":28},"name":"UnexpectedMultipleUsage","qualname":"::errors::ErrorKind::UnexpectedMultipleUsage","value":"ErrorKind::UnexpectedMultipleUsage","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides multiple values to an argument which doesn't allow that.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2111},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":664276,"byte_end":664287,"line_start":321,"line_end":321,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::errors::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when the user provides a value containing invalid UTF-8 for an argument and\n [`AppSettings::StrictUtf8`] is set.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2113},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":664878,"byte_end":664891,"line_start":338,"line_end":338,"column_start":5,"column_end":18},"name":"HelpDisplayed","qualname":"::errors::ErrorKind::HelpDisplayed","value":"ErrorKind::HelpDisplayed","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--help` or similar was used.\n The help message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2115},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":665332,"byte_end":665348,"line_start":352,"line_end":352,"column_start":5,"column_end":21},"name":"VersionDisplayed","qualname":"::errors::ErrorKind::VersionDisplayed","value":"ErrorKind::VersionDisplayed","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Not a true \"error\" as it means `--version` or similar was used.\n The message will be sent to `stdout`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2117},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":665722,"byte_end":665738,"line_start":359,"line_end":359,"column_start":5,"column_end":21},"name":"ArgumentNotFound","qualname":"::errors::ErrorKind::ArgumentNotFound","value":"ErrorKind::ArgumentNotFound","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value\n into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument\n with name `config` to be converted, but `config` wasn't used by the user.\n [`value_t!`]: ./macro.value_t!.html\n [`values_t!`]: ./macro.values_t!.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2119},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":665940,"byte_end":665942,"line_start":364,"line_end":364,"column_start":5,"column_end":7},"name":"Io","qualname":"::errors::ErrorKind::Io","value":"ErrorKind::Io","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Represents an [I/O error].\n Can occur when writing to `stderr` or `stdout` or reading a configuration file.\n [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2121},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666238,"byte_end":666244,"line_start":371,"line_end":371,"column_start":5,"column_end":11},"name":"Format","qualname":"::errors::ErrorKind::Format","value":"ErrorKind::Format","parent":{"krate":0,"index":3754},"children":[],"decl_id":null,"docs":" Represents a [Format error] (which is a part of [`Display`]).\n Typically caused by writing to `stderr` or `stdout`.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3754},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":652801,"byte_end":652810,"line_start":22,"line_end":22,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::errors::ErrorKind","value":"ErrorKind::{InvalidValue, UnknownArgument, InvalidSubcommand, UnrecognizedSubcommand, EmptyValue, ValueValidation, TooManyValues, TooFewValues, WrongNumberOfValues, ArgumentConflict, MissingRequiredArgument, MissingSubcommand, MissingArgumentOrSubcommand, UnexpectedMultipleUsage, InvalidUtf8, HelpDisplayed, VersionDisplayed, ArgumentNotFound, Io, Format}","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2085},{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2091},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2097},{"krate":0,"index":2099},{"krate":0,"index":2101},{"krate":0,"index":2103},{"krate":0,"index":2105},{"krate":0,"index":2107},{"krate":0,"index":2109},{"krate":0,"index":2111},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121}],"decl_id":null,"docs":" Command line argument parser kind of error\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":652792,"byte_end":666247,"line_start":22,"line_end":372,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3770},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666316,"byte_end":666321,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"name":"Error","qualname":"::errors::Error","value":"Error { message, kind, info }","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2127}],"decl_id":null,"docs":" Command Line Argument Parser Error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2123},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666364,"byte_end":666371,"line_start":378,"line_end":378,"column_start":9,"column_end":16},"name":"message","qualname":"::errors::Error::message","value":"std::string::String","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" Formatted error message\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2125},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666415,"byte_end":666419,"line_start":380,"line_end":380,"column_start":9,"column_end":13},"name":"kind","qualname":"::errors::Error::kind","value":"errors::ErrorKind","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" The type of error\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2127},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666537,"byte_end":666541,"line_start":382,"line_end":382,"column_start":9,"column_end":13},"name":"info","qualname":"::errors::Error::info","value":"std::option::Option<std::vec::Vec<std::string::String>>","parent":{"krate":0,"index":3770},"children":[],"decl_id":null,"docs":" Any additional information passed along, such as the argument name that caused the error\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666648,"byte_end":666658,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"use_stderr","qualname":"<Error>::use_stderr","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should the message be written to `stdout` or not\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666898,"byte_end":666902,"line_start":395,"line_end":395,"column_start":12,"column_end":16},"name":"exit","qualname":"<Error>::exit","value":"fn (&self) -> !","parent":null,"children":[],"decl_id":null,"docs":" Prints the error to `stderr` and exits with a status of `1`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":667219,"byte_end":667227,"line_start":406,"line_end":406,"column_start":12,"column_end":20},"name":"write_to","qualname":"<Error>::write_to","value":"fn <W> (&self, w: &mut W) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":667339,"byte_end":667356,"line_start":409,"line_end":409,"column_start":12,"column_end":29},"name":"argument_conflict","qualname":"<Error>::argument_conflict","value":"fn <O, U> (arg: &AnyArg, other: Option<O>, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":668497,"byte_end":668508,"line_start":448,"line_end":448,"column_start":12,"column_end":23},"name":"empty_value","qualname":"<Error>::empty_value","value":"fn <U> (arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":669224,"byte_end":669237,"line_start":473,"line_end":473,"column_start":12,"column_end":25},"name":"invalid_value","qualname":"<Error>::invalid_value","value":"fn <B, G, U> (bad_val: B, good_vals: &[G], arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":670565,"byte_end":670583,"line_start":519,"line_end":519,"column_start":12,"column_end":30},"name":"invalid_subcommand","qualname":"<Error>::invalid_subcommand","value":"fn <S, D, N, U> (subcmd: S, did_you_mean: D, name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":671708,"byte_end":671731,"line_start":560,"line_end":560,"column_start":12,"column_end":35},"name":"unrecognized_subcommand","qualname":"<Error>::unrecognized_subcommand","value":"fn <S, N> (subcmd: S, name: N, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":672527,"byte_end":672552,"line_start":588,"line_end":588,"column_start":12,"column_end":37},"name":"missing_required_argument","qualname":"<Error>::missing_required_argument","value":"fn <R, U> (required: R, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":673234,"byte_end":673252,"line_start":613,"line_end":613,"column_start":12,"column_end":30},"name":"missing_subcommand","qualname":"<Error>::missing_subcommand","value":"fn <N, U> (name: N, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2224},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":673944,"byte_end":673956,"line_start":639,"line_end":639,"column_start":12,"column_end":24},"name":"invalid_utf8","qualname":"<Error>::invalid_utf8","value":"fn <U> (usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":674562,"byte_end":674577,"line_start":662,"line_end":662,"column_start":12,"column_end":27},"name":"too_many_values","qualname":"<Error>::too_many_values","value":"fn <V, U> (val: V, arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":675444,"byte_end":675458,"line_start":690,"line_end":690,"column_start":12,"column_end":26},"name":"too_few_values","qualname":"<Error>::too_few_values","value":"fn <U> (arg: &AnyArg, min_vals: u64, curr_vals: usize, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":676428,"byte_end":676444,"line_start":724,"line_end":724,"column_start":12,"column_end":28},"name":"value_validation","qualname":"<Error>::value_validation","value":"fn (arg: Option<&AnyArg>, err: String, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":677088,"byte_end":677109,"line_start":747,"line_end":747,"column_start":12,"column_end":33},"name":"value_validation_auto","qualname":"<Error>::value_validation_auto","value":"fn (err: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":677266,"byte_end":677288,"line_start":753,"line_end":753,"column_start":12,"column_end":34},"name":"wrong_number_of_values","qualname":"<Error>::wrong_number_of_values","value":"fn <S, U> (arg: &AnyArg, num_vals: u64, curr_vals: usize, suffix: S, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":678259,"byte_end":678284,"line_start":789,"line_end":789,"column_start":12,"column_end":37},"name":"unexpected_multiple_usage","qualname":"<Error>::unexpected_multiple_usage","value":"fn <U> (arg: &AnyArg, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":679037,"byte_end":679053,"line_start":814,"line_end":814,"column_start":12,"column_end":28},"name":"unknown_argument","qualname":"<Error>::unknown_argument","value":"fn <A, U> (arg: A, did_you_mean: &str, usage: U, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":680004,"byte_end":680012,"line_start":846,"line_end":846,"column_start":12,"column_end":20},"name":"io_error","qualname":"<Error>::io_error","value":"fn (e: &Error, color: ColorWhen) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":680363,"byte_end":680386,"line_start":859,"line_end":859,"column_start":12,"column_end":35},"name":"argument_not_found_auto","qualname":"<Error>::argument_not_found_auto","value":"fn <A> (arg: A) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681060,"byte_end":681076,"line_start":883,"line_end":883,"column_start":12,"column_end":28},"name":"with_description","qualname":"<Error>::with_description","value":"fn (description: &str, kind: ErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an error with a custom description.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2187},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724187,"byte_end":724191,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Bash","qualname":"::completions::shell::Shell::Bash","value":"Shell::Bash","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" Generates a .bash completion file for the Bourne Again SHell (BASH)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2189},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724281,"byte_end":724285,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Fish","qualname":"::completions::shell::Shell::Fish","value":"Shell::Fish","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" Generates a .fish completion file for the Friendly Interactive SHell (fish)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2191},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724349,"byte_end":724352,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Zsh","qualname":"::completions::shell::Shell::Zsh","value":"Shell::Zsh","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" Generates a completion file for the Z SHell (ZSH)\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2193},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724409,"byte_end":724419,"line_start":17,"line_end":17,"column_start":5,"column_end":15},"name":"PowerShell","qualname":"::completions::shell::Shell::PowerShell","value":"Shell::PowerShell","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" Generates a completion file for PowerShell\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2195},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724472,"byte_end":724478,"line_start":19,"line_end":19,"column_start":5,"column_end":11},"name":"Elvish","qualname":"::completions::shell::Shell::Elvish","value":"Shell::Elvish","parent":{"krate":0,"index":3792},"children":[],"decl_id":null,"docs":" Generates a completion file for Elvish\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3792},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724099,"byte_end":724104,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Shell","qualname":"::completions::shell::Shell","value":"Shell::{Bash, Fish, Zsh, PowerShell, Elvish}","parent":null,"children":[{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":2195}],"decl_id":null,"docs":" Describes which shell to produce a completions file for\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724090,"byte_end":724481,"line_start":9,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724566,"byte_end":724574,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"variants","qualname":"<Shell>::variants","value":"fn () -> [&'static str; 5]","parent":null,"children":[],"decl_id":null,"docs":" A list of possible variants in `&'static str` form\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134668,"byte_end":134676,"line_start":58,"line_end":58,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134790,"byte_end":134798,"line_start":63,"line_end":63,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":135033,"byte_end":135041,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3118}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170189,"byte_end":170200,"line_start":982,"line_end":982,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179903,"byte_end":179909,"line_start":76,"line_end":76,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":390},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261448,"byte_end":261455,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262592,"byte_end":262593,"line_start":40,"line_end":40,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262796,"byte_end":262797,"line_start":49,"line_end":49,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":263041,"byte_end":263044,"line_start":62,"line_end":62,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":263952,"byte_end":263956,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":267353,"byte_end":267357,"line_start":205,"line_end":205,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":281757,"byte_end":281761,"line_start":588,"line_end":588,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":292210,"byte_end":292214,"line_start":878,"line_end":878,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,118,97,108,105,100,97,116,111,114,46,114,115],"byte_start":298549,"byte_end":298558,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":656},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63804,"byte_end":63807,"line_start":68,"line_end":68,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130151,"byte_end":130154,"line_start":1783,"line_end":1783,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130258,"byte_end":130261,"line_start":1787,"line_end":1787,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":132379,"byte_end":132382,"line_start":1837,"line_end":1837,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":343005,"byte_end":343008,"line_start":54,"line_end":54,"column_start":14,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487658,"byte_end":487661,"line_start":3938,"line_end":3938,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487922,"byte_end":487925,"line_start":3950,"line_end":3950,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1160}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494188,"byte_end":494198,"line_start":67,"line_end":67,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494370,"byte_end":494380,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1328},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523757,"byte_end":523763,"line_start":794,"line_end":794,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523971,"byte_end":523977,"line_start":801,"line_end":801,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524091,"byte_end":524097,"line_start":805,"line_end":805,"column_start":32,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524158,"byte_end":524164,"line_start":808,"line_end":808,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525512,"byte_end":525520,"line_start":845,"line_end":845,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1390},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525732,"byte_end":525740,"line_start":852,"line_end":852,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525856,"byte_end":525864,"line_start":856,"line_end":856,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525925,"byte_end":525933,"line_start":859,"line_end":859,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527094,"byte_end":527101,"line_start":896,"line_end":896,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527305,"byte_end":527312,"line_start":903,"line_end":903,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527424,"byte_end":527431,"line_start":907,"line_end":907,"column_start":32,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527492,"byte_end":527499,"line_start":910,"line_end":910,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529321,"byte_end":529331,"line_start":17,"line_end":17,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529413,"byte_end":529423,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":537144,"byte_end":537154,"line_start":216,"line_end":216,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538195,"byte_end":538205,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539854,"byte_end":539865,"line_start":24,"line_end":24,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540065,"byte_end":540076,"line_start":33,"line_end":33,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540269,"byte_end":540280,"line_start":42,"line_end":42,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540515,"byte_end":540526,"line_start":51,"line_end":51,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1600}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540798,"byte_end":540809,"line_start":63,"line_end":63,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616},{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622},{"krate":0,"index":1624},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":543053,"byte_end":543064,"line_start":111,"line_end":111,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":543157,"byte_end":543168,"line_start":115,"line_end":115,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544824,"byte_end":544834,"line_start":27,"line_end":27,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547162,"byte_end":547172,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":548075,"byte_end":548085,"line_start":134,"line_end":134,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":1760},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":550270,"byte_end":550280,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":550377,"byte_end":550387,"line_start":181,"line_end":181,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552123,"byte_end":552133,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552332,"byte_end":552342,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552566,"byte_end":552576,"line_start":44,"line_end":44,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552891,"byte_end":552901,"line_start":55,"line_end":55,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554791,"byte_end":554801,"line_start":116,"line_end":116,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":1864},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1870},{"krate":0,"index":1872},{"krate":0,"index":1874},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1892},{"krate":0,"index":1894},{"krate":0,"index":1896},{"krate":0,"index":1898},{"krate":0,"index":1900},{"krate":0,"index":1902},{"krate":0,"index":1904},{"krate":0,"index":1906},{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":557393,"byte_end":557403,"line_start":173,"line_end":173,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":557496,"byte_end":557506,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1916}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559771,"byte_end":559775,"line_start":19,"line_end":19,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1930},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":560178,"byte_end":560182,"line_start":32,"line_end":32,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1940}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":560279,"byte_end":560283,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561144,"byte_end":561150,"line_start":28,"line_end":28,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561593,"byte_end":561599,"line_start":47,"line_end":47,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1966}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561853,"byte_end":561859,"line_start":57,"line_end":57,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562375,"byte_end":562383,"line_start":12,"line_end":12,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562631,"byte_end":562639,"line_start":24,"line_end":24,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1982}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562724,"byte_end":562732,"line_start":28,"line_end":28,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563229,"byte_end":563239,"line_start":12,"line_end":12,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1994}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563400,"byte_end":563410,"line_start":22,"line_end":22,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1998}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567763,"byte_end":567771,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2014},{"krate":0,"index":2016},{"krate":0,"index":2018},{"krate":0,"index":2020},{"krate":0,"index":2022},{"krate":0,"index":2024},{"krate":0,"index":2026},{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":580273,"byte_end":580281,"line_start":423,"line_end":423,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":580754,"byte_end":580762,"line_start":443,"line_end":443,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":585896,"byte_end":585904,"line_start":624,"line_end":624,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587254,"byte_end":587262,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2050},{"krate":0,"index":3694},{"krate":0,"index":3696},{"krate":0,"index":3698}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588270,"byte_end":588278,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590348,"byte_end":590359,"line_start":117,"line_end":117,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,117,115,97,103,101,95,112,97,114,115,101,114,46,114,115],"byte_start":595003,"byte_end":595014,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2074},{"krate":0,"index":2076},{"krate":0,"index":2078},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2090},{"krate":0,"index":2092}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":644062,"byte_end":644071,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2134},{"krate":0,"index":2136},{"krate":0,"index":2138},{"krate":0,"index":2140}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645214,"byte_end":645223,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645911,"byte_end":645917,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":646727,"byte_end":646733,"line_start":157,"line_end":157,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666572,"byte_end":666577,"line_start":385,"line_end":385,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2212},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2232},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2240},{"krate":0,"index":2242},{"krate":0,"index":2244}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681421,"byte_end":681426,"line_start":896,"line_end":896,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2248}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681502,"byte_end":681507,"line_start":900,"line_end":900,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2252}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681639,"byte_end":681644,"line_start":904,"line_end":904,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681774,"byte_end":681779,"line_start":908,"line_end":908,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2260}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":682897,"byte_end":682902,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2284},{"krate":0,"index":2286},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":684556,"byte_end":684563,"line_start":102,"line_end":102,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2298},{"krate":0,"index":2300}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,98,97,115,104,46,114,115],"byte_start":692164,"byte_end":692171,"line_start":16,"line_end":16,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,102,105,115,104,46,114,115],"byte_start":698442,"byte_end":698449,"line_start":14,"line_end":14,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2360},{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,122,115,104,46,114,115],"byte_start":702022,"byte_end":702028,"line_start":20,"line_end":20,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2394}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,112,111,119,101,114,115,104,101,108,108,46,114,115],"byte_start":715844,"byte_end":715857,"line_start":15,"line_end":15,"column_start":14,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2430},{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,101,108,118,105,115,104,46,114,115],"byte_start":720417,"byte_end":720426,"line_start":15,"line_end":15,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2452},{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724488,"byte_end":724493,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2472}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724670,"byte_end":724675,"line_start":27,"line_end":27,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2476},{"krate":0,"index":2478}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":725312,"byte_end":725317,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2482}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,109,111,100,46,114,115],"byte_start":685854,"byte_end":685862,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2506}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134668,"byte_end":134676,"line_start":58,"line_end":58,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":3096},"to":{"krate":2,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":134790,"byte_end":134798,"line_start":63,"line_end":63,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":3096},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":135033,"byte_end":135041,"line_start":73,"line_end":73,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":3096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":170189,"byte_end":170200,"line_start":982,"line_end":982,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":3120},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,112,97,114,115,101,114,46,114,115],"byte_start":179903,"byte_end":179909,"line_start":76,"line_end":76,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":3154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,101,116,97,46,114,115],"byte_start":261448,"byte_end":261455,"line_start":24,"line_end":24,"column_start":10,"column_end":17},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":3170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262521,"byte_end":262527,"line_start":39,"line_end":39,"column_start":31,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1184},"to":{"krate":0,"index":494}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262538,"byte_end":262545,"line_start":39,"line_end":39,"column_start":48,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":8150},"to":{"krate":0,"index":494}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262592,"byte_end":262593,"line_start":40,"line_end":40,"column_start":44,"column_end":45},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":223},"to":{"krate":0,"index":494}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262666,"byte_end":262680,"line_start":46,"line_end":46,"column_start":29,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":494},"to":{"krate":0,"index":498}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262691,"byte_end":262700,"line_start":46,"line_end":46,"column_start":54,"column_end":63},"kind":"SuperTrait","from":{"krate":0,"index":1240},"to":{"krate":0,"index":498}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":262796,"byte_end":262797,"line_start":49,"line_end":49,"column_start":42,"column_end":43},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":233},"to":{"krate":0,"index":498}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":263041,"byte_end":263044,"line_start":62,"line_end":62,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":760},"to":{"krate":0,"index":1240}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":263952,"byte_end":263956,"line_start":101,"line_end":101,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":267353,"byte_end":267357,"line_start":205,"line_end":205,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":281757,"byte_end":281761,"line_start":588,"line_end":588,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,104,101,108,112,46,114,115],"byte_start":292210,"byte_end":292214,"line_start":878,"line_end":878,"column_start":10,"column_end":14},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,118,97,108,105,100,97,116,111,114,46,114,115],"byte_start":298549,"byte_end":298558,"line_start":23,"line_end":23,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":63804,"byte_end":63807,"line_start":68,"line_end":68,"column_start":14,"column_end":17},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130151,"byte_end":130154,"line_start":1783,"line_end":1783,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":760},"to":{"krate":2,"index":2558}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":130258,"byte_end":130261,"line_start":1787,"line_end":1787,"column_start":33,"column_end":36},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":760},"to":{"krate":0,"index":1184}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,112,112,47,109,111,100,46,114,115],"byte_start":132379,"byte_end":132382,"line_start":1837,"line_end":1837,"column_start":31,"column_end":34},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":760},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":343005,"byte_end":343008,"line_start":54,"line_end":54,"column_start":14,"column_end":17},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":3198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487658,"byte_end":487661,"line_start":3938,"line_end":3938,"column_start":44,"column_end":47},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,46,114,115],"byte_start":487922,"byte_end":487925,"line_start":3950,"line_end":3950,"column_start":28,"column_end":31},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":3198},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,110,121,95,97,114,103,46,114,115],"byte_start":488247,"byte_end":488254,"line_start":12,"line_end":12,"column_start":36,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":8150},"to":{"krate":0,"index":1184}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494188,"byte_end":494198,"line_start":67,"line_end":67,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":3208},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":494370,"byte_end":494380,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":3208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523757,"byte_end":523763,"line_start":794,"line_end":794,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":523971,"byte_end":523977,"line_start":801,"line_end":801,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4344}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524091,"byte_end":524097,"line_start":805,"line_end":805,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":4362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":524158,"byte_end":524164,"line_start":808,"line_end":808,"column_start":22,"column_end":28},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":3218},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525512,"byte_end":525520,"line_start":845,"line_end":845,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525732,"byte_end":525740,"line_start":852,"line_end":852,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":4344}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525856,"byte_end":525864,"line_start":856,"line_end":856,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":4362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":525925,"byte_end":525933,"line_start":859,"line_end":859,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527094,"byte_end":527101,"line_start":896,"line_end":896,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527305,"byte_end":527312,"line_start":903,"line_end":903,"column_start":34,"column_end":41},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":4344}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527424,"byte_end":527431,"line_start":907,"line_end":907,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":4362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,115,46,114,115],"byte_start":527492,"byte_end":527499,"line_start":910,"line_end":910,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":3238},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529321,"byte_end":529331,"line_start":17,"line_end":17,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1458},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":529413,"byte_end":529423,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,109,97,116,99,104,101,114,46,114,115],"byte_start":537144,"byte_end":537154,"line_start":216,"line_end":216,"column_start":35,"column_end":45},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1458},"to":{"krate":2,"index":2610}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,117,98,99,111,109,109,97,110,100,46,114,115],"byte_start":538195,"byte_end":538205,"line_start":36,"line_end":36,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":3248},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":539854,"byte_end":539865,"line_start":24,"line_end":24,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":3258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540065,"byte_end":540076,"line_start":33,"line_end":33,"column_start":44,"column_end":55},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":3258},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540269,"byte_end":540280,"line_start":42,"line_end":42,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":3258},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540515,"byte_end":540526,"line_start":51,"line_end":51,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":3258},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":540798,"byte_end":540809,"line_start":63,"line_end":63,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":3258},"to":{"krate":0,"index":1184}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":543053,"byte_end":543064,"line_start":111,"line_end":111,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":3258},"to":{"krate":0,"index":1240}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,102,108,97,103,46,114,115],"byte_start":543157,"byte_end":543168,"line_start":115,"line_end":115,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":3258},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":544824,"byte_end":544834,"line_start":27,"line_end":27,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":3272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":547162,"byte_end":547172,"line_start":103,"line_end":103,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":3272},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":548075,"byte_end":548085,"line_start":134,"line_end":134,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":3272},"to":{"krate":0,"index":1184}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":550270,"byte_end":550280,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":3272},"to":{"krate":0,"index":1240}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,112,111,115,105,116,105,111,110,97,108,46,114,115],"byte_start":550377,"byte_end":550387,"line_start":181,"line_end":181,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":3272},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552123,"byte_end":552133,"line_start":25,"line_end":25,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":3282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552332,"byte_end":552342,"line_start":34,"line_end":34,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":3282},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552566,"byte_end":552576,"line_start":44,"line_end":44,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":3282},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":552891,"byte_end":552901,"line_start":55,"line_end":55,"column_start":26,"column_end":36},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":3282},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":554791,"byte_end":554801,"line_start":116,"line_end":116,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":3282},"to":{"krate":0,"index":1184}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":557393,"byte_end":557403,"line_start":173,"line_end":173,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":3282},"to":{"krate":0,"index":1240}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,111,112,116,105,111,110,46,114,115],"byte_start":557496,"byte_end":557506,"line_start":177,"line_end":177,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":3282},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":559771,"byte_end":559775,"line_start":19,"line_end":19,"column_start":14,"column_end":18},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":3292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":560178,"byte_end":560182,"line_start":32,"line_end":32,"column_start":44,"column_end":48},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":3292},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,98,97,115,101,46,114,115],"byte_start":560279,"byte_end":560283,"line_start":36,"line_end":36,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":3292},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561144,"byte_end":561150,"line_start":28,"line_end":28,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":3306},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561593,"byte_end":561599,"line_start":47,"line_end":47,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":3306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,118,97,108,117,101,100,46,114,115],"byte_start":561853,"byte_end":561859,"line_start":57,"line_end":57,"column_start":44,"column_end":50},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":3306},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562375,"byte_end":562383,"line_start":12,"line_end":12,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":3312},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562631,"byte_end":562639,"line_start":24,"line_end":24,"column_start":44,"column_end":52},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":3312},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,97,114,103,95,98,117,105,108,100,101,114,47,115,119,105,116,99,104,101,100,46,114,115],"byte_start":562724,"byte_end":562732,"line_start":28,"line_end":28,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":3312},"to":{"krate":2,"index":2558}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563229,"byte_end":563239,"line_start":12,"line_end":12,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":3318},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,109,97,116,99,104,101,100,95,97,114,103,46,114,115],"byte_start":563400,"byte_end":563410,"line_start":22,"line_end":22,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":3318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":567763,"byte_end":567771,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":3328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":580273,"byte_end":580281,"line_start":423,"line_end":423,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":3328},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":580754,"byte_end":580762,"line_start":443,"line_end":443,"column_start":41,"column_end":49},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":3328},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,103,114,111,117,112,46,114,115],"byte_start":585896,"byte_end":585904,"line_start":624,"line_end":624,"column_start":20,"column_end":28},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":3328},"to":{"krate":2,"index":2558}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":587254,"byte_end":587262,"line_start":35,"line_end":35,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":3682},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":588270,"byte_end":588278,"line_start":62,"line_end":62,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":3682},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,97,114,103,115,47,115,101,116,116,105,110,103,115,46,114,115],"byte_start":590348,"byte_end":590359,"line_start":117,"line_end":117,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":3700},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,117,115,97,103,101,95,112,97,114,115,101,114,46,114,115],"byte_start":595003,"byte_end":595014,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":3726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":644062,"byte_end":644071,"line_start":60,"line_end":60,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":2126},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645214,"byte_end":645223,"line_start":106,"line_end":106,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":2126},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":645911,"byte_end":645917,"line_start":131,"line_end":131,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":3748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,102,109,116,46,114,115],"byte_start":646727,"byte_end":646733,"line_start":157,"line_end":157,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":3748},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":666572,"byte_end":666577,"line_start":385,"line_end":385,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":3770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681421,"byte_end":681426,"line_start":896,"line_end":896,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":3770},"to":{"krate":1,"index":2464}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681502,"byte_end":681507,"line_start":900,"line_end":900,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":3770},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681639,"byte_end":681644,"line_start":904,"line_end":904,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":3770},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,101,114,114,111,114,115,46,114,115],"byte_start":681774,"byte_end":681779,"line_start":908,"line_end":908,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":3770},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":682897,"byte_end":682902,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":1,"index":2964},"to":{"krate":0,"index":2268}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,111,115,115,116,114,105,110,103,101,120,116,46,114,115],"byte_start":684556,"byte_end":684563,"line_start":102,"line_end":102,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":3782},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,98,97,115,104,46,114,115],"byte_start":692164,"byte_end":692171,"line_start":16,"line_end":16,"column_start":14,"column_end":21},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":2330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,102,105,115,104,46,114,115],"byte_start":698442,"byte_end":698449,"line_start":14,"line_end":14,"column_start":14,"column_end":21},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":2356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,122,115,104,46,114,115],"byte_start":702022,"byte_end":702028,"line_start":20,"line_end":20,"column_start":14,"column_end":20},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":2388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,112,111,119,101,114,115,104,101,108,108,46,114,115],"byte_start":715844,"byte_end":715857,"line_start":15,"line_end":15,"column_start":14,"column_end":27},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":2426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,101,108,118,105,115,104,46,114,115],"byte_start":720417,"byte_end":720426,"line_start":15,"line_end":15,"column_start":14,"column_end":23},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":2448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724488,"byte_end":724493,"line_start":22,"line_end":22,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":3792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":724670,"byte_end":724675,"line_start":27,"line_end":27,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":3792},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,115,104,101,108,108,46,114,115],"byte_start":725312,"byte_end":725317,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":3792},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,112,45,50,46,51,51,46,48,47,115,114,99,47,99,111,109,112,108,101,116,105,111,110,115,47,109,111,100,46,114,115],"byte_start":685854,"byte_end":685862,"line_start":29,"line_end":29,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":2500},"to":{"krate":4294967295,"index":4294967295}}]}