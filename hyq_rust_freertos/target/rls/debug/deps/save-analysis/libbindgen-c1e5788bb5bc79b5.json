{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51],"program":"/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bindgen","/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,link","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"env_logger\"","--cfg","feature=\"log\"","--cfg","feature=\"logging\"","-C","metadata=c1e5788bb5bc79b5","-C","extra-filename=-c1e5788bb5bc79b5","--out-dir","/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","-L","dependency=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps","--extern","bitflags=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libbitflags-9d9f9764ca8612fc.rlib","--extern","cexpr=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libcexpr-14887b1b2acfed8a.rlib","--extern","cfg_if=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libcfg_if-1e34a1283119a981.rlib","--extern","clang_sys=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libclang_sys-ca8b0c1ee85eb491.rlib","--extern","clap=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libclap-3bb111fd4b26ac92.rlib","--extern","env_logger=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libenv_logger-80b544aebccbf1bd.rlib","--extern","lazy_static=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/liblazy_static-afc97fc38871e70e.rlib","--extern","log=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/liblog-86bd3d03706a8200.rlib","--extern","peeking_take_while=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libpeeking_take_while-66bf12a048eedf7f.rlib","--extern","proc_macro2=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libproc_macro2-b36807b18e85e42b.rlib","--extern","quote=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libquote-193a9d3e1b491e71.rlib","--extern","regex=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libregex-f7bb2e039f23dd77.rlib","--extern","which=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/deps/libwhich-17ea55bddcd4f085.rlib","--cap-lints","allow","-L","native=/home/chivier_humber/Documents/rust_freertos/target/rls/debug/build/libloading-728a7050ec179524/out","--error-format=json","--sysroot","/home/chivier_humber/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,68,111,99,117,109,101,110,116,115,47,114,117,115,116,95,102,114,101,101,114,116,111,115,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,98,105,110,100,103,101,110,45,99,49,101,53,55,56,56,98,98,53,98,99,55,57,98,53,46,114,108,105,98]},"prelude":{"crate_id":{"name":"bindgen","disambiguator":[554576742021783011,5087858849612926510]},"crate_root":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src","external_crates":[{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[853209657226342047,8462664850197014382]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[772178867720458397,10513760593670507587]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17633954781163668134,3962627684191718065]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7858001605524721373,8369385247697161108]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5226771781757675641,11183407964508506038]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15950205559580256541,6605390554280573401]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[5066653915378193616,7813142097187859454]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1328488228804362593,9042026925657904388]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[3005442698276396085,7194037300925619286]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[11662190156692096384,12505544175813687064]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":11,"id":{"name":"bitflags","disambiguator":[9570611911524362371,5008813414111620232]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":12,"id":{"name":"cexpr","disambiguator":[18436556417494531110,13499228774913925998]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":13,"id":{"name":"nom","disambiguator":[6651701076830522421,15314490163102601693]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":14,"id":{"name":"memchr","disambiguator":[9723587169082035816,3186471158412437829]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[7254785409533232110,894595570201087474]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":16,"id":{"name":"clang_sys","disambiguator":[12179991980978832002,9700639233213823411]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":17,"id":{"name":"glob","disambiguator":[14294674805418740751,10317511523456041125]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":18,"id":{"name":"libc","disambiguator":[1234200285838522050,8387995073866950579]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":19,"id":{"name":"libloading","disambiguator":[11424132240712552399,14074273978976472582]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":20,"id":{"name":"lazy_static","disambiguator":[15801350822704459614,4097180402837103151]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":21,"id":{"name":"peeking_take_while","disambiguator":[2278629946794992541,2135755182248984959]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":22,"id":{"name":"quote","disambiguator":[10931514761239433719,2974585464183432167]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":23,"id":{"name":"proc_macro2","disambiguator":[9431295754217620961,16252717502079382081]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":24,"id":{"name":"unicode_xid","disambiguator":[17279623556149500147,1430523065215256891]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":25,"id":{"name":"regex","disambiguator":[3121846191363781624,13959975930081098921]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":26,"id":{"name":"aho_corasick","disambiguator":[17938507346005326963,11258557822246434063]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":27,"id":{"name":"thread_local","disambiguator":[7424374588709187203,5665548112374057161]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":28,"id":{"name":"regex_syntax","disambiguator":[11945441991304642027,3761445573165790579]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":29,"id":{"name":"ucd_util","disambiguator":[7301187628148880591,16532372926272107221]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":30,"id":{"name":"utf8_ranges","disambiguator":[8055381280599321016,9873661367589304214]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":31,"id":{"name":"which","disambiguator":[13514048046045097580,12553553386418764883]}},{"file_name":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","num":32,"id":{"name":"log","disambiguator":[12486691258534426211,14557119396942139678]}}],"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":67619,"line_start":1,"line_end":2091,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":5644},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":826796,"byte_end":826821,"line_start":3,"line_end":3,"column_start":23,"column_end":48},"alias_span":null,"name":"EnumVariantCustomBehavior","value":"","parent":{"krate":0,"index":4434}},{"kind":"Use","ref_id":{"krate":0,"index":5676},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":826823,"byte_end":826839,"line_start":3,"line_end":3,"column_start":50,"column_end":66},"alias_span":null,"name":"EnumVariantValue","value":"","parent":{"krate":0,"index":4434}},{"kind":"Use","ref_id":{"krate":0,"index":5772},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":826859,"byte_end":826866,"line_start":4,"line_end":4,"column_start":18,"column_end":25},"alias_span":null,"name":"IntKind","value":"","parent":{"krate":0,"index":4434}},{"kind":"Use","ref_id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2158,"byte_end":2176,"line_start":82,"line_end":82,"column_start":20,"column_end":38},"alias_span":null,"name":"LATEST_STABLE_RUST","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4914},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2178,"byte_end":2197,"line_start":82,"line_end":82,"column_start":40,"column_end":59},"alias_span":null,"name":"RUST_TARGET_STRINGS","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4886},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2199,"byte_end":2209,"line_start":82,"line_end":82,"column_start":61,"column_end":71},"alias_span":null,"name":"RustTarget","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4856},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2387,"byte_end":2400,"line_start":88,"line_end":88,"column_start":18,"column_end":31},"alias_span":null,"name":"EnumVariation","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":67619,"line_start":1,"line_end":2091,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":444},{"krate":0,"index":1250},{"krate":0,"index":1270},{"krate":0,"index":4352},{"krate":0,"index":4386},{"krate":0,"index":4406},{"krate":0,"index":4434},{"krate":0,"index":4462},{"krate":0,"index":4470},{"krate":0,"index":4472},{"krate":0,"index":4478},{"krate":0,"index":4480},{"krate":0,"index":4486},{"krate":0,"index":4488},{"krate":0,"index":4490},{"krate":0,"index":4492},{"krate":0,"index":4494},{"krate":0,"index":4500},{"krate":0,"index":4506},{"krate":0,"index":4508},{"krate":0,"index":4514},{"krate":0,"index":4520},{"krate":0,"index":4522},{"krate":0,"index":6112},{"krate":0,"index":6148},{"krate":0,"index":6142},{"krate":0,"index":6138},{"krate":0,"index":6134},{"krate":0,"index":6122},{"krate":0,"index":6118},{"krate":0,"index":6114},{"krate":0,"index":6150},{"krate":0,"index":6170},{"krate":0,"index":6174},{"krate":0,"index":6178},{"krate":0,"index":6182},{"krate":0,"index":6186},{"krate":0,"index":6242},{"krate":0,"index":6248},{"krate":0,"index":6252},{"krate":0,"index":6258},{"krate":0,"index":6262},{"krate":0,"index":6268},{"krate":0,"index":6272},{"krate":0,"index":6278},{"krate":0,"index":6282},{"krate":0,"index":6288},{"krate":0,"index":6292},{"krate":0,"index":4524},{"krate":0,"index":4538},{"krate":0,"index":6320},{"krate":0,"index":6326},{"krate":0,"index":6322},{"krate":0,"index":4542},{"krate":0,"index":4544},{"krate":0,"index":6330},{"krate":0,"index":6332},{"krate":0,"index":4686},{"krate":0,"index":4688},{"krate":0,"index":4696},{"krate":0,"index":4700},{"krate":0,"index":6356},{"krate":0,"index":6358},{"krate":0,"index":4702},{"krate":0,"index":4718},{"krate":0,"index":4720},{"krate":0,"index":4724},{"krate":0,"index":6362},{"krate":0,"index":6364},{"krate":0,"index":4730}],"decl_id":null,"docs":" Generate Rust bindings for C and C++ libraries.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":365,"byte_end":387,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"deny(warnings)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":388,"byte_end":406,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"deny(unused_extern_crates)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":407,"byte_end":437,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"allow(non_upper_case_globals)","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":525,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"recursion_limit = \"128\"","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":591,"byte_end":616,"line_start":17,"line_end":17,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":4732},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69039,"byte_end":69045,"line_start":21,"line_end":21,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::clang::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":1305}],"decl_id":null,"docs":" A cursor into the Clang AST, pointing to an AST node.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69028,"byte_end":69066,"line_start":21,"line_end":23,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69583,"byte_end":69586,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"usr","qualname":"<Cursor>::usr","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the Unified Symbol Resolution for this cursor's referent, if\n available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69808,"byte_end":69822,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"is_declaration","qualname":"<Cursor>::is_declaration","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a declaration?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69962,"byte_end":69970,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"spelling","qualname":"<Cursor>::spelling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get this cursor's referent's spelling.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70271,"byte_end":70283,"line_start":62,"line_end":62,"column_start":12,"column_end":24},"name":"display_name","qualname":"<Cursor>::display_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get this cursor's referent's display name.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70453,"byte_end":70461,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"mangling","qualname":"<Cursor>::mangling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get the mangled name of this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":70817,"byte_end":70830,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"cxx_manglings","qualname":"<Cursor>::cxx_manglings","value":"fn (&self) -> Result<Vec<String>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Gets the C++ manglings for this cursor, or an error if the function is\n not loaded or the manglings are not available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":71617,"byte_end":71627,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"is_builtin","qualname":"<Cursor>::is_builtin","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the cursor refers to a built-in definition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":72394,"byte_end":72408,"line_start":122,"line_end":122,"column_start":12,"column_end":26},"name":"lexical_parent","qualname":"<Cursor>::lexical_parent","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the `Cursor` for this cursor's referent's lexical parent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":72737,"byte_end":72761,"line_start":134,"line_end":134,"column_start":12,"column_end":36},"name":"fallible_semantic_parent","qualname":"<Cursor>::fallible_semantic_parent","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's semantic parent, if one is available.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73183,"byte_end":73198,"line_start":150,"line_end":150,"column_start":12,"column_end":27},"name":"semantic_parent","qualname":"<Cursor>::semantic_parent","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's semantic parent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":73573,"byte_end":73590,"line_start":160,"line_end":160,"column_start":12,"column_end":29},"name":"num_template_args","qualname":"<Cursor>::num_template_args","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Return the number of template arguments used by this cursor's referent,\n if the referent is either a template instantiation. Returns `None`\n otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":74881,"byte_end":74897,"line_start":194,"line_end":194,"column_start":12,"column_end":28},"name":"translation_unit","qualname":"<Cursor>::translation_unit","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to this referent's containing translation unit.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":75268,"byte_end":75279,"line_start":207,"line_end":207,"column_start":12,"column_end":23},"name":"is_toplevel","qualname":"<Cursor>::is_toplevel","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a top level construct?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76158,"byte_end":76174,"line_start":227,"line_end":227,"column_start":12,"column_end":28},"name":"is_template_like","qualname":"<Cursor>::is_template_like","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" There are a few kinds of types that we need to treat specially, mainly\n not tracking the type declaration but the location of the cursor, given\n clang doesn't expose a proper declaration for these types.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76480,"byte_end":76484,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"kind","qualname":"<Cursor>::kind","value":"fn (&self) -> CXCursorKind","parent":null,"children":[],"decl_id":null,"docs":" Get the kind of referent this cursor is pointing to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76599,"byte_end":76612,"line_start":242,"line_end":242,"column_start":12,"column_end":25},"name":"is_definition","qualname":"<Cursor>::is_definition","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is the cursor is a definition\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76756,"byte_end":76782,"line_start":247,"line_end":247,"column_start":12,"column_end":38},"name":"is_template_specialization","qualname":"<Cursor>::is_template_specialization","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a template specialization?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":76978,"byte_end":77007,"line_start":253,"line_end":253,"column_start":12,"column_end":41},"name":"is_fully_specialized_template","qualname":"<Cursor>::is_fully_specialized_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a fully specialized template specialization without any\n remaining free template arguments?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77324,"byte_end":77360,"line_start":261,"line_end":261,"column_start":12,"column_end":48},"name":"is_in_non_fully_specialized_template","qualname":"<Cursor>::is_in_non_fully_specialized_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent a template specialization that still has remaining free\n template arguments?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77787,"byte_end":77795,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<Cursor>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing a valid referent?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":77934,"byte_end":77942,"line_start":284,"line_end":284,"column_start":12,"column_end":20},"name":"location","qualname":"<Cursor>::location","value":"fn (&self) -> SourceLocation","parent":null,"children":[],"decl_id":null,"docs":" Get the source location for the referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78166,"byte_end":78172,"line_start":293,"line_end":293,"column_start":12,"column_end":18},"name":"extent","qualname":"<Cursor>::extent","value":"fn (&self) -> CXSourceRange","parent":null,"children":[],"decl_id":null,"docs":" Get the source location range for the referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78340,"byte_end":78351,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"raw_comment","qualname":"<Cursor>::raw_comment","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the raw declaration comment for this referent, if one exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78599,"byte_end":78606,"line_start":306,"line_end":306,"column_start":12,"column_end":19},"name":"comment","qualname":"<Cursor>::comment","value":"fn (&self) -> Comment","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's parsed comment.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":78799,"byte_end":78807,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"cur_type","qualname":"<Cursor>::cur_type","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the referent's type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":79140,"byte_end":79150,"line_start":326,"line_end":326,"column_start":12,"column_end":22},"name":"definition","qualname":"<Cursor>::definition","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a reference to another type, or is\n a declaration, get the cursor pointing to the referenced type or type of\n the declared thing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":79593,"byte_end":79603,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"referenced","qualname":"<Cursor>::referenced","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is reference type, get the cursor\n pointing to the referenced type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80073,"byte_end":80082,"line_start":357,"line_end":357,"column_start":12,"column_end":21},"name":"canonical","qualname":"<Cursor>::canonical","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical cursor for this referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80430,"byte_end":80441,"line_start":368,"line_end":368,"column_start":12,"column_end":23},"name":"specialized","qualname":"<Cursor>::specialized","value":"fn (&self) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor points to either a template specialization or a\n template instantiation, get a cursor pointing to the template definition\n that is being specialized.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":80833,"byte_end":80846,"line_start":379,"line_end":379,"column_start":12,"column_end":25},"name":"template_kind","qualname":"<Cursor>::template_kind","value":"fn (&self) -> CXCursorKind","parent":null,"children":[],"decl_id":null,"docs":" Assuming that this cursor's referent is a template declaration, get the\n kind of cursor that would be generated for its specializations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81071,"byte_end":81076,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"name":"visit","qualname":"<Cursor>::visit","value":"fn <Visitor> (&self, mut visitor: Visitor) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Traverse this cursor's referent and its children.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81465,"byte_end":81481,"line_start":400,"line_end":400,"column_start":12,"column_end":28},"name":"collect_children","qualname":"<Cursor>::collect_children","value":"fn (&self) -> Vec<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Collect all of this cursor's children into a vec and return them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81721,"byte_end":81733,"line_start":410,"line_end":410,"column_start":12,"column_end":24},"name":"has_children","qualname":"<Cursor>::has_children","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this cursor have any children?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":81982,"byte_end":82007,"line_start":420,"line_end":420,"column_start":12,"column_end":37},"name":"has_at_least_num_children","qualname":"<Cursor>::has_at_least_num_children","value":"fn (&self, n: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this cursor have at least `n` children?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82498,"byte_end":82513,"line_start":437,"line_end":437,"column_start":12,"column_end":27},"name":"contains_cursor","qualname":"<Cursor>::contains_cursor","value":"fn (&self, kind: CXCursorKind) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the given location contains a cursor with the given\n kind in the first level of nesting underneath (doesn't look\n recursively).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":82826,"byte_end":82845,"line_start":451,"line_end":451,"column_start":12,"column_end":31},"name":"is_inlined_function","qualname":"<Cursor>::is_inlined_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the referent an inlined function?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83116,"byte_end":83125,"line_start":458,"line_end":458,"column_start":12,"column_end":21},"name":"bit_width","qualname":"<Cursor>::bit_width","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Get the width of this cursor's referent bit field, or `None` if the\n referent is not a bit field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83406,"byte_end":83415,"line_start":467,"line_end":467,"column_start":12,"column_end":21},"name":"enum_type","qualname":"<Cursor>::enum_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Get the integer representation type used to hold this cursor's referent\n enum type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":83796,"byte_end":83811,"line_start":479,"line_end":479,"column_start":12,"column_end":27},"name":"enum_val_signed","qualname":"<Cursor>::enum_val_signed","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Get the signed constant value for this cursor's enum variant referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84222,"byte_end":84239,"line_start":492,"line_end":492,"column_start":12,"column_end":29},"name":"enum_val_unsigned","qualname":"<Cursor>::enum_val_unsigned","value":"fn (&self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Get the unsigned constant value for this cursor's enum variant referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84603,"byte_end":84615,"line_start":504,"line_end":504,"column_start":12,"column_end":24},"name":"typedef_type","qualname":"<Cursor>::typedef_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a `typedef`, get the `Type` that is\n being aliased.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":84945,"byte_end":84952,"line_start":515,"line_end":515,"column_start":12,"column_end":19},"name":"linkage","qualname":"<Cursor>::linkage","value":"fn (&self) -> CXLinkageKind","parent":null,"children":[],"decl_id":null,"docs":" Get the linkage kind for this cursor's referent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85101,"byte_end":85111,"line_start":520,"line_end":520,"column_start":12,"column_end":22},"name":"visibility","qualname":"<Cursor>::visibility","value":"fn (&self) -> CXVisibilityKind","parent":null,"children":[],"decl_id":null,"docs":" Get the visibility of this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":85427,"byte_end":85431,"line_start":530,"line_end":530,"column_start":12,"column_end":16},"name":"args","qualname":"<Cursor>::args","value":"fn (&self) -> Option<Vec<Cursor>>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a function, return cursors to its\n parameters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86335,"byte_end":86343,"line_start":558,"line_end":558,"column_start":12,"column_end":20},"name":"num_args","qualname":"<Cursor>::num_args","value":"fn (&self) -> Result<u32, ()>","parent":null,"children":[],"decl_id":null,"docs":" Given that this cursor's referent is a function/method call or\n declaration, return the number of arguments it takes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86593,"byte_end":86609,"line_start":566,"line_end":566,"column_start":12,"column_end":28},"name":"access_specifier","qualname":"<Cursor>::access_specifier","value":"fn (&self) -> CX_CXXAccessSpecifier","parent":null,"children":[],"decl_id":null,"docs":" Get the access specifier for this cursor's referent.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":86808,"byte_end":86824,"line_start":572,"line_end":572,"column_start":12,"column_end":28},"name":"is_mutable_field","qualname":"<Cursor>::is_mutable_field","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a field declaration that is marked as\n `mutable`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87033,"byte_end":87048,"line_start":578,"line_end":578,"column_start":12,"column_end":27},"name":"offset_of_field","qualname":"<Cursor>::offset_of_field","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of the field represented by the Cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87505,"byte_end":87521,"line_start":593,"line_end":593,"column_start":12,"column_end":28},"name":"method_is_static","qualname":"<Cursor>::method_is_static","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is declared `static`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87692,"byte_end":87707,"line_start":598,"line_end":598,"column_start":12,"column_end":27},"name":"method_is_const","qualname":"<Cursor>::method_is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is declared `const`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":87868,"byte_end":87885,"line_start":603,"line_end":603,"column_start":12,"column_end":29},"name":"method_is_virtual","qualname":"<Cursor>::method_is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is virtual?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88053,"byte_end":88075,"line_start":608,"line_end":608,"column_start":12,"column_end":34},"name":"method_is_pure_virtual","qualname":"<Cursor>::method_is_pure_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a member function that is pure virtual?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88247,"byte_end":88262,"line_start":613,"line_end":613,"column_start":12,"column_end":27},"name":"is_virtual_base","qualname":"<Cursor>::is_virtual_base","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor's referent a struct or class with virtual members?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88387,"byte_end":88395,"line_start":618,"line_end":618,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Cursor>::evaluate","value":"fn (&self) -> Option<EvalResult>","parent":null,"children":[],"decl_id":null,"docs":" Try to evaluate this cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88523,"byte_end":88531,"line_start":623,"line_end":623,"column_start":12,"column_end":20},"name":"ret_type","qualname":"<Cursor>::ret_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Return the result type for this cursor\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":88779,"byte_end":88785,"line_start":631,"line_end":631,"column_start":12,"column_end":18},"name":"tokens","qualname":"<Cursor>::tokens","value":"fn (&self) -> Option<Vec<Token>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the tokens that correspond to that cursor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":89847,"byte_end":89859,"line_start":661,"line_end":661,"column_start":12,"column_end":24},"name":"cexpr_tokens","qualname":"<Cursor>::cexpr_tokens","value":"fn (self) -> Option<Vec<cexpr::token::Token>>","parent":null,"children":[],"decl_id":null,"docs":" Gets the tokens that correspond to that cursor as  `cexpr` tokens.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4740},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92123,"byte_end":92127,"line_start":736,"line_end":736,"column_start":12,"column_end":16},"name":"Type","qualname":"::clang::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":1307}],"decl_id":null,"docs":" The type of a node in clang's AST.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92112,"byte_end":92146,"line_start":736,"line_end":738,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1309},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92871,"byte_end":92878,"line_start":766,"line_end":766,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::clang::LayoutError::Invalid","value":"LayoutError::Invalid","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" Asked for the layout of an invalid type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1311},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92936,"byte_end":92946,"line_start":768,"line_end":768,"column_start":5,"column_end":15},"name":"Incomplete","qualname":"::clang::LayoutError::Incomplete","value":"LayoutError::Incomplete","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" Asked for the layout of an incomplete type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93002,"byte_end":93011,"line_start":770,"line_end":770,"column_start":5,"column_end":14},"name":"Dependent","qualname":"::clang::LayoutError::Dependent","value":"LayoutError::Dependent","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" Asked for the layout of a dependent type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1315},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93090,"byte_end":93105,"line_start":772,"line_end":772,"column_start":5,"column_end":20},"name":"NotConstantSize","qualname":"::clang::LayoutError::NotConstantSize","value":"LayoutError::NotConstantSize","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" Asked for the layout of a type that does not have constant size.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1317},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93202,"byte_end":93218,"line_start":775,"line_end":775,"column_start":5,"column_end":21},"name":"InvalidFieldName","qualname":"::clang::LayoutError::InvalidFieldName","value":"LayoutError::InvalidFieldName","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" Asked for the layout of a field in a type that does not have such a\n field.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93257,"byte_end":93264,"line_start":777,"line_end":777,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::clang::LayoutError::Unknown","value":"LayoutError::Unknown","parent":{"krate":0,"index":4748},"children":[],"decl_id":null,"docs":" An unknown layout error.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4748},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92804,"byte_end":92815,"line_start":764,"line_end":764,"column_start":10,"column_end":21},"name":"LayoutError","qualname":"::clang::LayoutError","value":"LayoutError::{Invalid, Incomplete, Dependent, NotConstantSize, InvalidFieldName, Unknown}","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1315},{"krate":0,"index":1317},{"krate":0,"index":1319}],"decl_id":null,"docs":" An error about the layout of a struct, class, or type.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92795,"byte_end":93267,"line_start":764,"line_end":778,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92795,"byte_end":93267,"line_start":764,"line_end":778,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93797,"byte_end":93801,"line_start":797,"line_end":797,"column_start":12,"column_end":16},"name":"kind","qualname":"<Type>::kind","value":"fn (&self) -> CXTypeKind","parent":null,"children":[],"decl_id":null,"docs":" Get this type's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93921,"byte_end":93932,"line_start":802,"line_end":802,"column_start":12,"column_end":23},"name":"declaration","qualname":"<Type>::declaration","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to this type's declaration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":94157,"byte_end":94178,"line_start":811,"line_end":811,"column_start":12,"column_end":33},"name":"canonical_declaration","qualname":"<Type>::canonical_declaration","value":"fn (&self, location: Option<&Cursor>) -> Option<CanonicalTypeDeclaration>","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical declaration of this type, if it is available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":95013,"byte_end":95021,"line_start":837,"line_end":837,"column_start":12,"column_end":20},"name":"spelling","qualname":"<Type>::spelling","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get a raw display name for this type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":95493,"byte_end":95501,"line_start":851,"line_end":851,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Type>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type const qualified?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":95695,"byte_end":95699,"line_start":857,"line_end":857,"column_start":12,"column_end":16},"name":"size","qualname":"<Type>::size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" What is the size of this type? Paper over invalid types by returning `0`\n for them.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":95905,"byte_end":95918,"line_start":865,"line_end":865,"column_start":12,"column_end":25},"name":"fallible_size","qualname":"<Type>::fallible_size","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" What is the size of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":96254,"byte_end":96259,"line_start":876,"line_end":876,"column_start":12,"column_end":17},"name":"align","qualname":"<Type>::align","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" What is the alignment of this type? Paper over invalid types by\n returning `0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":96471,"byte_end":96485,"line_start":884,"line_end":884,"column_start":12,"column_end":26},"name":"fallible_align","qualname":"<Type>::fallible_align","value":"fn (&self) -> Result<usize, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" What is the alignment of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":96873,"byte_end":96888,"line_start":897,"line_end":897,"column_start":12,"column_end":27},"name":"fallible_layout","qualname":"<Type>::fallible_layout","value":"fn (&self) -> Result<::ir::layout::Layout, LayoutError>","parent":null,"children":[],"decl_id":null,"docs":" Get the layout for this type, or an error describing why it does not\n have a valid layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":97230,"byte_end":97247,"line_start":906,"line_end":906,"column_start":12,"column_end":29},"name":"num_template_args","qualname":"<Type>::num_template_args","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Get the number of template arguments this type has, or `None` if it is\n not some kind of template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":97926,"byte_end":97939,"line_start":925,"line_end":925,"column_start":12,"column_end":25},"name":"template_args","qualname":"<Type>::template_args","value":"fn (&self) -> Option<TypeTemplateArgIterator>","parent":null,"children":[],"decl_id":null,"docs":" If this type is a class template specialization, return its\n template arguments. Otherwise, return None.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":98279,"byte_end":98291,"line_start":937,"line_end":937,"column_start":12,"column_end":24},"name":"pointee_type","qualname":"<Type>::pointee_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a pointer type, return the type that it points\n to.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":98921,"byte_end":98930,"line_start":957,"line_end":957,"column_start":12,"column_end":21},"name":"elem_type","qualname":"<Type>::elem_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is an array, vector, or complex type, return the\n type of its elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":99283,"byte_end":99295,"line_start":970,"line_end":970,"column_start":12,"column_end":24},"name":"num_elements","qualname":"<Type>::num_elements","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is an array or vector type, return its number of\n elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":99687,"byte_end":99701,"line_start":981,"line_end":981,"column_start":12,"column_end":26},"name":"canonical_type","qualname":"<Type>::canonical_type","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical version of this type. This sees through `typedef`s and\n aliases to get the underlying, canonical type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":99895,"byte_end":99906,"line_start":990,"line_end":990,"column_start":12,"column_end":23},"name":"is_variadic","qualname":"<Type>::is_variadic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type a variadic function type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100094,"byte_end":100102,"line_start":996,"line_end":996,"column_start":12,"column_end":20},"name":"ret_type","qualname":"<Type>::ret_type","value":"fn (&self) -> Option<Type>","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a function type, get the type of its return\n value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100442,"byte_end":100451,"line_start":1005,"line_end":1005,"column_start":12,"column_end":21},"name":"call_conv","qualname":"<Type>::call_conv","value":"fn (&self) -> CXCallingConv","parent":null,"children":[],"decl_id":null,"docs":" Given that this type is a function type, get its calling convention. If\n this is not a function type, `CXCallingConv_Invalid` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":100709,"byte_end":100714,"line_start":1011,"line_end":1011,"column_start":12,"column_end":17},"name":"named","qualname":"<Type>::named","value":"fn (&self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" For elaborated types (types which use `class`, `struct`, or `union` to\n disambiguate types from local bindings), get the underlying type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":101024,"byte_end":101032,"line_start":1024,"line_end":1024,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<Type>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a valid type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":101148,"byte_end":101168,"line_start":1029,"line_end":1029,"column_start":12,"column_end":32},"name":"is_valid_and_exposed","qualname":"<Type>::is_valid_and_exposed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a valid and exposed type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":101315,"byte_end":101345,"line_start":1034,"line_end":1034,"column_start":12,"column_end":42},"name":"is_fully_instantiated_template","qualname":"<Type>::is_fully_instantiated_template","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type a fully instantiated template?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":102127,"byte_end":102145,"line_start":1056,"line_end":1056,"column_start":12,"column_end":30},"name":"is_associated_type","qualname":"<Type>::is_associated_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type an associated template type? Eg `T::Associated` in\n this example:","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4792},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103100,"byte_end":103124,"line_start":1078,"line_end":1078,"column_start":12,"column_end":36},"name":"CanonicalTypeDeclaration","qualname":"::clang::CanonicalTypeDeclaration","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `CanonicalTypeDeclaration` type exists as proof-by-construction that its\n cursor is the canonical declaration for its type. If you have a\n `CanonicalTypeDeclaration` instance, you know for sure that the type and\n cursor match up in a canonical declaration relationship, and it simply\n cannot be otherwise.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103089,"byte_end":103139,"line_start":1078,"line_end":1078,"column_start":1,"column_end":51}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103089,"byte_end":103139,"line_start":1078,"line_end":1078,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103206,"byte_end":103208,"line_start":1082,"line_end":1082,"column_start":12,"column_end":14},"name":"ty","qualname":"<CanonicalTypeDeclaration>::ty","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get the type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103314,"byte_end":103320,"line_start":1087,"line_end":1087,"column_start":12,"column_end":18},"name":"cursor","qualname":"<CanonicalTypeDeclaration>::cursor","value":"fn (&self) -> &Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get the type's canonical declaration cursor.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103426,"byte_end":103449,"line_start":1093,"line_end":1093,"column_start":12,"column_end":35},"name":"TypeTemplateArgIterator","qualname":"::clang::TypeTemplateArgIterator","value":"TypeTemplateArgIterator {  }","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57}],"decl_id":null,"docs":" An iterator for a type's template arguments.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104183,"byte_end":104197,"line_start":1123,"line_end":1123,"column_start":12,"column_end":26},"name":"SourceLocation","qualname":"::clang::SourceLocation","value":"SourceLocation {  }","parent":null,"children":[{"krate":0,"index":59}],"decl_id":null,"docs":" A `SourceLocation` is a file, line, column, and byte offset location for\n some source text.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104351,"byte_end":104359,"line_start":1130,"line_end":1130,"column_start":12,"column_end":20},"name":"location","qualname":"<SourceLocation>::location","value":"fn (&self) -> (File, usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the (file, line, column, byte offset) tuple for this source\n location.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105378,"byte_end":105385,"line_start":1169,"line_end":1169,"column_start":12,"column_end":19},"name":"Comment","qualname":"::clang::Comment","value":"Comment {  }","parent":null,"children":[{"krate":0,"index":61}],"decl_id":null,"docs":" A comment in the source text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105473,"byte_end":105477,"line_start":1175,"line_end":1175,"column_start":12,"column_end":16},"name":"kind","qualname":"<Comment>::kind","value":"fn (&self) -> CXCommentKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of comment is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105615,"byte_end":105627,"line_start":1180,"line_end":1180,"column_start":12,"column_end":24},"name":"get_children","qualname":"<Comment>::get_children","value":"fn (&self) -> CommentChildrenIterator","parent":null,"children":[],"decl_id":null,"docs":" Get this comment's children comment\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105939,"byte_end":105951,"line_start":1190,"line_end":1190,"column_start":12,"column_end":24},"name":"get_tag_name","qualname":"<Comment>::get_tag_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Given that this comment is the start or end of an HTML tag, get its tag\n name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":106144,"byte_end":106157,"line_start":1195,"line_end":1195,"column_start":12,"column_end":25},"name":"get_tag_attrs","qualname":"<Comment>::get_tag_attrs","value":"fn (&self) -> CommentAttributesIterator","parent":null,"children":[],"decl_id":null,"docs":" Given that this comment is an HTML start tag, get its attributes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":106419,"byte_end":106442,"line_start":1205,"line_end":1205,"column_start":12,"column_end":35},"name":"CommentChildrenIterator","qualname":"::clang::CommentChildrenIterator","value":"CommentChildrenIterator {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67}],"decl_id":null,"docs":" An iterator for a comment's children\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":106942,"byte_end":106958,"line_start":1227,"line_end":1227,"column_start":12,"column_end":28},"name":"CommentAttribute","qualname":"::clang::CommentAttribute","value":"CommentAttribute { name, value }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" An HTML start tag comment attribute\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":69},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107007,"byte_end":107011,"line_start":1229,"line_end":1229,"column_start":9,"column_end":13},"name":"name","qualname":"::clang::CommentAttribute::name","value":"std::string::String","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":" HTML start tag attribute name\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":71},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107068,"byte_end":107073,"line_start":1231,"line_end":1231,"column_start":9,"column_end":14},"name":"value","qualname":"::clang::CommentAttribute::value","value":"std::string::String","parent":{"krate":0,"index":334},"children":[],"decl_id":null,"docs":" HTML start tag attribute value\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107140,"byte_end":107165,"line_start":1235,"line_end":1235,"column_start":12,"column_end":37},"name":"CommentAttributesIterator","qualname":"::clang::CommentAttributesIterator","value":"CommentAttributesIterator {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77}],"decl_id":null,"docs":" An iterator for a comment's attributes\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107964,"byte_end":107968,"line_start":1266,"line_end":1266,"column_start":12,"column_end":16},"name":"File","qualname":"::clang::File","value":"File {  }","parent":null,"children":[{"krate":0,"index":79}],"decl_id":null,"docs":" A source file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":108054,"byte_end":108058,"line_start":1272,"line_end":1272,"column_start":12,"column_end":16},"name":"name","qualname":"<File>::name","value":"fn (&self) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of this source file.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":108753,"byte_end":108758,"line_start":1296,"line_end":1296,"column_start":12,"column_end":17},"name":"Index","qualname":"::clang::Index","value":"Index {  }","parent":null,"children":[{"krate":0,"index":81}],"decl_id":null,"docs":" An `Index` is an environment for a set of translation units that will\n typically end up linked together in one final binary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109085,"byte_end":109088,"line_start":1307,"line_end":1307,"column_start":12,"column_end":15},"name":"new","qualname":"<Index>::new","value":"fn (pch: bool, diag: bool) -> Index","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Index`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4814},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109582,"byte_end":109587,"line_start":1332,"line_end":1332,"column_start":12,"column_end":17},"name":"Token","qualname":"::clang::Token","value":"Token { kind, spelling }","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1333}],"decl_id":null,"docs":" A token emitted by clang's lexer.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1331},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109633,"byte_end":109637,"line_start":1334,"line_end":1334,"column_start":9,"column_end":13},"name":"kind","qualname":"::clang::Token::kind","value":"i32","parent":{"krate":0,"index":4814},"children":[],"decl_id":null,"docs":" The kind of token this is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1333},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109699,"byte_end":109707,"line_start":1336,"line_end":1336,"column_start":9,"column_end":17},"name":"spelling","qualname":"::clang::Token::spelling","value":"std::string::String","parent":{"krate":0,"index":4814},"children":[],"decl_id":null,"docs":" A display name for this token.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109779,"byte_end":109794,"line_start":1340,"line_end":1340,"column_start":12,"column_end":27},"name":"TranslationUnit","qualname":"::clang::TranslationUnit","value":"TranslationUnit {  }","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" A translation unit (or \"compilation unit\").\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":110066,"byte_end":110071,"line_start":1352,"line_end":1352,"column_start":12,"column_end":17},"name":"parse","qualname":"<TranslationUnit>::parse","value":"fn (ix: &Index, file: &str, cmd_args: &[String], unsaved: &[UnsavedFile], opts: CXTranslationUnit_Flags) -> Option<TranslationUnit>","parent":null,"children":[],"decl_id":null,"docs":" Parse a source file into a translation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":111215,"byte_end":111220,"line_start":1390,"line_end":1390,"column_start":12,"column_end":17},"name":"diags","qualname":"<TranslationUnit>::diags","value":"fn (&self) -> Vec<Diagnostic>","parent":null,"children":[],"decl_id":null,"docs":" Get the Clang diagnostic information associated with this translation\n unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":111655,"byte_end":111661,"line_start":1404,"line_end":1404,"column_start":12,"column_end":18},"name":"cursor","qualname":"<TranslationUnit>::cursor","value":"fn (&self) -> Cursor","parent":null,"children":[],"decl_id":null,"docs":" Get a cursor pointing to the root of this translation unit's AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":111863,"byte_end":111870,"line_start":1413,"line_end":1413,"column_start":12,"column_end":19},"name":"is_null","qualname":"<TranslationUnit>::is_null","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this the null translation unit?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112146,"byte_end":112156,"line_start":1428,"line_end":1428,"column_start":12,"column_end":22},"name":"Diagnostic","qualname":"::clang::Diagnostic","value":"Diagnostic {  }","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" A diagnostic message generated while parsing a translation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112306,"byte_end":112312,"line_start":1435,"line_end":1435,"column_start":12,"column_end":18},"name":"format","qualname":"<Diagnostic>::format","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Format this diagnostic message as a string, using the given option bit\n flags.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112569,"byte_end":112577,"line_start":1443,"line_end":1443,"column_start":12,"column_end":20},"name":"severity","qualname":"<Diagnostic>::severity","value":"fn (&self) -> CXDiagnosticSeverity","parent":null,"children":[],"decl_id":null,"docs":" What is the severity of this diagnostic message?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112905,"byte_end":112916,"line_start":1458,"line_end":1458,"column_start":12,"column_end":23},"name":"UnsavedFile","qualname":"::clang::UnsavedFile","value":"UnsavedFile { name }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97}],"decl_id":null,"docs":" A file which has not been saved to disk.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":95},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113060,"byte_end":113064,"line_start":1462,"line_end":1462,"column_start":9,"column_end":13},"name":"name","qualname":"::clang::UnsavedFile::name","value":"std::ffi::CString","parent":{"krate":0,"index":400},"children":[],"decl_id":null,"docs":" The name of the unsaved file. Kept here to avoid leaving dangling pointers in\n `CXUnsavedFile`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113206,"byte_end":113209,"line_start":1468,"line_end":1468,"column_start":12,"column_end":15},"name":"new","qualname":"<UnsavedFile>::new","value":"fn (name: &str, contents: &str) -> UnsavedFile","parent":null,"children":[],"decl_id":null,"docs":" Construct a new unsaved file with the given `name` and `contents`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4820},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":121197,"byte_end":121207,"line_start":1738,"line_end":1738,"column_start":12,"column_end":22},"name":"EvalResult","qualname":"::clang::EvalResult","value":"EvalResult {  }","parent":null,"children":[{"krate":0,"index":1335}],"decl_id":null,"docs":" A wrapper for the result of evaluating an expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":121312,"byte_end":121315,"line_start":1744,"line_end":1744,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalResult>::new","value":"fn (cursor: Cursor) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate `cursor` and return the result.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":122638,"byte_end":122647,"line_start":1780,"line_end":1780,"column_start":12,"column_end":21},"name":"as_double","qualname":"<EvalResult>::as_double","value":"fn (&self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" Try to get back the result as a double.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":122922,"byte_end":122928,"line_start":1790,"line_end":1790,"column_start":12,"column_end":18},"name":"as_int","qualname":"<EvalResult>::as_int","value":"fn (&self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to get back the result as an integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":123986,"byte_end":124003,"line_start":1822,"line_end":1822,"column_start":12,"column_end":29},"name":"as_literal_string","qualname":"<EvalResult>::as_literal_string","value":"fn (&self) -> Option<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the expression as a literal string, that may or may not be\n valid utf-8.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":257619,"byte_end":257624,"line_start":58,"line_end":58,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::impl_debug::ImplDebug::Extra","value":"type Extra;","parent":{"krate":0,"index":484},"children":[],"decl_id":null,"docs":" Any extra parameter required by this a particular `ImplDebug` implementation.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":918},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":134513,"byte_end":134518,"line_start":325,"line_end":325,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::CodeGenerator::Extra","value":"type Extra;","parent":{"krate":0,"index":916},"children":[],"decl_id":null,"docs":" Extra information from the caller.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":978},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":155959,"byte_end":155964,"line_start":944,"line_end":944,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::FieldCodegen::Extra","value":"type Extra;","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196414,"byte_end":196418,"line_start":2164,"line_end":2164,"column_start":5,"column_end":9},"name":"Rust","qualname":"::codegen::EnumVariation::Rust","value":"EnumVariation::Rust","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The code for this enum will use a Rust enum\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1369},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196475,"byte_end":196483,"line_start":2166,"line_end":2166,"column_start":5,"column_end":13},"name":"Bitfield","qualname":"::codegen::EnumVariation::Bitfield","value":"EnumVariation::Bitfield","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The code for this enum will use a bitfield\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1371},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196536,"byte_end":196542,"line_start":2168,"line_end":2168,"column_start":5,"column_end":11},"name":"Consts","qualname":"::codegen::EnumVariation::Consts","value":"EnumVariation::Consts","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The code for this enum will use consts\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1373},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196615,"byte_end":196627,"line_start":2170,"line_end":2170,"column_start":5,"column_end":17},"name":"ModuleConsts","qualname":"::codegen::EnumVariation::ModuleConsts","value":"EnumVariation::ModuleConsts","parent":{"krate":0,"index":4856},"children":[],"decl_id":null,"docs":" The code for this enum will use a module containing consts\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4856},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196342,"byte_end":196355,"line_start":2162,"line_end":2162,"column_start":10,"column_end":23},"name":"EnumVariation","qualname":"::codegen::EnumVariation","value":"EnumVariation::{Rust, Bitfield, Consts, ModuleConsts}","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373}],"decl_id":null,"docs":" A helper type that represents different enum variations.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196333,"byte_end":196629,"line_start":2162,"line_end":2171,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":1072},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":217504,"byte_end":217509,"line_start":2792,"line_end":2792,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::TryToOpaque::Extra","value":"type Extra;","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":219501,"byte_end":219506,"line_start":2853,"line_end":2853,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::TryToRustTy::Extra","value":"type Extra;","parent":{"krate":0,"index":1086},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":219961,"byte_end":219966,"line_start":2868,"line_end":2868,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::TryToRustTyOrOpaque::Extra","value":"type Extra;","parent":{"krate":0,"index":1092},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1106},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":221744,"byte_end":221749,"line_start":2919,"line_end":2919,"column_start":10,"column_end":15},"name":"Extra","qualname":"::codegen::ToRustTyOrOpaque::Extra","value":"type Extra;","parent":{"krate":0,"index":1104},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,102,101,97,116,117,114,101,115,46,114,115],"byte_start":292937,"byte_end":292955,"line_start":111,"line_end":111,"column_start":11,"column_end":29},"name":"LATEST_STABLE_RUST","qualname":"::features::LATEST_STABLE_RUST","value":"RustTarget","parent":null,"children":[],"decl_id":null,"docs":" Latest stable release of Rust\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1405},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297734,"byte_end":297738,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"None","qualname":"::ir::annotations::FieldAccessorKind::None","value":"FieldAccessorKind::None","parent":{"krate":0,"index":4950},"children":[],"decl_id":null,"docs":" No accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1407},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297768,"byte_end":297775,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"Regular","qualname":"::ir::annotations::FieldAccessorKind::Regular","value":"FieldAccessorKind::Regular","parent":{"krate":0,"index":4950},"children":[],"decl_id":null,"docs":" Plain accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1409},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297806,"byte_end":297812,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Unsafe","qualname":"::ir::annotations::FieldAccessorKind::Unsafe","value":"FieldAccessorKind::Unsafe","parent":{"krate":0,"index":4950},"children":[],"decl_id":null,"docs":" Unsafe accessor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1411},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297846,"byte_end":297855,"line_start":19,"line_end":19,"column_start":5,"column_end":14},"name":"Immutable","qualname":"::ir::annotations::FieldAccessorKind::Immutable","value":"FieldAccessorKind::Immutable","parent":{"krate":0,"index":4950},"children":[],"decl_id":null,"docs":" Immutable accessor.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4950},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297689,"byte_end":297706,"line_start":11,"line_end":11,"column_start":10,"column_end":27},"name":"FieldAccessorKind","qualname":"::ir::annotations::FieldAccessorKind","value":"FieldAccessorKind::{None, Regular, Unsafe, Immutable}","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1411}],"decl_id":null,"docs":" What kind of accessor should we provide for a field?\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":297680,"byte_end":297858,"line_start":11,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":4966},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":298112,"byte_end":298123,"line_start":29,"line_end":29,"column_start":12,"column_end":23},"name":"Annotations","qualname":"::ir::annotations::Annotations","value":"Annotations {  }","parent":null,"children":[{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1425}],"decl_id":null,"docs":" Annotations for a given item, or a field.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":300107,"byte_end":300110,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<Annotations>::new","value":"fn (cursor: &clang::Cursor) -> Option<Annotations>","parent":null,"children":[],"decl_id":null,"docs":" Construct new annotations for the given cursor and its bindgen comments\n (if any).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":300408,"byte_end":300412,"line_start":98,"line_end":98,"column_start":12,"column_end":16},"name":"hide","qualname":"<Annotations>::hide","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should this type be hidden?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":300502,"byte_end":300508,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"opaque","qualname":"<Annotations>::opaque","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should this type be opaque?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":301135,"byte_end":301149,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"use_instead_of","qualname":"<Annotations>::use_instead_of","value":"fn (&self) -> Option<&[String]>","parent":null,"children":[],"decl_id":null,"docs":" For a given type, indicates the type it should replace.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":301304,"byte_end":301317,"line_start":134,"line_end":134,"column_start":12,"column_end":25},"name":"disallow_copy","qualname":"<Annotations>::disallow_copy","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Should we avoid implementing the `Copy` trait?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":301418,"byte_end":301432,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"private_fields","qualname":"<Annotations>::private_fields","value":"fn (&self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Should the fields be private?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":301577,"byte_end":301590,"line_start":144,"line_end":144,"column_start":12,"column_end":25},"name":"accessor_kind","qualname":"<Annotations>::accessor_kind","value":"fn (&self) -> Option<FieldAccessorKind>","parent":null,"children":[],"decl_id":null,"docs":" What kind of accessors should we provide for this type's fields?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":303133,"byte_end":303154,"line_start":186,"line_end":186,"column_start":12,"column_end":33},"name":"constify_enum_variant","qualname":"<Annotations>::constify_enum_variant","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether we've parsed a \"constant\" attribute.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4982},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":323292,"byte_end":323314,"line_start":149,"line_end":149,"column_start":12,"column_end":34},"name":"UsedTemplateParameters","qualname":"::ir::analysis::template_params::UsedTemplateParameters","value":"UsedTemplateParameters {  }","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1435}],"decl_id":null,"docs":" An analysis that finds for each IR item its set of template parameters that\n it uses.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4992},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":341712,"byte_end":341729,"line_start":36,"line_end":36,"column_start":12,"column_end":29},"name":"CannotDeriveDebug","qualname":"::ir::analysis::derive_debug::CannotDeriveDebug","value":"CannotDeriveDebug {  }","parent":null,"children":[{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1451}],"decl_id":null,"docs":" An analysis that finds for each IR item whether debug cannot be derived.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1457},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354620,"byte_end":354633,"line_start":17,"line_end":17,"column_start":5,"column_end":18},"name":"BaseHasVtable","qualname":"::ir::analysis::has_vtable::HasVtableResult::BaseHasVtable","value":"HasVtableResult::BaseHasVtable","parent":{"krate":0,"index":5002},"children":[],"decl_id":null,"docs":" The item has a vtable, but the actual vtable pointer is in a base\n member.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1459},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354721,"byte_end":354734,"line_start":20,"line_end":20,"column_start":5,"column_end":18},"name":"SelfHasVtable","qualname":"::ir::analysis::has_vtable::HasVtableResult::SelfHasVtable","value":"HasVtableResult::SelfHasVtable","parent":{"krate":0,"index":5002},"children":[],"decl_id":null,"docs":" The item has a vtable and the actual vtable pointer is within this item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1461},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354790,"byte_end":354792,"line_start":23,"line_end":23,"column_start":5,"column_end":7},"name":"No","qualname":"::ir::analysis::has_vtable::HasVtableResult::No","value":"HasVtableResult::No","parent":{"krate":0,"index":5002},"children":[],"decl_id":null,"docs":" The item does not have a vtable pointer.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5002},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354508,"byte_end":354523,"line_start":14,"line_end":14,"column_start":10,"column_end":25},"name":"HasVtableResult","qualname":"::ir::analysis::has_vtable::HasVtableResult","value":"HasVtableResult::{BaseHasVtable, SelfHasVtable, No}","parent":null,"children":[{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461}],"decl_id":null,"docs":" The result of the `HasVtableAnalysis` for an individual item.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354499,"byte_end":354794,"line_start":14,"line_end":24,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354499,"byte_end":354794,"line_start":14,"line_end":24,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355524,"byte_end":355528,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"join","qualname":"<HasVtableResult>::join","value":"fn (self, rhs: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Take the least upper bound of `self` and `rhs`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5026},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":356482,"byte_end":356499,"line_start":79,"line_end":79,"column_start":12,"column_end":29},"name":"HasVtableAnalysis","qualname":"::ir::analysis::has_vtable::HasVtableAnalysis","value":"HasVtableAnalysis {  }","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469}],"decl_id":null,"docs":" An analysis that finds for each IR item whether it has vtable or not","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5036},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":363296,"byte_end":363317,"line_start":26,"line_end":26,"column_start":12,"column_end":33},"name":"HasDestructorAnalysis","qualname":"::ir::analysis::has_destructor::HasDestructorAnalysis","value":"HasDestructorAnalysis {  }","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1483}],"decl_id":null,"docs":" An analysis that finds for each IR item whether it has a destructor or not","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5046},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":369834,"byte_end":369853,"line_start":33,"line_end":33,"column_start":12,"column_end":31},"name":"CannotDeriveDefault","qualname":"::ir::analysis::derive_default::CannotDeriveDefault","value":"CannotDeriveDefault {  }","parent":null,"children":[{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1495}],"decl_id":null,"docs":" An analysis that finds for each IR item whether default cannot be derived.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5056},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":385058,"byte_end":385074,"line_start":35,"line_end":35,"column_start":12,"column_end":28},"name":"CannotDeriveCopy","qualname":"::ir::analysis::derive_copy::CannotDeriveCopy","value":"CannotDeriveCopy {  }","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507}],"decl_id":null,"docs":" An analysis that finds for each IR item whether copy cannot be derived.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5066},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":398059,"byte_end":398082,"line_start":26,"line_end":26,"column_start":12,"column_end":35},"name":"HasTypeParameterInArray","qualname":"::ir::analysis::has_type_param_in_array::HasTypeParameterInArray","value":"HasTypeParameterInArray {  }","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519}],"decl_id":null,"docs":" An analysis that finds for each IR item whether it has array or not.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5076},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":407614,"byte_end":407630,"line_start":36,"line_end":36,"column_start":12,"column_end":28},"name":"CannotDeriveHash","qualname":"::ir::analysis::derive_hash::CannotDeriveHash","value":"CannotDeriveHash {  }","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1531}],"decl_id":null,"docs":" An analysis that finds for each IR item whether hash cannot be derived.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5086},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":422937,"byte_end":422970,"line_start":43,"line_end":43,"column_start":12,"column_end":45},"name":"CannotDerivePartialEqOrPartialOrd","qualname":"::ir::analysis::derive_partialeq_or_partialord::CannotDerivePartialEqOrPartialOrd","value":"CannotDerivePartialEqOrPartialOrd {  }","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1543}],"decl_id":null,"docs":" An analysis that finds for each IR item whether `PartialEq`/`PartialOrd`\n cannot be derived.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5096},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":437390,"byte_end":437398,"line_start":26,"line_end":26,"column_start":12,"column_end":20},"name":"HasFloat","qualname":"::ir::analysis::has_float::HasFloat","value":"HasFloat {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1557}],"decl_id":null,"docs":" An analysis that finds for each IR item whether it has float or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1563},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":446199,"byte_end":446211,"line_start":33,"line_end":33,"column_start":5,"column_end":17},"name":"NonZeroSized","qualname":"::ir::analysis::sizedness::SizednessResult::NonZeroSized","value":"SizednessResult::NonZeroSized","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Has some size that is known to be greater than zero. That doesn't mean\n it has a static size, but it is not zero sized for sure. In other words,\n it might contain an incomplete array or some other dynamically sized\n type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1565},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":446907,"byte_end":446925,"line_start":55,"line_end":55,"column_start":5,"column_end":23},"name":"DependsOnTypeParam","qualname":"::ir::analysis::sizedness::SizednessResult::DependsOnTypeParam","value":"SizednessResult::DependsOnTypeParam","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" Whether this type is zero-sized or not depends on whether a type\n parameter is zero-sized or not.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447174,"byte_end":447183,"line_start":62,"line_end":62,"column_start":5,"column_end":14},"name":"ZeroSized","qualname":"::ir::analysis::sizedness::SizednessResult::ZeroSized","value":"SizednessResult::ZeroSized","parent":{"krate":0,"index":5106},"children":[],"decl_id":null,"docs":" The type is zero-sized.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5106},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":445926,"byte_end":445941,"line_start":28,"line_end":28,"column_start":10,"column_end":25},"name":"SizednessResult","qualname":"::ir::analysis::sizedness::SizednessResult","value":"SizednessResult::{NonZeroSized, DependsOnTypeParam, ZeroSized}","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567}],"decl_id":null,"docs":" The result of the `Sizedness` analysis for an individual item.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":445917,"byte_end":447186,"line_start":28,"line_end":63,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":445917,"byte_end":447186,"line_start":28,"line_end":63,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447931,"byte_end":447935,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"join","qualname":"<SizednessResult>::join","value":"fn (self, rhs: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Take the least upper bound of `self` and `rhs`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5130},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":448767,"byte_end":448784,"line_start":120,"line_end":120,"column_start":12,"column_end":29},"name":"SizednessAnalysis","qualname":"::ir::analysis::sizedness::SizednessAnalysis","value":"SizednessAnalysis {  }","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575}],"decl_id":null,"docs":" An analysis that computes the sizedness of all types.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2112},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":307084,"byte_end":307088,"line_start":89,"line_end":89,"column_start":10,"column_end":14},"name":"Node","qualname":"::ir::analysis::MonotoneFramework::Node","value":"type Node: Copy;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" The type of node in our dependency graph.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2114},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":307369,"byte_end":307374,"line_start":96,"line_end":96,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::analysis::MonotoneFramework::Extra","value":"type Extra: Sized;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" Any extra data that is needed during computation.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2116},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":307571,"byte_end":307577,"line_start":101,"line_end":101,"column_start":10,"column_end":16},"name":"Output","qualname":"::ir::analysis::MonotoneFramework::Output","value":"type Output: From<Self> + fmt::Debug;","parent":{"krate":0,"index":2110},"children":[],"decl_id":null,"docs":" The final output of this analysis. Once we have reached a fix-point, we\n convert `self` into this type, and return it as the final result of the\n analysis.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1585},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":457951,"byte_end":457957,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Struct","qualname":"::ir::comp::CompKind::Struct","value":"CompKind::Struct","parent":{"krate":0,"index":5156},"children":[],"decl_id":null,"docs":" A struct.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1587},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":457980,"byte_end":457985,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Union","qualname":"::ir::comp::CompKind::Union","value":"CompKind::Union","parent":{"krate":0,"index":5156},"children":[],"decl_id":null,"docs":" A union.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5156},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":457918,"byte_end":457926,"line_start":24,"line_end":24,"column_start":10,"column_end":18},"name":"CompKind","qualname":"::ir::comp::CompKind","value":"CompKind::{Struct, Union}","parent":null,"children":[{"krate":0,"index":1585},{"krate":0,"index":1587}],"decl_id":null,"docs":" The kind of compound type.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":457909,"byte_end":457988,"line_start":24,"line_end":29,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1589},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458186,"byte_end":458197,"line_start":36,"line_end":36,"column_start":5,"column_end":16},"name":"Constructor","qualname":"::ir::comp::MethodKind::Constructor","value":"MethodKind::Constructor","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A constructor. We represent it as method for convenience, to avoid code\n duplication.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1591},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458225,"byte_end":458235,"line_start":38,"line_end":38,"column_start":5,"column_end":15},"name":"Destructor","qualname":"::ir::comp::MethodKind::Destructor","value":"MethodKind::Destructor","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A destructor.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1593},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458271,"byte_end":458288,"line_start":40,"line_end":40,"column_start":5,"column_end":22},"name":"VirtualDestructor","qualname":"::ir::comp::MethodKind::VirtualDestructor","value":"MethodKind::VirtualDestructor { pure_virtual }","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A virtual destructor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1597},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458394,"byte_end":458400,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Static","qualname":"::ir::comp::MethodKind::Static","value":"MethodKind::Static","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A static method.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1599},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458431,"byte_end":458437,"line_start":47,"line_end":47,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::comp::MethodKind::Normal","value":"MethodKind::Normal","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A normal method.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1601},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458469,"byte_end":458476,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"name":"Virtual","qualname":"::ir::comp::MethodKind::Virtual","value":"MethodKind::Virtual { pure_virtual }","parent":{"krate":0,"index":5172},"children":[],"decl_id":null,"docs":" A virtual method.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5172},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458068,"byte_end":458078,"line_start":33,"line_end":33,"column_start":10,"column_end":20},"name":"MethodKind","qualname":"::ir::comp::MethodKind","value":"MethodKind::{Constructor, Destructor, VirtualDestructor, Static, Normal, Virtual}","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601}],"decl_id":null,"docs":" The kind of C++ method.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458059,"byte_end":458554,"line_start":33,"line_end":53,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458623,"byte_end":458636,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"is_destructor","qualname":"<MethodKind>::is_destructor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a destructor method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2212},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458862,"byte_end":458877,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"is_pure_virtual","qualname":"<MethodKind>::is_pure_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a pure virtual method?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5190},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459190,"byte_end":459196,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"name":"Method","qualname":"::ir::comp::Method","value":"Method {  }","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609}],"decl_id":null,"docs":" A struct representing a C++ method, either static, normal, or virtual.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459516,"byte_end":459519,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Method>::new","value":"fn (kind: MethodKind, signature: FunctionId, is_const: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Method`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459732,"byte_end":459736,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"kind","qualname":"<Method>::kind","value":"fn (&self) -> MethodKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of method is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459827,"byte_end":459841,"line_start":104,"line_end":104,"column_start":12,"column_end":26},"name":"is_constructor","qualname":"<Method>::is_constructor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a constructor?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2222},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459956,"byte_end":459966,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"is_virtual","qualname":"<Method>::is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a virtual method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2224},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":460194,"byte_end":460203,"line_start":118,"line_end":118,"column_start":12,"column_end":21},"name":"is_static","qualname":"<Method>::is_static","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a static method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":460344,"byte_end":460353,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"signature","qualname":"<Method>::signature","value":"fn (&self) -> FunctionId","parent":null,"children":[],"decl_id":null,"docs":" Get the id for the `Function` signature for this method.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":460460,"byte_end":460468,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Method>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a const qualified method?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5196},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461448,"byte_end":461460,"line_start":162,"line_end":162,"column_start":12,"column_end":24},"name":"BitfieldUnit","qualname":"::ir::comp::BitfieldUnit","value":"BitfieldUnit {  }","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615}],"decl_id":null,"docs":" A contiguous set of logical bitfields that live within the same physical\n allocation unit. See 9.2.4 [class.bit] in the C++ standard and [section\n 2.4.II.1 in the Itanium C++\n ABI](http://itanium-cxx-abi.github.io/cxx-abi/abi.html#class-types).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461738,"byte_end":461741,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"nth","qualname":"<BitfieldUnit>::nth","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the 1-based index of this bitfield unit within its containing\n struct. Useful for generating a Rust struct's field name for this unit\n of bitfields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461855,"byte_end":461861,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"layout","qualname":"<BitfieldUnit>::layout","value":"fn (&self) -> Layout","parent":null,"children":[],"decl_id":null,"docs":" Get the layout within which these bitfields reside.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2252},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461963,"byte_end":461972,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"bitfields","qualname":"<BitfieldUnit>::bitfields","value":"fn (&self) -> &[Bitfield]","parent":null,"children":[],"decl_id":null,"docs":" Get the bitfields within this unit.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1617},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462137,"byte_end":462147,"line_start":191,"line_end":191,"column_start":5,"column_end":15},"name":"DataMember","qualname":"::ir::comp::Field::DataMember","value":"Field::DataMember(FieldData)","parent":{"krate":0,"index":5202},"children":[],"decl_id":null,"docs":" A normal data member.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1621},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462235,"byte_end":462244,"line_start":194,"line_end":194,"column_start":5,"column_end":14},"name":"Bitfields","qualname":"::ir::comp::Field::Bitfields","value":"Field::Bitfields(BitfieldUnit)","parent":{"krate":0,"index":5202},"children":[],"decl_id":null,"docs":" A physical allocation unit containing many logical bitfields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5202},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462095,"byte_end":462100,"line_start":189,"line_end":189,"column_start":10,"column_end":15},"name":"Field","qualname":"::ir::comp::Field","value":"Field::{DataMember, Bitfields}","parent":null,"children":[{"krate":0,"index":1617},{"krate":0,"index":1621}],"decl_id":null,"docs":" A struct representing a C++ field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2256},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462320,"byte_end":462326,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"layout","qualname":"<Field>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" Get this field's layout.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5208},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":465416,"byte_end":465424,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"Bitfield","qualname":"::ir::comp::Bitfield","value":"Bitfield {  }","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1631}],"decl_id":null,"docs":" A logical bitfield within some physical bitfield allocation unit.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":466358,"byte_end":466374,"line_start":347,"line_end":347,"column_start":12,"column_end":28},"name":"offset_into_unit","qualname":"<Bitfield>::offset_into_unit","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index of the bit within this bitfield's allocation unit where\n this bitfield begins.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2282},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":466560,"byte_end":466564,"line_start":353,"line_end":353,"column_start":12,"column_end":16},"name":"mask","qualname":"<Bitfield>::mask","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the mask value that when &'ed with this bitfield's allocation unit\n produces this bitfield's value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":466952,"byte_end":466957,"line_start":368,"line_end":368,"column_start":12,"column_end":17},"name":"width","qualname":"<Bitfield>::width","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the bit width of this bitfield.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":467213,"byte_end":467224,"line_start":376,"line_end":376,"column_start":12,"column_end":23},"name":"getter_name","qualname":"<Bitfield>::getter_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Name of the generated Rust getter for this bitfield.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":467697,"byte_end":467708,"line_start":388,"line_end":388,"column_start":12,"column_end":23},"name":"setter_name","qualname":"<Bitfield>::setter_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Name of the generated Rust setter for this bitfield.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5226},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":482672,"byte_end":482681,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"FieldData","qualname":"::ir::comp::FieldData","value":"FieldData {  }","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1659}],"decl_id":null,"docs":" Common data shared across different field types.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1661},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484003,"byte_end":484009,"line_start":913,"line_end":913,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::comp::BaseKind::Normal","value":"BaseKind::Normal","parent":{"krate":0,"index":5236},"children":[],"decl_id":null,"docs":" Normal inheritance, like:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1663},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484123,"byte_end":484130,"line_start":919,"line_end":919,"column_start":5,"column_end":12},"name":"Virtual","qualname":"::ir::comp::BaseKind::Virtual","value":"BaseKind::Virtual","parent":{"krate":0,"index":5236},"children":[],"decl_id":null,"docs":" Virtual inheritance, like:","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5236},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":483888,"byte_end":483896,"line_start":907,"line_end":907,"column_start":10,"column_end":18},"name":"BaseKind","qualname":"::ir::comp::BaseKind","value":"BaseKind::{Normal, Virtual}","parent":null,"children":[{"krate":0,"index":1661},{"krate":0,"index":1663}],"decl_id":null,"docs":" The kind of inheritance a base class is using.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":483879,"byte_end":484133,"line_start":907,"line_end":920,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5254},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484188,"byte_end":484192,"line_start":924,"line_end":924,"column_start":12,"column_end":16},"name":"Base","qualname":"::ir::comp::Base","value":"Base { ty, kind, field_name }","parent":null,"children":[{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":1669}],"decl_id":null,"docs":" A base class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1665},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484240,"byte_end":484242,"line_start":926,"line_end":926,"column_start":9,"column_end":11},"name":"ty","qualname":"::ir::comp::Base::ty","value":"ir::context::TypeId","parent":{"krate":0,"index":5254},"children":[],"decl_id":null,"docs":" The type of this base class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1667},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484305,"byte_end":484309,"line_start":928,"line_end":928,"column_start":9,"column_end":13},"name":"kind","qualname":"::ir::comp::Base::kind","value":"ir::comp::BaseKind","parent":{"krate":0,"index":5254},"children":[],"decl_id":null,"docs":" The kind of inheritance we're doing.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1669},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484392,"byte_end":484402,"line_start":930,"line_end":930,"column_start":9,"column_end":19},"name":"field_name","qualname":"::ir::comp::Base::field_name","value":"std::string::String","parent":{"krate":0,"index":5254},"children":[],"decl_id":null,"docs":" Name of the field in which this base should be stored.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2378},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484495,"byte_end":484505,"line_start":935,"line_end":935,"column_start":12,"column_end":22},"name":"is_virtual","qualname":"<Base>::is_virtual","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this base class is inheriting virtually.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484652,"byte_end":484668,"line_start":940,"line_end":940,"column_start":12,"column_end":28},"name":"requires_storage","qualname":"<Base>::requires_storage","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this base class should have it's own field for storage.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5264},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":485429,"byte_end":485437,"line_start":966,"line_end":966,"column_start":12,"column_end":20},"name":"CompInfo","qualname":"::ir::comp::CompInfo","value":"CompInfo {  }","parent":null,"children":[{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1701}],"decl_id":null,"docs":" A compound type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":487946,"byte_end":487949,"line_start":1041,"line_end":1041,"column_start":12,"column_end":15},"name":"new","qualname":"<CompInfo>::new","value":"fn (kind: CompKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new compound type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":488990,"byte_end":488996,"line_start":1070,"line_end":1070,"column_start":12,"column_end":18},"name":"layout","qualname":"<CompInfo>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" Compute the layout of this type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":489652,"byte_end":489658,"line_start":1093,"line_end":1093,"column_start":12,"column_end":18},"name":"fields","qualname":"<CompInfo>::fields","value":"fn (&self) -> &[Field]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of fields.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2392},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490112,"byte_end":490140,"line_start":1105,"line_end":1105,"column_start":12,"column_end":40},"name":"has_non_type_template_params","qualname":"<CompInfo>::has_non_type_template_params","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does this type have any template parameters that aren't types\n (e.g. int)?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490319,"byte_end":490341,"line_start":1111,"line_end":1111,"column_start":12,"column_end":34},"name":"has_own_virtual_method","qualname":"<CompInfo>::has_own_virtual_method","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Do we see a virtual function during parsing?\n Get the has_own_virtual_method boolean.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490477,"byte_end":490495,"line_start":1116,"line_end":1116,"column_start":12,"column_end":30},"name":"has_own_destructor","qualname":"<CompInfo>::has_own_destructor","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Did we see a destructor when parsing this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490599,"byte_end":490606,"line_start":1121,"line_end":1121,"column_start":12,"column_end":19},"name":"methods","qualname":"<CompInfo>::methods","value":"fn (&self) -> &[Method]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490714,"byte_end":490726,"line_start":1126,"line_end":1126,"column_start":12,"column_end":24},"name":"constructors","qualname":"<CompInfo>::constructors","value":"fn (&self) -> &[FunctionId]","parent":null,"children":[],"decl_id":null,"docs":" Get this type's set of constructors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2402},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490834,"byte_end":490844,"line_start":1131,"line_end":1131,"column_start":12,"column_end":22},"name":"destructor","qualname":"<CompInfo>::destructor","value":"fn (&self) -> Option<(MethodKind, FunctionId)>","parent":null,"children":[],"decl_id":null,"docs":" Get this type's destructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2404},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":490976,"byte_end":490980,"line_start":1136,"line_end":1136,"column_start":12,"column_end":16},"name":"kind","qualname":"<CompInfo>::kind","value":"fn (&self) -> CompKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of compound type is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2406},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":491063,"byte_end":491071,"line_start":1141,"line_end":1141,"column_start":12,"column_end":20},"name":"is_union","qualname":"<CompInfo>::is_union","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a union?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":491200,"byte_end":491212,"line_start":1146,"line_end":1146,"column_start":12,"column_end":24},"name":"base_members","qualname":"<CompInfo>::base_members","value":"fn (&self) -> &[Base]","parent":null,"children":[],"decl_id":null,"docs":" The set of types that this one inherits from.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":491335,"byte_end":491342,"line_start":1151,"line_end":1151,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<CompInfo>::from_ty","value":"fn (potential_id: ItemId, ty: &clang::Type, location: Option<clang::Cursor>, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new compound type from a Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":505653,"byte_end":505664,"line_start":1483,"line_end":1483,"column_start":12,"column_end":23},"name":"inner_types","qualname":"<CompInfo>::inner_types","value":"fn (&self) -> &[TypeId]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of types that were declared within this compound type\n (e.g. nested class definitions).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":505807,"byte_end":505817,"line_start":1488,"line_end":1488,"column_start":12,"column_end":22},"name":"inner_vars","qualname":"<CompInfo>::inner_vars","value":"fn (&self) -> &[VarId]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of static variables declared within this compound type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":506005,"byte_end":506023,"line_start":1494,"line_end":1494,"column_start":12,"column_end":30},"name":"found_unknown_attr","qualname":"<CompInfo>::found_unknown_attr","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we found a field with an opaque type that could potentially mess up\n the layout of this compound type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":506129,"byte_end":506138,"line_start":1499,"line_end":1499,"column_start":12,"column_end":21},"name":"is_packed","qualname":"<CompInfo>::is_packed","value":"fn (&self, ctx: &BindgenContext, layout: &Option<Layout>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this compound type packed?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":507174,"byte_end":507196,"line_start":1527,"line_end":1527,"column_start":12,"column_end":34},"name":"is_forward_declaration","qualname":"<CompInfo>::is_forward_declaration","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if compound type has been forward declared\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":507337,"byte_end":507359,"line_start":1532,"line_end":1532,"column_start":12,"column_end":34},"name":"compute_bitfield_units","qualname":"<CompInfo>::compute_bitfield_units","value":"fn (&mut self, ctx: &BindgenContext) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute this compound structure's bitfield allocation units.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":507520,"byte_end":507538,"line_start":1537,"line_end":1537,"column_start":12,"column_end":30},"name":"deanonymize_fields","qualname":"<CompInfo>::deanonymize_fields","value":"fn (&mut self, ctx: &BindgenContext) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assign for each anonymous field a generated name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":507867,"byte_end":507884,"line_start":1546,"line_end":1546,"column_start":12,"column_end":29},"name":"can_be_rust_union","qualname":"<CompInfo>::can_be_rust_union","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the current union can be represented as a Rust `union`","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5284},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518327,"byte_end":518333,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"ItemId","qualname":"::ir::context::ItemId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for some kind of IR item.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518316,"byte_end":518341,"line_start":37,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5344},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":520557,"byte_end":520563,"line_start":115,"line_end":115,"column_start":16,"column_end":22},"name":"TypeId","qualname":"::ir::context::TypeId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an `Item` whose `ItemKind` is known to be\n `ItemKind::Type`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518836,"byte_end":518861,"line_start":53,"line_end":53,"column_start":9,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5338},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":520721,"byte_end":520731,"line_start":119,"line_end":119,"column_start":19,"column_end":29},"name":"as_type_id","qualname":"<ItemId>::as_type_id","value":"fn (&self, ctx: &BindgenContext) -> Option<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `TypeId` if its associated item is a type,\n otherwise return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5340},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":520896,"byte_end":520910,"line_start":124,"line_end":124,"column_start":20,"column_end":34},"name":"expect_type_id","qualname":"<ItemId>::expect_type_id","value":"fn (&self, ctx: &BindgenContext) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `TypeId`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5342},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521066,"byte_end":521086,"line_start":128,"line_end":128,"column_start":21,"column_end":41},"name":"as_type_id_unchecked","qualname":"<ItemId>::as_type_id_unchecked","value":"fn (&self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `TypeId` without actually checking whether\n this id actually points to a `Type`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5404},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521221,"byte_end":521229,"line_start":134,"line_end":134,"column_start":16,"column_end":24},"name":"ModuleId","qualname":"::ir::context::ModuleId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an `Item` whose `ItemKind` is known to be\n `ItemKind::Module`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518836,"byte_end":518861,"line_start":53,"line_end":53,"column_start":9,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5398},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521391,"byte_end":521403,"line_start":138,"line_end":138,"column_start":19,"column_end":31},"name":"as_module_id","qualname":"<ItemId>::as_module_id","value":"fn (&self, ctx: &BindgenContext) -> Option<ModuleId>","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `ModuleId` if its associated item is a\n module, otherwise return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5400},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521574,"byte_end":521590,"line_start":143,"line_end":143,"column_start":20,"column_end":36},"name":"expect_module_id","qualname":"<ItemId>::expect_module_id","value":"fn (&self, ctx: &BindgenContext) -> ModuleId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `ModuleId`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5402},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521750,"byte_end":521772,"line_start":147,"line_end":147,"column_start":21,"column_end":43},"name":"as_module_id_unchecked","qualname":"<ItemId>::as_module_id_unchecked","value":"fn (&self) -> ModuleId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `ModuleId` without actually checking\n whether this id actually points to a `Module`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5464},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":521904,"byte_end":521909,"line_start":153,"line_end":153,"column_start":16,"column_end":21},"name":"VarId","qualname":"::ir::context::VarId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an `Item` whose `ItemKind` is known to be\n `ItemKind::Var`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518836,"byte_end":518861,"line_start":53,"line_end":53,"column_start":9,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5458},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522065,"byte_end":522074,"line_start":157,"line_end":157,"column_start":19,"column_end":28},"name":"as_var_id","qualname":"<ItemId>::as_var_id","value":"fn (&self, ctx: &BindgenContext) -> Option<VarId>","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `VarId` if its associated item is a var,\n otherwise return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5460},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522236,"byte_end":522249,"line_start":162,"line_end":162,"column_start":20,"column_end":33},"name":"expect_var_id","qualname":"<ItemId>::expect_var_id","value":"fn (&self, ctx: &BindgenContext) -> VarId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `VarId`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5462},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522403,"byte_end":522422,"line_start":166,"line_end":166,"column_start":21,"column_end":40},"name":"as_var_id_unchecked","qualname":"<ItemId>::as_var_id_unchecked","value":"fn (&self) -> VarId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `VarId` without actually checking whether\n this id actually points to a `Var`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5524},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522559,"byte_end":522569,"line_start":172,"line_end":172,"column_start":16,"column_end":26},"name":"FunctionId","qualname":"::ir::context::FunctionId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an `Item` whose `ItemKind` is known to be\n `ItemKind::Function`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":518836,"byte_end":518861,"line_start":53,"line_end":53,"column_start":9,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5518},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522735,"byte_end":522749,"line_start":176,"line_end":176,"column_start":19,"column_end":33},"name":"as_function_id","qualname":"<ItemId>::as_function_id","value":"fn (&self, ctx: &BindgenContext) -> Option<FunctionId>","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `FunctionId` if its associated item is a function,\n otherwise return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5520},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":522926,"byte_end":522944,"line_start":181,"line_end":181,"column_start":20,"column_end":38},"name":"expect_function_id","qualname":"<ItemId>::expect_function_id","value":"fn (&self, ctx: &BindgenContext) -> FunctionId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `FunctionId`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":5522},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523108,"byte_end":523132,"line_start":185,"line_end":185,"column_start":21,"column_end":45},"name":"as_function_id_unchecked","qualname":"<ItemId>::as_function_id_unchecked","value":"fn (&self) -> FunctionId","parent":null,"children":[],"decl_id":null,"docs":" Convert this `ItemId` into a `FunctionId` without actually checking whether\n this id actually points to a `Function`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2622},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523298,"byte_end":523306,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"as_usize","qualname":"<ItemId>::as_usize","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get a numeric representation of this id.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5580},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":526014,"byte_end":526028,"line_start":303,"line_end":303,"column_start":12,"column_end":26},"name":"BindgenContext","qualname":"::ir::context::BindgenContext","value":"BindgenContext {  }","parent":null,"children":[{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1787},{"krate":0,"index":1789},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1801},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1815},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1821},{"krate":0,"index":1823},{"krate":0,"index":1825},{"krate":0,"index":1827}],"decl_id":null,"docs":" A context used during parsing and generation of structs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":537966,"byte_end":537971,"line_start":641,"line_end":641,"column_start":12,"column_end":17},"name":"timer","qualname":"<BindgenContext>::timer","value":"fn <'a> (&self, name: &'a str) -> Timer<'a>","parent":null,"children":[],"decl_id":null,"docs":" Creates a timer for the current bindgen phase. If time_phases is `true`,\n the timer will print to stderr when it is dropped, otherwise it will do\n nothing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":538187,"byte_end":538206,"line_start":647,"line_end":647,"column_start":12,"column_end":31},"name":"target_pointer_size","qualname":"<BindgenContext>::target_pointer_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the pointer width to use for the target for the current\n translation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":538471,"byte_end":538493,"line_start":656,"line_end":656,"column_start":12,"column_end":34},"name":"currently_parsed_types","qualname":"<BindgenContext>::currently_parsed_types","value":"fn (&self) -> &[PartialType]","parent":null,"children":[],"decl_id":null,"docs":" Get the stack of partially parsed types that we are in the middle of\n parsing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":538779,"byte_end":538792,"line_start":663,"line_end":663,"column_start":12,"column_end":25},"name":"begin_parsing","qualname":"<BindgenContext>::begin_parsing","value":"fn (&mut self, partial_ty: PartialType) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Begin parsing the given partial type, and push it onto the\n `currently_parsed_types` stack so that we won't infinite recurse if we\n run into a reference to it while parsing it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":539022,"byte_end":539036,"line_start":669,"line_end":669,"column_start":12,"column_end":26},"name":"finish_parsing","qualname":"<BindgenContext>::finish_parsing","value":"fn (&mut self) -> PartialType","parent":null,"children":[],"decl_id":null,"docs":" Finish parsing the current partial type, pop it off the\n `currently_parsed_types` stack, and return it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":539283,"byte_end":539298,"line_start":676,"line_end":676,"column_start":12,"column_end":27},"name":"parse_callbacks","qualname":"<BindgenContext>::parse_callbacks","value":"fn (&self) -> Option<&ParseCallbacks>","parent":null,"children":[],"decl_id":null,"docs":" Get the user-provided callbacks by reference, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":539553,"byte_end":539561,"line_start":684,"line_end":684,"column_start":12,"column_end":20},"name":"add_item","qualname":"<BindgenContext>::add_item","value":"fn (&mut self, item: Item, declaration: Option<Cursor>, location: Option<Cursor>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Define a new item.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":544003,"byte_end":544017,"line_start":806,"line_end":806,"column_start":12,"column_end":26},"name":"add_type_param","qualname":"<BindgenContext>::add_type_param","value":"fn (&mut self, item: Item, definition: clang::Cursor) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new named template type parameter to this context's item set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":545100,"byte_end":545114,"line_start":840,"line_end":840,"column_start":12,"column_end":26},"name":"get_type_param","qualname":"<BindgenContext>::get_type_param","value":"fn (&self, definition: &clang::Cursor) -> Option<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Get the named type defined at the given cursor location, if we've\n already added one.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":545485,"byte_end":545496,"line_start":851,"line_end":851,"column_start":12,"column_end":23},"name":"rust_mangle","qualname":"<BindgenContext>::rust_mangle","value":"fn <'a> (&self, name: &'a str) -> Cow<'a, str>","parent":null,"children":[],"decl_id":null,"docs":" Mangles a name so it doesn't conflict with any keyword.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2706},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":547458,"byte_end":547468,"line_start":925,"line_end":925,"column_start":12,"column_end":22},"name":"rust_ident","qualname":"<BindgenContext>::rust_ident","value":"fn <S> (&self, name: S) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Returns a mangled name as a rust identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":547666,"byte_end":547680,"line_start":933,"line_end":933,"column_start":12,"column_end":26},"name":"rust_ident_raw","qualname":"<BindgenContext>::rust_ident_raw","value":"fn <T> (&self, name: T) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Returns a mangled name as a rust identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":547871,"byte_end":547876,"line_start":941,"line_end":941,"column_start":12,"column_end":17},"name":"items","qualname":"<BindgenContext>::items","value":"fn <'a> (&'a self) -> btree_map::Iter<'a, ItemId, Item>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all items that have been defined.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":548036,"byte_end":548054,"line_start":946,"line_end":946,"column_start":12,"column_end":30},"name":"collected_typerefs","qualname":"<BindgenContext>::collected_typerefs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we collected all unresolved type references yet?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":561402,"byte_end":561418,"line_start":1320,"line_end":1320,"column_start":12,"column_end":28},"name":"lookup_sizedness","qualname":"<BindgenContext>::lookup_sizedness","value":"fn (&self, id: TypeId) -> SizednessResult","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the type with the given id is sized or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":562091,"byte_end":562108,"line_start":1342,"line_end":1342,"column_start":12,"column_end":29},"name":"lookup_has_vtable","qualname":"<BindgenContext>::lookup_has_vtable","value":"fn (&self, id: TypeId) -> HasVtableResult","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` has vtable or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":562901,"byte_end":562922,"line_start":1366,"line_end":1366,"column_start":12,"column_end":33},"name":"lookup_has_destructor","qualname":"<BindgenContext>::lookup_has_destructor","value":"fn (&self, id: TypeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` has a destructor.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":564804,"byte_end":564827,"line_start":1407,"line_end":1407,"column_start":12,"column_end":35},"name":"uses_template_parameter","qualname":"<BindgenContext>::uses_template_parameter","value":"fn (&self, item: ItemId, template_param: TypeId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `item` uses the given `template_param`, `false`\n otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":565802,"byte_end":565830,"line_start":1439,"line_end":1439,"column_start":12,"column_end":40},"name":"uses_any_template_parameters","qualname":"<BindgenContext>::uses_any_template_parameters","value":"fn (&self, item: ItemId) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if `item` uses any unbound, generic template parameters,\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2756},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":567237,"byte_end":567248,"line_start":1477,"line_end":1477,"column_start":12,"column_end":23},"name":"root_module","qualname":"<BindgenContext>::root_module","value":"fn (&self) -> ModuleId","parent":null,"children":[],"decl_id":null,"docs":" Get the root module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":567470,"byte_end":567482,"line_start":1485,"line_end":1485,"column_start":12,"column_end":24},"name":"resolve_type","qualname":"<BindgenContext>::resolve_type","value":"fn (&self, type_id: TypeId) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Resolve a type with the given id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2760},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":567761,"byte_end":567773,"line_start":1493,"line_end":1493,"column_start":12,"column_end":24},"name":"resolve_func","qualname":"<BindgenContext>::resolve_func","value":"fn (&self, func_id: FunctionId) -> &Function","parent":null,"children":[],"decl_id":null,"docs":" Resolve a function with the given id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2762},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":568071,"byte_end":568088,"line_start":1501,"line_end":1501,"column_start":12,"column_end":29},"name":"safe_resolve_type","qualname":"<BindgenContext>::safe_resolve_type","value":"fn (&self, type_id: TypeId) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` as a type, or `None` if there is no item with\n the given id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2764},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":568315,"byte_end":568336,"line_start":1507,"line_end":1507,"column_start":12,"column_end":33},"name":"resolve_item_fallible","qualname":"<BindgenContext>::resolve_item_fallible","value":"fn <Id> (&self, id: Id) -> Option<&Item>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` into an `Item`, or `None` if no such item\n exists.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":568562,"byte_end":568574,"line_start":1514,"line_end":1514,"column_start":12,"column_end":24},"name":"resolve_item","qualname":"<BindgenContext>::resolve_item","value":"fn <Id> (&self, item_id: Id) -> &Item","parent":null,"children":[],"decl_id":null,"docs":" Resolve the given `ItemId` into an `Item`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2768},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":568853,"byte_end":568867,"line_start":1523,"line_end":1523,"column_start":12,"column_end":26},"name":"current_module","qualname":"<BindgenContext>::current_module","value":"fn (&self) -> ModuleId","parent":null,"children":[],"decl_id":null,"docs":" Get the current module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":569303,"byte_end":569322,"line_start":1535,"line_end":1535,"column_start":12,"column_end":31},"name":"add_semantic_parent","qualname":"<BindgenContext>::add_semantic_parent","value":"fn (&mut self, definition: clang::Cursor, parent_id: ItemId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a semantic parent for a given type definition.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":569556,"byte_end":569577,"line_start":1544,"line_end":1544,"column_start":12,"column_end":33},"name":"known_semantic_parent","qualname":"<BindgenContext>::known_semantic_parent","value":"fn (&self, definition: clang::Cursor) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Returns a known semantic parent for a given definition.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":582320,"byte_end":582337,"line_start":1849,"line_end":1849,"column_start":12,"column_end":29},"name":"get_resolved_type","qualname":"<BindgenContext>::get_resolved_type","value":"fn (&self, decl: &clang::CanonicalTypeDeclaration) -> Option<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" If we have already resolved the type for the given type declaration,\n return its `ItemId`. Otherwise, return `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":582836,"byte_end":582858,"line_start":1865,"line_end":1865,"column_start":12,"column_end":34},"name":"builtin_or_resolved_ty","qualname":"<BindgenContext>::builtin_or_resolved_ty","value":"fn (&mut self, with_id: ItemId, parent_id: Option<ItemId>, ty: &clang::Type, location: Option<clang::Cursor>) -> Option<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Looks up for an already resolved type, either because it's builtin, or\n because we already have it in the map.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":585825,"byte_end":585841,"line_start":1939,"line_end":1939,"column_start":12,"column_end":28},"name":"build_ty_wrapper","qualname":"<BindgenContext>::build_ty_wrapper","value":"fn (&mut self, with_id: ItemId, wrapped_id: TypeId, parent_id: Option<ItemId>, ty: &clang::Type) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Make a new item that is a resolved type reference to the `wrapped_id`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2792},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":586306,"byte_end":586325,"line_start":1958,"line_end":1958,"column_start":12,"column_end":31},"name":"build_const_wrapper","qualname":"<BindgenContext>::build_const_wrapper","value":"fn (&mut self, with_id: ItemId, wrapped_id: TypeId, parent_id: Option<ItemId>, ty: &clang::Type) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" A wrapper over a type that adds a const qualifier explicitly.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2796},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":587403,"byte_end":587415,"line_start":1998,"line_end":1998,"column_start":12,"column_end":24},"name":"next_item_id","qualname":"<BindgenContext>::next_item_id","value":"fn (&mut self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Returns the next item id to be used for an item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2802},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":590680,"byte_end":590696,"line_start":2072,"line_end":2072,"column_start":12,"column_end":28},"name":"translation_unit","qualname":"<BindgenContext>::translation_unit","value":"fn (&self) -> &clang::TranslationUnit","parent":null,"children":[],"decl_id":null,"docs":" Get the current Clang translation unit that is being processed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2804},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":590843,"byte_end":590855,"line_start":2077,"line_end":2077,"column_start":12,"column_end":24},"name":"parsed_macro","qualname":"<BindgenContext>::parsed_macro","value":"fn (&self, macro_name: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Have we parsed the macro named `macro_name` already?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2806},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":591003,"byte_end":591016,"line_start":2082,"line_end":2082,"column_start":12,"column_end":25},"name":"parsed_macros","qualname":"<BindgenContext>::parsed_macros","value":"fn (&self) -> &HashMap<Vec<u8>, cexpr::expr::EvalResult>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently parsed macros.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2808},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":591220,"byte_end":591237,"line_start":2088,"line_end":2088,"column_start":12,"column_end":29},"name":"note_parsed_macro","qualname":"<BindgenContext>::note_parsed_macro","value":"fn (&mut self, id: Vec<u8>, value: cexpr::expr::EvalResult) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mark the macro named `macro_name` as parsed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":591428,"byte_end":591444,"line_start":2097,"line_end":2097,"column_start":12,"column_end":28},"name":"in_codegen_phase","qualname":"<BindgenContext>::in_codegen_phase","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are we in the codegen phase?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":591744,"byte_end":591751,"line_start":2106,"line_end":2106,"column_start":12,"column_end":19},"name":"replace","qualname":"<BindgenContext>::replace","value":"fn (&mut self, name: &[String], potential_ty: ItemId) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Mark the type with the given `name` as replaced by the type with id\n `potential_ty`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":592593,"byte_end":592609,"line_start":2130,"line_end":2130,"column_start":12,"column_end":28},"name":"is_replaced_type","qualname":"<BindgenContext>::is_replaced_type","value":"fn <Id> (&self, path: &[String], id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the item with the given `name` and `id` been replaced by another\n type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2816},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":592915,"byte_end":592929,"line_start":2139,"line_end":2139,"column_start":12,"column_end":26},"name":"opaque_by_name","qualname":"<BindgenContext>::opaque_by_name","value":"fn (&self, path: &[String]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is the type with the given `name` marked as opaque?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":595596,"byte_end":595602,"line_start":2215,"line_end":2215,"column_start":12,"column_end":18},"name":"module","qualname":"<BindgenContext>::module","value":"fn (&mut self, cursor: clang::Cursor) -> ModuleId","parent":null,"children":[],"decl_id":null,"docs":" Given a CXCursor_Namespace cursor, return the item id of the\n corresponding module, or create one on the fly.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":596570,"byte_end":596581,"line_start":2245,"line_end":2245,"column_start":12,"column_end":23},"name":"with_module","qualname":"<BindgenContext>::with_module","value":"fn <F> (&mut self, module_id: ModuleId, cb: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Start traversing the module with the given `module_id`, invoke the\n callback `cb`, and then return to traversing the original module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2828},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":597099,"byte_end":597116,"line_start":2263,"line_end":2263,"column_start":12,"column_end":29},"name":"whitelisted_items","qualname":"<BindgenContext>::whitelisted_items","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all (explicitly or transitively) whitelisted items.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":597364,"byte_end":597377,"line_start":2271,"line_end":2271,"column_start":12,"column_end":25},"name":"codegen_items","qualname":"<BindgenContext>::codegen_items","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the set of items we should generate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":602680,"byte_end":602692,"line_start":2389,"line_end":2389,"column_start":12,"column_end":24},"name":"trait_prefix","qualname":"<BindgenContext>::trait_prefix","value":"fn (&self) -> Term","parent":null,"children":[],"decl_id":null,"docs":" Convenient method for getting the prefix to use for most traits in\n codegen depending on the `use_core` option.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":602918,"byte_end":602943,"line_start":2398,"line_end":2398,"column_start":12,"column_end":37},"name":"generated_bindgen_complex","qualname":"<BindgenContext>::generated_bindgen_complex","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Call if a bindgen complex is generated\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":603081,"byte_end":603106,"line_start":2403,"line_end":2403,"column_start":12,"column_end":37},"name":"need_bindgen_complex_type","qualname":"<BindgenContext>::need_bindgen_complex_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether we need to generate the bindgen complex type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2842},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":603606,"byte_end":603629,"line_start":2418,"line_end":2418,"column_start":12,"column_end":35},"name":"lookup_can_derive_debug","qualname":"<BindgenContext>::lookup_can_derive_debug","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can\n derive debug or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":604476,"byte_end":604501,"line_start":2442,"line_end":2442,"column_start":12,"column_end":37},"name":"lookup_can_derive_default","qualname":"<BindgenContext>::lookup_can_derive_default","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can\n derive default or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":605598,"byte_end":605620,"line_start":2472,"line_end":2472,"column_start":12,"column_end":34},"name":"lookup_can_derive_hash","qualname":"<BindgenContext>::lookup_can_derive_hash","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can\n derive hash or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":606610,"byte_end":606651,"line_start":2494,"line_end":2494,"column_start":12,"column_end":53},"name":"lookup_can_derive_partialeq_or_partialord","qualname":"<BindgenContext>::lookup_can_derive_partialeq_or_partialord","value":"fn <Id> (&self, id: Id) -> CanDerive","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can derive `Partial{Eq,Ord}`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2858},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":607242,"byte_end":607264,"line_start":2511,"line_end":2511,"column_start":12,"column_end":34},"name":"lookup_can_derive_copy","qualname":"<BindgenContext>::lookup_can_derive_copy","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` can derive `Copy` or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2862},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":608137,"byte_end":608167,"line_start":2534,"line_end":2534,"column_start":12,"column_end":42},"name":"lookup_has_type_param_in_array","qualname":"<BindgenContext>::lookup_has_type_param_in_array","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` has type parameter in array or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":608927,"byte_end":608943,"line_start":2555,"line_end":2555,"column_start":12,"column_end":28},"name":"lookup_has_float","qualname":"<BindgenContext>::lookup_has_float","value":"fn <Id> (&self, id: Id) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Look up whether the item with `id` has array or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":609340,"byte_end":609360,"line_start":2565,"line_end":2565,"column_start":12,"column_end":32},"name":"no_partialeq_by_name","qualname":"<BindgenContext>::no_partialeq_by_name","value":"fn (&self, item: &Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `--no-partialeq` flag is enabled for this item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":609588,"byte_end":609603,"line_start":2571,"line_end":2571,"column_start":12,"column_end":27},"name":"no_copy_by_name","qualname":"<BindgenContext>::no_copy_by_name","value":"fn (&self, item: &Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `--no-copy` flag is enabled for this item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":609826,"byte_end":609841,"line_start":2577,"line_end":2577,"column_start":12,"column_end":27},"name":"no_hash_by_name","qualname":"<BindgenContext>::no_hash_by_name","value":"fn (&self, item: &Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `--no-hash` flag is enabled for this item.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5586},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610098,"byte_end":610110,"line_start":2585,"line_end":2585,"column_start":12,"column_end":24},"name":"ItemResolver","qualname":"::ir::context::ItemResolver","value":"ItemResolver {  }","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1837}],"decl_id":null,"docs":" A builder struct for configuring item resolution options.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610087,"byte_end":610191,"line_start":2585,"line_end":2589,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610270,"byte_end":610283,"line_start":2593,"line_end":2593,"column_start":12,"column_end":25},"name":"into_resolver","qualname":"<ItemId>::into_resolver","value":"fn (self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Create an `ItemResolver` from this item id.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610563,"byte_end":610566,"line_start":2609,"line_end":2609,"column_start":12,"column_end":15},"name":"new","qualname":"<ItemResolver>::new","value":"fn <Id> (id: Id) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `ItemResolver` from the given id.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610843,"byte_end":610860,"line_start":2619,"line_end":2619,"column_start":12,"column_end":29},"name":"through_type_refs","qualname":"<ItemResolver>::through_type_refs","value":"fn (mut self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Keep resolving through `Type::TypeRef` items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2888},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":611011,"byte_end":611031,"line_start":2625,"line_end":2625,"column_start":12,"column_end":32},"name":"through_type_aliases","qualname":"<ItemResolver>::through_type_aliases","value":"fn (mut self) -> ItemResolver","parent":null,"children":[],"decl_id":null,"docs":" Keep resolving through `Type::Alias` items.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2890},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":611200,"byte_end":611207,"line_start":2631,"line_end":2631,"column_start":12,"column_end":19},"name":"resolve","qualname":"<ItemResolver>::resolve","value":"fn (self, ctx: &BindgenContext) -> &Item","parent":null,"children":[],"decl_id":null,"docs":" Finish configuring and perform the actual item resolution.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5598},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612156,"byte_end":612167,"line_start":2658,"line_end":2658,"column_start":12,"column_end":23},"name":"PartialType","qualname":"::ir::context::PartialType","value":"PartialType {  }","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1841}],"decl_id":null,"docs":" A type that we are in the middle of parsing.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612145,"byte_end":612342,"line_start":2658,"line_end":2663,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612145,"byte_end":612342,"line_start":2658,"line_end":2663,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612413,"byte_end":612416,"line_start":2667,"line_end":2667,"column_start":12,"column_end":15},"name":"new","qualname":"<PartialType>::new","value":"fn (decl: Cursor, id: ItemId) -> PartialType","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `PartialType`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612673,"byte_end":612677,"line_start":2676,"line_end":2676,"column_start":12,"column_end":16},"name":"decl","qualname":"<PartialType>::decl","value":"fn (&self) -> &Cursor","parent":null,"children":[],"decl_id":null,"docs":" The cursor pointing to this partial type's declaration location.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612852,"byte_end":612854,"line_start":2682,"line_end":2682,"column_start":12,"column_end":14},"name":"id","qualname":"<PartialType>::id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" The item ID allocated for this type. This is *NOT* a key for an entry in\n the context's item set yet!\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619658,"byte_end":619660,"line_start":143,"line_end":143,"column_start":5,"column_end":7},"name":"No","qualname":"::ir::derive::CanDerive::No","value":"CanDerive::No","parent":{"krate":0,"index":5620},"children":[],"decl_id":null,"docs":" No, we cannot.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1845},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619881,"byte_end":619894,"line_start":149,"line_end":149,"column_start":5,"column_end":18},"name":"ArrayTooLarge","qualname":"::ir::derive::CanDerive::ArrayTooLarge","value":"CanDerive::ArrayTooLarge","parent":{"krate":0,"index":5620},"children":[],"decl_id":null,"docs":" The only thing that stops us from automatically deriving is that\n array with more than maximum number of elements is used.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1847},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619943,"byte_end":619946,"line_start":152,"line_end":152,"column_start":5,"column_end":8},"name":"Yes","qualname":"::ir::derive::CanDerive::Yes","value":"CanDerive::Yes","parent":{"krate":0,"index":5620},"children":[],"decl_id":null,"docs":" Yes, we can derive automatically.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5620},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619619,"byte_end":619628,"line_start":141,"line_end":141,"column_start":10,"column_end":19},"name":"CanDerive","qualname":"::ir::derive::CanDerive","value":"CanDerive::{No, ArrayTooLarge, Yes}","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1847}],"decl_id":null,"docs":" Whether it is possible or not to automatically derive trait for an item.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619610,"byte_end":619949,"line_start":141,"line_end":153,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619610,"byte_end":619949,"line_start":141,"line_end":153,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620641,"byte_end":620645,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"join","qualname":"<CanDerive>::join","value":"fn (self, rhs: Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Take the least upper bound of `self` and `rhs`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1849},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624101,"byte_end":624115,"line_start":17,"line_end":17,"column_start":5,"column_end":19},"name":"ModuleConstify","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::ModuleConstify","value":"EnumVariantCustomBehavior::ModuleConstify","parent":{"krate":0,"index":5644},"children":[],"decl_id":null,"docs":" This variant will be a module containing constants.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1851},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624202,"byte_end":624210,"line_start":19,"line_end":19,"column_start":5,"column_end":13},"name":"Constify","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::Constify","value":"EnumVariantCustomBehavior::Constify","parent":{"krate":0,"index":5644},"children":[],"decl_id":null,"docs":" This variant will be constified, that is, forced to generate a constant.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1853},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624286,"byte_end":624290,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Hide","qualname":"::ir::enum_ty::EnumVariantCustomBehavior::Hide","value":"EnumVariantCustomBehavior::Hide","parent":{"krate":0,"index":5644},"children":[],"decl_id":null,"docs":" This variant will be hidden entirely from the resulting enum.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5644},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624009,"byte_end":624034,"line_start":15,"line_end":15,"column_start":10,"column_end":35},"name":"EnumVariantCustomBehavior","qualname":"::ir::enum_ty::EnumVariantCustomBehavior","value":"EnumVariantCustomBehavior::{ModuleConstify, Constify, Hide}","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1851},{"krate":0,"index":1853}],"decl_id":null,"docs":" An enum representing custom handling that can be given to a variant.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624000,"byte_end":624293,"line_start":15,"line_end":22,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624000,"byte_end":624293,"line_start":15,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5664},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624348,"byte_end":624352,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Enum","qualname":"::ir::enum_ty::Enum","value":"Enum {  }","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1857}],"decl_id":null,"docs":" A C/C++ enumeration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3046},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624823,"byte_end":624826,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Enum>::new","value":"fn (repr: Option<TypeId>, variants: Vec<EnumVariant>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Enum` with the given representation and variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3048},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":625017,"byte_end":625021,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"repr","qualname":"<Enum>::repr","value":"fn (&self) -> Option<TypeId>","parent":null,"children":[],"decl_id":null,"docs":" Get this enumeration's representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3050},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":625126,"byte_end":625134,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"variants","qualname":"<Enum>::variants","value":"fn (&self) -> &[EnumVariant]","parent":null,"children":[],"decl_id":null,"docs":" Get this enumeration's variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3052},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":625263,"byte_end":625270,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<Enum>::from_ty","value":"fn (ty: &clang::Type, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct an enumeration from the given Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3058},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":629051,"byte_end":629074,"line_start":159,"line_end":159,"column_start":12,"column_end":35},"name":"computed_enum_variation","qualname":"<Enum>::computed_enum_variation","value":"fn (&self, ctx: &BindgenContext, item: &Item) -> EnumVariation","parent":null,"children":[],"decl_id":null,"docs":" Returns the final representation of the enum.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5670},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":629917,"byte_end":629928,"line_start":178,"line_end":178,"column_start":12,"column_end":23},"name":"EnumVariant","qualname":"::ir::enum_ty::EnumVariant","value":"EnumVariant {  }","parent":null,"children":[{"krate":0,"index":1859},{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1865}],"decl_id":null,"docs":" A single enum variant, to be contained only in an enum.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1867},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630418,"byte_end":630424,"line_start":196,"line_end":196,"column_start":5,"column_end":11},"name":"Signed","qualname":"::ir::enum_ty::EnumVariantValue::Signed","value":"EnumVariantValue::Signed(i64)","parent":{"krate":0,"index":5676},"children":[],"decl_id":null,"docs":" A signed constant.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1871},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630466,"byte_end":630474,"line_start":199,"line_end":199,"column_start":5,"column_end":13},"name":"Unsigned","qualname":"::ir::enum_ty::EnumVariantValue::Unsigned","value":"EnumVariantValue::Unsigned(u64)","parent":{"krate":0,"index":5676},"children":[],"decl_id":null,"docs":" An unsigned constant.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5676},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630368,"byte_end":630384,"line_start":194,"line_end":194,"column_start":10,"column_end":26},"name":"EnumVariantValue","qualname":"::ir::enum_ty::EnumVariantValue","value":"EnumVariantValue::{Signed, Unsigned}","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1871}],"decl_id":null,"docs":" A constant value assigned to an enumeration variant.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630359,"byte_end":630482,"line_start":194,"line_end":200,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630359,"byte_end":630482,"line_start":194,"line_end":200,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":3062},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630580,"byte_end":630583,"line_start":204,"line_end":204,"column_start":12,"column_end":15},"name":"new","qualname":"<EnumVariant>::new","value":"fn (name: String, comment: Option<String>, val: EnumVariantValue, custom_behavior: Option<EnumVariantCustomBehavior>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new enumeration variant from the given parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3064},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630915,"byte_end":630919,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"name","qualname":"<EnumVariant>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this variant's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3066},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":631008,"byte_end":631011,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"val","qualname":"<EnumVariant>::val","value":"fn (&self) -> EnumVariantValue","parent":null,"children":[],"decl_id":null,"docs":" Get this variant's value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":631118,"byte_end":631125,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"comment","qualname":"<EnumVariant>::comment","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this variant's documentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3070},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":631314,"byte_end":631334,"line_start":235,"line_end":235,"column_start":12,"column_end":32},"name":"force_constification","qualname":"<EnumVariant>::force_constification","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this variant should be enforced to be a constant by code\n generation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":631593,"byte_end":631599,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"hidden","qualname":"<EnumVariant>::hidden","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the current variant should be hidden completely from the\n resulting rust enum.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1877},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632482,"byte_end":632490,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::function::FunctionKind::Function","value":"FunctionKind::Function","parent":{"krate":0,"index":5718},"children":[],"decl_id":null,"docs":" A plain, free function.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1879},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632527,"byte_end":632533,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Method","qualname":"::ir::function::FunctionKind::Method","value":"FunctionKind::Method(MethodKind)","parent":{"krate":0,"index":5718},"children":[],"decl_id":null,"docs":" A method of some kind.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5718},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632431,"byte_end":632443,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"FunctionKind","qualname":"::ir::function::FunctionKind","value":"FunctionKind::{Function, Method}","parent":null,"children":[{"krate":0,"index":1877},{"krate":0,"index":1879}],"decl_id":null,"docs":" What kind of a function are we looking at?\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632422,"byte_end":632548,"line_start":21,"line_end":26,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1883},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":633960,"byte_end":633968,"line_start":65,"line_end":65,"column_start":5,"column_end":13},"name":"External","qualname":"::ir::function::Linkage::External","value":"Linkage::External","parent":{"krate":0,"index":5736},"children":[],"decl_id":null,"docs":" Externally visible and can be linked against\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1885},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":634063,"byte_end":634071,"line_start":67,"line_end":67,"column_start":5,"column_end":13},"name":"Internal","qualname":"::ir::function::Linkage::Internal","value":"Linkage::Internal","parent":{"krate":0,"index":5736},"children":[],"decl_id":null,"docs":" Not exposed externally. 'static inline' functions will have this kind of linkage\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5736},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":633893,"byte_end":633900,"line_start":63,"line_end":63,"column_start":10,"column_end":17},"name":"Linkage","qualname":"::ir::function::Linkage","value":"Linkage::{External, Internal}","parent":null,"children":[{"krate":0,"index":1883},{"krate":0,"index":1885}],"decl_id":null,"docs":" The style of linkage\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":633884,"byte_end":634073,"line_start":63,"line_end":68,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5748},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":634272,"byte_end":634280,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"Function","qualname":"::ir::function::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1897}],"decl_id":null,"docs":" A function declaration, with a signature, arguments, and argument names.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3138},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":634767,"byte_end":634770,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<Function>::new","value":"fn (name: String, mangled_name: Option<String>, signature: TypeId, comment: Option<String>, kind: FunctionKind, linkage: Linkage) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3140},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635169,"byte_end":635173,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this function's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3142},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635262,"byte_end":635274,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"mangled_name","qualname":"<Function>::mangled_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this function's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3144},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635411,"byte_end":635420,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"signature","qualname":"<Function>::signature","value":"fn (&self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Get this function's signature type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635515,"byte_end":635519,"line_start":131,"line_end":131,"column_start":12,"column_end":16},"name":"kind","qualname":"<Function>::kind","value":"fn (&self) -> FunctionKind","parent":null,"children":[],"decl_id":null,"docs":" Get this function's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3148},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635618,"byte_end":635625,"line_start":136,"line_end":136,"column_start":12,"column_end":19},"name":"linkage","qualname":"<Function>::linkage","value":"fn (&self) -> Linkage","parent":null,"children":[],"decl_id":null,"docs":" Get this function's linkage.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1899},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636328,"byte_end":636329,"line_start":169,"line_end":169,"column_start":5,"column_end":6},"name":"C","qualname":"::ir::function::Abi::C","value":"Abi::C","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The default C ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1901},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636362,"byte_end":636369,"line_start":171,"line_end":171,"column_start":5,"column_end":12},"name":"Stdcall","qualname":"::ir::function::Abi::Stdcall","value":"Abi::Stdcall","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The \"stdcall\" ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1903},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636403,"byte_end":636411,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"Fastcall","qualname":"::ir::function::Abi::Fastcall","value":"Abi::Fastcall","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The \"fastcall\" ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636445,"byte_end":636453,"line_start":175,"line_end":175,"column_start":5,"column_end":13},"name":"ThisCall","qualname":"::ir::function::Abi::ThisCall","value":"Abi::ThisCall","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The \"thiscall\" ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636484,"byte_end":636489,"line_start":177,"line_end":177,"column_start":5,"column_end":10},"name":"Aapcs","qualname":"::ir::function::Abi::Aapcs","value":"Abi::Aapcs","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The \"aapcs\" ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636520,"byte_end":636525,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Win64","qualname":"::ir::function::Abi::Win64","value":"Abi::Win64","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" The \"win64\" ABI.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636566,"byte_end":636573,"line_start":181,"line_end":181,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::ir::function::Abi::Unknown","value":"Abi::Unknown(CXCallingConv)","parent":{"krate":0,"index":5754},"children":[],"decl_id":null,"docs":" An unknown or invalid ABI.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5754},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636291,"byte_end":636294,"line_start":167,"line_end":167,"column_start":10,"column_end":13},"name":"Abi","qualname":"::ir::function::Abi","value":"Abi::{C, Stdcall, Fastcall, ThisCall, Aapcs, Win64, Unknown}","parent":null,"children":[{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911}],"decl_id":null,"docs":" An ABI extracted from a clang cursor.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636282,"byte_end":636591,"line_start":167,"line_end":182,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5766},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637424,"byte_end":637435,"line_start":213,"line_end":213,"column_start":12,"column_end":23},"name":"FunctionSig","qualname":"::ir::function::FunctionSig","value":"FunctionSig {  }","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921}],"decl_id":null,"docs":" A function signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3172},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":640505,"byte_end":640508,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"new","qualname":"<FunctionSig>::new","value":"fn (return_type: TypeId, arguments: Vec<(Option<String>, TypeId)>, is_variadic: bool, abi: Abi) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function signature.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3174},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":640907,"byte_end":640914,"line_start":324,"line_end":324,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<FunctionSig>::from_ty","value":"fn (ty: &clang::Type, cursor: &clang::Cursor, ctx: &mut BindgenContext) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new function signature from the given Clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3178},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":646350,"byte_end":646361,"line_start":465,"line_end":465,"column_start":12,"column_end":23},"name":"return_type","qualname":"<FunctionSig>::return_type","value":"fn (&self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's return type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3180},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":646491,"byte_end":646505,"line_start":470,"line_end":470,"column_start":12,"column_end":26},"name":"argument_types","qualname":"<FunctionSig>::argument_types","value":"fn (&self) -> &[(Option<String>, TypeId)]","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's argument (name, type) pairs.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3182},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":646636,"byte_end":646639,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"abi","qualname":"<FunctionSig>::abi","value":"fn (&self) -> Abi","parent":null,"children":[],"decl_id":null,"docs":" Get this function signature's ABI.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3184},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":646736,"byte_end":646747,"line_start":480,"line_end":480,"column_start":12,"column_end":23},"name":"is_variadic","qualname":"<FunctionSig>::is_variadic","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this function signature variadic?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3186},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":647499,"byte_end":647527,"line_start":496,"line_end":496,"column_start":12,"column_end":40},"name":"function_pointers_can_derive","qualname":"<FunctionSig>::function_pointers_can_derive","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Are function pointers with this signature able to derive Rust traits?\n Rust only supports deriving traits for function pointers with a limited\n number of parameters and a couple ABIs.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651288,"byte_end":651292,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ir::int::IntKind::Bool","value":"IntKind::Bool","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `bool`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651324,"byte_end":651329,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"SChar","qualname":"::ir::int::IntKind::SChar","value":"IntKind::SChar","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `signed char`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1927},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651364,"byte_end":651369,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"UChar","qualname":"::ir::int::IntKind::UChar","value":"IntKind::UChar","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `unsigned char`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1929},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651398,"byte_end":651403,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"WChar","qualname":"::ir::int::IntKind::WChar","value":"IntKind::WChar { size }","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `wchar_t`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1933},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651578,"byte_end":651582,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"Char","qualname":"::ir::int::IntKind::Char","value":"IntKind::Char { is_signed }","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A platform-dependent `char` type, with the signedness support.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1937},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651705,"byte_end":651710,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"Short","qualname":"::ir::int::IntKind::Short","value":"IntKind::Short","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `short`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1939},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651746,"byte_end":651752,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"UShort","qualname":"::ir::int::IntKind::UShort","value":"IntKind::UShort","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `unsigned short`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1941},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651777,"byte_end":651780,"line_start":34,"line_end":34,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::int::IntKind::Int","value":"IntKind::Int","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `int`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651814,"byte_end":651818,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"UInt","qualname":"::ir::int::IntKind::UInt","value":"IntKind::UInt","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `unsigned int`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1945},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651843,"byte_end":651847,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Long","qualname":"::ir::int::IntKind::Long","value":"IntKind::Long","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1947},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651882,"byte_end":651887,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"ULong","qualname":"::ir::int::IntKind::ULong","value":"IntKind::ULong","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `unsigned long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651917,"byte_end":651925,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"name":"LongLong","qualname":"::ir::int::IntKind::LongLong","value":"IntKind::LongLong","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `long long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1951},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651965,"byte_end":651974,"line_start":49,"line_end":49,"column_start":5,"column_end":14},"name":"ULongLong","qualname":"::ir::int::IntKind::ULongLong","value":"IntKind::ULongLong","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `unsigned long long`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1953},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652013,"byte_end":652015,"line_start":52,"line_end":52,"column_start":5,"column_end":7},"name":"I8","qualname":"::ir::int::IntKind::I8","value":"IntKind::I8","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 8-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1955},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652056,"byte_end":652058,"line_start":55,"line_end":55,"column_start":5,"column_end":7},"name":"U8","qualname":"::ir::int::IntKind::U8","value":"IntKind::U8","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 8-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1957},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652098,"byte_end":652101,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"I16","qualname":"::ir::int::IntKind::I16","value":"IntKind::I16","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 16-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1959},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652152,"byte_end":652155,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"U16","qualname":"::ir::int::IntKind::U16","value":"IntKind::U16","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" Either a `char16_t` or a `wchar_t`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1961},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652195,"byte_end":652198,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"I32","qualname":"::ir::int::IntKind::I32","value":"IntKind::I32","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 32-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1963},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652240,"byte_end":652243,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"U32","qualname":"::ir::int::IntKind::U32","value":"IntKind::U32","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 32-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1965},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652283,"byte_end":652286,"line_start":70,"line_end":70,"column_start":5,"column_end":8},"name":"I64","qualname":"::ir::int::IntKind::I64","value":"IntKind::I64","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 64-bit signed integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1967},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652328,"byte_end":652331,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"U64","qualname":"::ir::int::IntKind::U64","value":"IntKind::U64","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A 64-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1969},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652360,"byte_end":652364,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"I128","qualname":"::ir::int::IntKind::I128","value":"IntKind::I128","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" An `int128_t`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1971},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652394,"byte_end":652398,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"U128","qualname":"::ir::int::IntKind::U128","value":"IntKind::U128","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A `uint128_t`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1973},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652497,"byte_end":652503,"line_start":83,"line_end":83,"column_start":5,"column_end":11},"name":"Custom","qualname":"::ir::int::IntKind::Custom","value":"IntKind::Custom { name, is_signed }","parent":{"krate":0,"index":5772},"children":[],"decl_id":null,"docs":" A custom integer type, used to allow custom macro types depending on\n range.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5772},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651256,"byte_end":651263,"line_start":5,"line_end":5,"column_start":10,"column_end":17},"name":"IntKind","qualname":"::ir::int::IntKind","value":"IntKind::{Bool, SChar, UChar, WChar, Char, Short, UShort, Int, UInt, Long, ULong, LongLong, ULongLong, I8, U8, I16, U16, I32, U32, I64, U64, I128, U128, Custom}","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1933},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951},{"krate":0,"index":1953},{"krate":0,"index":1955},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973}],"decl_id":null,"docs":" Which integral type are we dealing with?\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651247,"byte_end":652690,"line_start":5,"line_end":89,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":651247,"byte_end":652690,"line_start":5,"line_end":89,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":3216},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652756,"byte_end":652765,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"is_signed","qualname":"<IntKind>::is_signed","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this integral type signed?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":653638,"byte_end":653648,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"known_size","qualname":"<IntKind>::known_size","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" If this type has a known size, return it (in bytes). This is to\n alleviate libclang sometimes not giving us a layout (like in the case\n when an enum is defined inside a class with template parameters).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3224},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":654115,"byte_end":654133,"line_start":136,"line_end":136,"column_start":12,"column_end":30},"name":"signedness_matches","qualname":"<IntKind>::signedness_matches","value":"fn (&self, val: i64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this type's signedness matches the value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3354},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":656758,"byte_end":656763,"line_start":73,"line_end":73,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::item::IsOpaque::Extra","value":"type Extra;","parent":{"krate":0,"index":3352},"children":[],"decl_id":null,"docs":" Extra context the IR thing needs to determine if it is opaque or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5824},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":665407,"byte_end":665411,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"Item","qualname":"::ir::item::Item","value":"Item {  }","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1993},{"krate":0,"index":1995},{"krate":0,"index":1997},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2005}],"decl_id":null,"docs":" An item is the base of the bindgen representation, it can be either a\n module, a type, a function, or a variable (see `ItemKind` for more\n information).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":666793,"byte_end":666796,"line_start":431,"line_end":431,"column_start":12,"column_end":15},"name":"new","qualname":"<Item>::new","value":"fn (id: ItemId, comment: Option<String>, annotations: Option<Annotations>, parent_id: ItemId, kind: ItemKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Item`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":667411,"byte_end":667426,"line_start":452,"line_end":452,"column_start":12,"column_end":27},"name":"new_opaque_type","qualname":"<Item>::new_opaque_type","value":"fn (with_id: ItemId, ty: &clang::Type, ctx: &mut BindgenContext) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Construct a new opaque item type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":667836,"byte_end":667838,"line_start":465,"line_end":465,"column_start":12,"column_end":14},"name":"id","qualname":"<Item>::id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s identifier.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":668007,"byte_end":668016,"line_start":472,"line_end":472,"column_start":12,"column_end":21},"name":"parent_id","qualname":"<Item>::parent_id","value":"fn (&self) -> ItemId","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s parent's identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":668198,"byte_end":668224,"line_start":479,"line_end":479,"column_start":12,"column_end":38},"name":"set_parent_for_replacement","qualname":"<Item>::set_parent_for_replacement","value":"fn <Id> (&mut self, id: Id) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set this item's parent id.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3478},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":668457,"byte_end":668470,"line_start":486,"line_end":486,"column_start":12,"column_end":25},"name":"codegen_depth","qualname":"<Item>::codegen_depth","value":"fn (&self, ctx: &BindgenContext) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the depth this item is indented to.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":669025,"byte_end":669032,"line_start":504,"line_end":504,"column_start":12,"column_end":19},"name":"comment","qualname":"<Item>::comment","value":"fn (&self, ctx: &BindgenContext) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Get this `Item`'s comment, if it has any, already preprocessed and with\n the right indentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":669340,"byte_end":669344,"line_start":515,"line_end":515,"column_start":12,"column_end":16},"name":"kind","qualname":"<Item>::kind","value":"fn (&self) -> &ItemKind","parent":null,"children":[],"decl_id":null,"docs":" What kind of item is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":669457,"byte_end":669465,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"kind_mut","qualname":"<Item>::kind_mut","value":"fn (&mut self) -> &mut ItemKind","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this item's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3486},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":669843,"byte_end":669851,"line_start":529,"line_end":529,"column_start":12,"column_end":20},"name":"local_id","qualname":"<Item>::local_id","value":"fn (&self, ctx: &BindgenContext) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an identifier that differentiates this item from its siblings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3488},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":670408,"byte_end":670427,"line_start":543,"line_end":543,"column_start":12,"column_end":31},"name":"next_child_local_id","qualname":"<Item>::next_child_local_id","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an identifier that differentiates a child of this item of other\n related items.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":671225,"byte_end":671236,"line_start":567,"line_end":567,"column_start":12,"column_end":23},"name":"is_toplevel","qualname":"<Item>::is_toplevel","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this item is a top-level item, from the point of view of\n bindgen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":672217,"byte_end":672228,"line_start":597,"line_end":597,"column_start":12,"column_end":23},"name":"expect_type","qualname":"<Item>::expect_type","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Type`. Panic if this is some\n other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":672411,"byte_end":672418,"line_start":603,"line_end":603,"column_start":12,"column_end":19},"name":"as_type","qualname":"<Item>::as_type","value":"fn (&self) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Type`, or `None` if this is\n some other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":672605,"byte_end":672620,"line_start":609,"line_end":609,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<Item>::expect_function","value":"fn (&self) -> &Function","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's underlying `Function`. Panic if this is\n some other kind of item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3498},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":672730,"byte_end":672739,"line_start":614,"line_end":614,"column_start":12,"column_end":21},"name":"is_module","qualname":"<Item>::is_module","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item a module?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3500},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":672914,"byte_end":672925,"line_start":622,"line_end":622,"column_start":12,"column_end":23},"name":"annotations","qualname":"<Item>::annotations","value":"fn (&self) -> &Annotations","parent":null,"children":[],"decl_id":null,"docs":" Get this item's annotations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3502},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":673133,"byte_end":673147,"line_start":629,"line_end":629,"column_start":12,"column_end":26},"name":"is_blacklisted","qualname":"<Item>::is_blacklisted","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this item should be blacklisted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3504},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":674053,"byte_end":674064,"line_start":656,"line_end":656,"column_start":12,"column_end":23},"name":"is_type_ref","qualname":"<Item>::is_type_ref","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a reference to another type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3506},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":674193,"byte_end":674199,"line_start":661,"line_end":661,"column_start":12,"column_end":18},"name":"is_var","qualname":"<Item>::is_var","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item a var type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3508},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":674371,"byte_end":674375,"line_start":669,"line_end":669,"column_start":12,"column_end":16},"name":"name","qualname":"<Item>::name","value":"fn <'a> (&'a self, ctx: &'a BindgenContext) -> NameOptions<'a>","parent":null,"children":[],"decl_id":null,"docs":" Take out item NameOptions\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":675654,"byte_end":675677,"line_start":708,"line_end":708,"column_start":12,"column_end":35},"name":"full_disambiguated_name","qualname":"<Item>::full_disambiguated_name","value":"fn (&self, ctx: &BindgenContext) -> String","parent":null,"children":[],"decl_id":null,"docs":" Create a fully disambiguated name for an item, including template\n parameters if it is a type\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3522},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":679811,"byte_end":679830,"line_start":818,"line_end":818,"column_start":12,"column_end":31},"name":"real_canonical_name","qualname":"<Item>::real_canonical_name","value":"fn (&self, ctx: &BindgenContext, opt: &NameOptions) -> String","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical name without taking into account the replaces\n annotation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3524},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":681921,"byte_end":681931,"line_start":883,"line_end":883,"column_start":12,"column_end":22},"name":"exposed_id","qualname":"<Item>::exposed_id","value":"fn (&self, ctx: &BindgenContext) -> String","parent":null,"children":[],"decl_id":null,"docs":" The exposed id that represents an unique id among the siblings of a\n given item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3526},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":682782,"byte_end":682791,"line_start":904,"line_end":904,"column_start":12,"column_end":21},"name":"as_module","qualname":"<Item>::as_module","value":"fn (&self) -> Option<&Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this item's `Module`, or `None` if this is not a\n `Module` item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3528},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":683062,"byte_end":683075,"line_start":913,"line_end":913,"column_start":12,"column_end":25},"name":"as_module_mut","qualname":"<Item>::as_module_mut","value":"fn (&mut self) -> Option<&mut Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this item's `Module`, or `None` if this is\n not a `Module` item.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3532},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":684535,"byte_end":684557,"line_start":951,"line_end":951,"column_start":12,"column_end":34},"name":"is_enabled_for_codegen","qualname":"<Item>::is_enabled_for_codegen","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this item of a kind that is enabled for code generation?\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5850},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":714390,"byte_end":714401,"line_start":1852,"line_end":1852,"column_start":12,"column_end":23},"name":"NameOptions","qualname":"::ir::item::NameOptions","value":"NameOptions {  }","parent":null,"children":[{"krate":0,"index":2011},{"krate":0,"index":2013},{"krate":0,"index":2015}],"decl_id":null,"docs":" Builder struct for naming variations, which hold inside different\n flags for naming options.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3646},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":714565,"byte_end":714568,"line_start":1860,"line_end":1860,"column_start":12,"column_end":15},"name":"new","qualname":"<NameOptions<'a>>::new","value":"fn (item: &'a Item, ctx: &'a BindgenContext) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `NameOptions`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3648},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":714912,"byte_end":714929,"line_start":1870,"line_end":1870,"column_start":12,"column_end":29},"name":"within_namespaces","qualname":"<NameOptions<'a>>::within_namespaces","value":"fn (&mut self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Construct the name without the item's containing C++ namespaces mangled\n into it. In other words, the item's name within the item's namespace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3650},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":715060,"byte_end":715063,"line_start":1876,"line_end":1876,"column_start":12,"column_end":15},"name":"get","qualname":"<NameOptions<'a>>::get","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Construct a name `String`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2019},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715568,"byte_end":715574,"line_start":16,"line_end":16,"column_start":5,"column_end":11},"name":"Module","qualname":"::ir::item_kind::ItemKind::Module","value":"ItemKind::Module(Module)","parent":{"krate":0,"index":5856},"children":[],"decl_id":null,"docs":" A module, created implicitly once (the root module), or via C++\n namespaces.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715661,"byte_end":715665,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Type","qualname":"::ir::item_kind::ItemKind::Type","value":"ItemKind::Type(Type)","parent":{"krate":0,"index":5856},"children":[],"decl_id":null,"docs":" A type declared in any of the multiple ways it can be declared.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2027},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715720,"byte_end":715728,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::item_kind::ItemKind::Function","value":"ItemKind::Function(Function)","parent":{"krate":0,"index":5856},"children":[],"decl_id":null,"docs":" A function or method declaration.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2031},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715799,"byte_end":715802,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Var","qualname":"::ir::item_kind::ItemKind::Var","value":"ItemKind::Var(Var)","parent":{"krate":0,"index":5856},"children":[],"decl_id":null,"docs":" A variable declaration, most likely a static.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5856},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715461,"byte_end":715469,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"ItemKind","qualname":"::ir::item_kind::ItemKind","value":"ItemKind::{Module, Type, Function, Var}","parent":null,"children":[{"krate":0,"index":2019},{"krate":0,"index":2023},{"krate":0,"index":2027},{"krate":0,"index":2031}],"decl_id":null,"docs":" A item we parse and translate.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3670},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715948,"byte_end":715957,"line_start":31,"line_end":31,"column_start":12,"column_end":21},"name":"as_module","qualname":"<ItemKind>::as_module","value":"fn (&self) -> Option<&Module>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Module`, or `None` if it\n is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3672},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":716165,"byte_end":716174,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"kind_name","qualname":"<ItemKind>::kind_name","value":"fn (&self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Transform our `ItemKind` into a string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3674},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":716454,"byte_end":716463,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"is_module","qualname":"<ItemKind>::is_module","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a module?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":716642,"byte_end":716655,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"expect_module","qualname":"<ItemKind>::expect_module","value":"fn (&self) -> &Module","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Module`, or panic if it\n is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3678},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":716853,"byte_end":716864,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"as_function","qualname":"<ItemKind>::as_function","value":"fn (&self) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Function`, or `None` if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3680},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":717052,"byte_end":717063,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"is_function","qualname":"<ItemKind>::is_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a function?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":717246,"byte_end":717261,"line_start":75,"line_end":75,"column_start":12,"column_end":27},"name":"expect_function","qualname":"<ItemKind>::expect_function","value":"fn (&self) -> &Function","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Function`, or panic if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3684},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":717461,"byte_end":717468,"line_start":81,"line_end":81,"column_start":12,"column_end":19},"name":"as_type","qualname":"<ItemKind>::as_type","value":"fn (&self) -> Option<&Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Type`, or `None` if\n it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3686},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":717731,"byte_end":717742,"line_start":90,"line_end":90,"column_start":12,"column_end":23},"name":"as_type_mut","qualname":"<ItemKind>::as_type_mut","value":"fn (&mut self) -> Option<&mut Type>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this `ItemKind`'s underying `Type`, or `None`\n if it is some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":717926,"byte_end":717933,"line_start":98,"line_end":98,"column_start":12,"column_end":19},"name":"is_type","qualname":"<ItemKind>::is_type","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3690},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718108,"byte_end":718119,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"expect_type","qualname":"<ItemKind>::expect_type","value":"fn (&self) -> &Type","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Type`, or panic if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3692},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718306,"byte_end":718312,"line_start":110,"line_end":110,"column_start":12,"column_end":18},"name":"as_var","qualname":"<ItemKind>::as_var","value":"fn (&self) -> Option<&Var>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Var`, or `None` if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718484,"byte_end":718490,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"is_var","qualname":"<ItemKind>::is_var","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a variable?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3696},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718663,"byte_end":718673,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"expect_var","qualname":"<ItemKind>::expect_var","value":"fn (&self) -> &Var","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this `ItemKind`'s underying `Var`, or panic if it is\n some other kind.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5862},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":719896,"byte_end":719902,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Layout","qualname":"::ir::layout::Layout","value":"Layout { size, align, packed }","parent":null,"children":[{"krate":0,"index":2035},{"krate":0,"index":2037},{"krate":0,"index":2039}],"decl_id":null,"docs":" A type that represents the struct layout of a type.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":719885,"byte_end":720121,"line_start":13,"line_end":20,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2035},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":719957,"byte_end":719961,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"size","qualname":"::ir::layout::Layout::size","value":"usize","parent":{"krate":0,"index":5862},"children":[],"decl_id":null,"docs":" The size (in bytes) of this layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2037},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":720027,"byte_end":720032,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"name":"align","qualname":"::ir::layout::Layout::align","value":"usize","parent":{"krate":0,"index":5862},"children":[],"decl_id":null,"docs":" The alignment (in bytes) of this layout.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2039},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":720106,"byte_end":720112,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"name":"packed","qualname":"::ir::layout::Layout::packed","value":"bool","parent":{"krate":0,"index":5862},"children":[],"decl_id":null,"docs":" Whether this layout's members are packed or not.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3734},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":720555,"byte_end":720574,"line_start":39,"line_end":39,"column_start":12,"column_end":31},"name":"known_type_for_size","qualname":"<Layout>::known_type_for_size","value":"fn (ctx: &BindgenContext, size: usize) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Gets the integer type name for a given known size.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3736},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":721004,"byte_end":721007,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<Layout>::new","value":"fn (size: usize, align: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Layout` with the given `size` and `align`. It is not\n packed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3740},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":721583,"byte_end":721591,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"for_size","qualname":"<Layout>::for_size","value":"fn (ctx: &BindgenContext, size: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a non-packed layout for a given size, trying to use the maximum\n alignment possible.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":721757,"byte_end":721764,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<Layout>::is_zero","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a zero-sized layout?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3744},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":721881,"byte_end":721885,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"zero","qualname":"<Layout>::zero","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a zero-sized layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3746},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":721983,"byte_end":721989,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"opaque","qualname":"<Layout>::opaque","value":"fn (&self) -> Opaque","parent":null,"children":[],"decl_id":null,"docs":" Get this layout as an opaque type.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5880},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722164,"byte_end":722170,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"Opaque","qualname":"::ir::layout::Opaque","value":"","parent":null,"children":[],"decl_id":null,"docs":" When we are treating a type as opaque, it is just a blob with a `Layout`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722273,"byte_end":722286,"line_start":103,"line_end":103,"column_start":12,"column_end":25},"name":"from_clang_ty","qualname":"<Opaque>::from_clang_ty","value":"fn (ty: &clang::Type) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Construct a new opaque type from the given clang type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3752},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722636,"byte_end":722661,"line_start":112,"line_end":112,"column_start":12,"column_end":37},"name":"known_rust_type_for_array","qualname":"<Opaque>::known_rust_type_for_array","value":"fn (&self, ctx: &BindgenContext) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Return the known rust type we should use to create a correctly-aligned\n field with this layout.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722932,"byte_end":722942,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"array_size","qualname":"<Opaque>::array_size","value":"fn (&self, ctx: &BindgenContext) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the array size that an opaque type for this layout should have if\n we know the correct type for it, or `None` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723361,"byte_end":723391,"line_start":129,"line_end":129,"column_start":12,"column_end":42},"name":"array_size_within_derive_limit","qualname":"<Opaque>::array_size_within_derive_limit","value":"fn (&self, ctx: &BindgenContext) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if this opaque layout's array size will fit within the\n maximum number of array elements that Rust allows deriving traits\n with. Return `false` otherwise.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2045},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725062,"byte_end":725068,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ir::module::ModuleKind::Normal","value":"ModuleKind::Normal","parent":{"krate":0,"index":5896},"children":[],"decl_id":null,"docs":" This module is not inline.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2047},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725138,"byte_end":725144,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ir::module::ModuleKind::Inline","value":"ModuleKind::Inline","parent":{"krate":0,"index":5896},"children":[],"decl_id":null,"docs":" This module is inline, as in `inline namespace foo {}`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5896},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725010,"byte_end":725020,"line_start":13,"line_end":13,"column_start":10,"column_end":20},"name":"ModuleKind","qualname":"::ir::module::ModuleKind","value":"ModuleKind::{Normal, Inline}","parent":null,"children":[{"krate":0,"index":2045},{"krate":0,"index":2047}],"decl_id":null,"docs":" Whether this module is inline or not.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725001,"byte_end":725147,"line_start":13,"line_end":18,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725001,"byte_end":725147,"line_start":13,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":5916},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725222,"byte_end":725228,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Module","qualname":"::ir::module::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":2049},{"krate":0,"index":2051},{"krate":0,"index":2053}],"decl_id":null,"docs":" A module, as in, a C++ namespace.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3802},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725523,"byte_end":725526,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Module>::new","value":"fn (name: Option<String>, kind: ModuleKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Module`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725740,"byte_end":725744,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"name","qualname":"<Module>::name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this module's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3806},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725888,"byte_end":725900,"line_start":47,"line_end":47,"column_start":12,"column_end":24},"name":"children_mut","qualname":"<Module>::children_mut","value":"fn (&mut self) -> &mut ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this module's children.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3808},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726011,"byte_end":726019,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"children","qualname":"<Module>::children","value":"fn (&self) -> &ItemSet","parent":null,"children":[],"decl_id":null,"docs":" Get this module's children.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726124,"byte_end":726133,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"is_inline","qualname":"<Module>::is_inline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this namespace is inline.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3866},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":733407,"byte_end":733412,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::template::AsTemplateParam::Extra","value":"type Extra;","parent":{"krate":0,"index":3864},"children":[],"decl_id":null,"docs":" Any extra information the implementor might need to make this decision.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5926},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":733933,"byte_end":733954,"line_start":187,"line_end":187,"column_start":12,"column_end":33},"name":"TemplateInstantiation","qualname":"::ir::template::TemplateInstantiation","value":"TemplateInstantiation {  }","parent":null,"children":[{"krate":0,"index":2055},{"krate":0,"index":2057}],"decl_id":null,"docs":" A concrete instantiation of a generic template.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3874},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734307,"byte_end":734310,"line_start":197,"line_end":197,"column_start":12,"column_end":15},"name":"new","qualname":"<TemplateInstantiation>::new","value":"fn <I> (definition: TypeId, args: I) -> TemplateInstantiation","parent":null,"children":[],"decl_id":null,"docs":" Construct a new template instantiation from the given parts.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3876},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734614,"byte_end":734633,"line_start":208,"line_end":208,"column_start":12,"column_end":31},"name":"template_definition","qualname":"<TemplateInstantiation>::template_definition","value":"fn (&self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Get the template definition for this instantiation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3878},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734767,"byte_end":734785,"line_start":213,"line_end":213,"column_start":12,"column_end":30},"name":"template_arguments","qualname":"<TemplateInstantiation>::template_arguments","value":"fn (&self) -> &[TypeId]","parent":null,"children":[],"decl_id":null,"docs":" Get the concrete template arguments used in this instantiation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3880},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734910,"byte_end":734917,"line_start":218,"line_end":218,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<TemplateInstantiation>::from_ty","value":"fn (ty: &clang::Type, ctx: &mut BindgenContext) -> Option<TemplateInstantiation>","parent":null,"children":[],"decl_id":null,"docs":" Parse a `TemplateInstantiation` from a clang `Type`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":3982},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":750178,"byte_end":750183,"line_start":373,"line_end":373,"column_start":10,"column_end":15},"name":"Extra","qualname":"::ir::traversal::Trace::Extra","value":"type Extra;","parent":{"krate":0,"index":3980},"children":[],"decl_id":null,"docs":" If a particular type needs extra information beyond what it has in\n `self` and `context` to find its referenced items, its implementation\n can define this associated type, forcing callers to pass the needed\n information through.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6016},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":754913,"byte_end":754917,"line_start":26,"line_end":26,"column_start":12,"column_end":16},"name":"Type","qualname":"::ir::ty::Type","value":"Type {  }","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2117},{"krate":0,"index":2119},{"krate":0,"index":2121}],"decl_id":null,"docs":" The base representation of a type in bindgen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4076},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":755672,"byte_end":755679,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"as_comp","qualname":"<Type>::as_comp","value":"fn (&self) -> Option<&CompInfo>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying `CompInfo` for this type, or `None` if this is some\n other kind of type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4078},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":755965,"byte_end":755976,"line_start":56,"line_end":56,"column_start":12,"column_end":23},"name":"as_comp_mut","qualname":"<Type>::as_comp_mut","value":"fn (&mut self) -> Option<&mut CompInfo>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying `CompInfo` for this type as a mutable reference, or\n `None` if this is some other kind of type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4080},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":756176,"byte_end":756179,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<Type>::new","value":"fn (name: Option<String>, layout: Option<Layout>, kind: TypeKind, is_const: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Type`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4082},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":756464,"byte_end":756468,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"kind","qualname":"<Type>::kind","value":"fn (&self) -> &TypeKind","parent":null,"children":[],"decl_id":null,"docs":" Which kind of type is this?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4084},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":756581,"byte_end":756589,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"kind_mut","qualname":"<Type>::kind_mut","value":"fn (&mut self) -> &mut TypeKind","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to this type's kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4086},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":756691,"byte_end":756695,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"name","qualname":"<Type>::name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this type's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4088},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":756832,"byte_end":756848,"line_start":94,"line_end":94,"column_start":12,"column_end":28},"name":"is_block_pointer","qualname":"<Type>::is_block_pointer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this is a block pointer type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4090},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":757025,"byte_end":757032,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"is_comp","qualname":"<Type>::is_comp","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a compound type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4092},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":757193,"byte_end":757201,"line_start":110,"line_end":110,"column_start":12,"column_end":20},"name":"is_union","qualname":"<Type>::is_union","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a union?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4094},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":757406,"byte_end":757419,"line_start":118,"line_end":118,"column_start":12,"column_end":25},"name":"is_type_param","qualname":"<Type>::is_type_param","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this type of kind `TypeKind::TypeParam`?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4096},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":757603,"byte_end":757628,"line_start":126,"line_end":126,"column_start":12,"column_end":37},"name":"is_template_instantiation","qualname":"<Type>::is_template_instantiation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a template instantiation type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4098},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":757820,"byte_end":757837,"line_start":134,"line_end":134,"column_start":12,"column_end":29},"name":"is_template_alias","qualname":"<Type>::is_template_alias","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a template alias type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4100},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":758015,"byte_end":758026,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"is_function","qualname":"<Type>::is_function","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a function type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4102},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":758196,"byte_end":758203,"line_start":150,"line_end":150,"column_start":12,"column_end":19},"name":"is_enum","qualname":"<Type>::is_enum","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an enum type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4104},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":758387,"byte_end":758411,"line_start":158,"line_end":158,"column_start":12,"column_end":36},"name":"is_builtin_or_type_param","qualname":"<Type>::is_builtin_or_type_param","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this either a builtin or named type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4106},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":758872,"byte_end":758877,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"named","qualname":"<Type>::named","value":"fn (name: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new named type, with name `name`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":759085,"byte_end":759093,"line_start":180,"line_end":180,"column_start":12,"column_end":20},"name":"is_float","qualname":"<Type>::is_float","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a floating point type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4110},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":759262,"byte_end":759269,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"is_bool","qualname":"<Type>::is_bool","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a boolean type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4112},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":759448,"byte_end":759458,"line_start":196,"line_end":196,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Type>::is_integer","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an integer type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4114},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":759684,"byte_end":759694,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"as_integer","qualname":"<Type>::as_integer","value":"fn (&self) -> Option<IntKind>","parent":null,"children":[],"decl_id":null,"docs":" Cast this type to an integer kind, or `None` if it is not an integer\n type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":759897,"byte_end":759905,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Type>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a `const` qualified type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4118},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":760008,"byte_end":760019,"line_start":218,"line_end":218,"column_start":12,"column_end":23},"name":"is_type_ref","qualname":"<Type>::is_type_ref","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a reference to another type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4120},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":760257,"byte_end":760274,"line_start":227,"line_end":227,"column_start":12,"column_end":29},"name":"is_unresolved_ref","qualname":"<Type>::is_unresolved_ref","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an unresolved reference?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4122},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":760469,"byte_end":760488,"line_start":235,"line_end":235,"column_start":12,"column_end":31},"name":"is_incomplete_array","qualname":"<Type>::is_incomplete_array","value":"fn (&self, ctx: &BindgenContext) -> Option<ItemId>","parent":null,"children":[],"decl_id":null,"docs":" Is this a incomplete array type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4124},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":760907,"byte_end":760913,"line_start":248,"line_end":248,"column_start":12,"column_end":18},"name":"layout","qualname":"<Type>::layout","value":"fn (&self, ctx: &BindgenContext) -> Option<Layout>","parent":null,"children":[],"decl_id":null,"docs":" What is the layout of this type?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4126},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":761841,"byte_end":761862,"line_start":272,"line_end":272,"column_start":12,"column_end":33},"name":"is_invalid_type_param","qualname":"<Type>::is_invalid_type_param","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether this named type is an invalid C++ identifier. This is done to\n avoid generating invalid code with some cases we can't handle, see:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4130},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":762512,"byte_end":762526,"line_start":293,"line_end":293,"column_start":12,"column_end":26},"name":"sanitized_name","qualname":"<Type>::sanitized_name","value":"fn <'a> (&'a self, ctx: &BindgenContext) -> Option<Cow<'a, str>>","parent":null,"children":[],"decl_id":null,"docs":" Get this type's santizied name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4132},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":763337,"byte_end":763351,"line_start":316,"line_end":316,"column_start":12,"column_end":26},"name":"canonical_type","qualname":"<Type>::canonical_type","value":"fn <'tr> (&'tr self, ctx: &'tr BindgenContext) -> &'tr Type","parent":null,"children":[],"decl_id":null,"docs":" See safe_canonical_type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4134},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":763870,"byte_end":763889,"line_start":330,"line_end":330,"column_start":12,"column_end":31},"name":"safe_canonical_type","qualname":"<Type>::safe_canonical_type","value":"fn <'tr> (&'tr self, ctx: &'tr BindgenContext) -> Option<&'tr Type>","parent":null,"children":[],"decl_id":null,"docs":" Returns the canonical type of this type, that is, the \"inner type\".","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4136},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":765272,"byte_end":765304,"line_start":370,"line_end":370,"column_start":12,"column_end":44},"name":"should_be_traced_unconditionally","qualname":"<Type>::should_be_traced_unconditionally","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" There are some types we don't want to stop at when finding an opaque\n item, so we can arrive to the proper item that needs to be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2123},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":771899,"byte_end":771904,"line_start":604,"line_end":604,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::ty::FloatKind::Float","value":"FloatKind::Float","parent":{"krate":0,"index":6022},"children":[],"decl_id":null,"docs":" A `float`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2125},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":771930,"byte_end":771936,"line_start":606,"line_end":606,"column_start":5,"column_end":11},"name":"Double","qualname":"::ir::ty::FloatKind::Double","value":"FloatKind::Double","parent":{"krate":0,"index":6022},"children":[],"decl_id":null,"docs":" A `double`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2127},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":771967,"byte_end":771977,"line_start":608,"line_end":608,"column_start":5,"column_end":15},"name":"LongDouble","qualname":"::ir::ty::FloatKind::LongDouble","value":"FloatKind::LongDouble","parent":{"krate":0,"index":6022},"children":[],"decl_id":null,"docs":" A `long double`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2129},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772007,"byte_end":772015,"line_start":610,"line_end":610,"column_start":5,"column_end":13},"name":"Float128","qualname":"::ir::ty::FloatKind::Float128","value":"FloatKind::Float128","parent":{"krate":0,"index":6022},"children":[],"decl_id":null,"docs":" A `__float128`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6022},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":771864,"byte_end":771873,"line_start":602,"line_end":602,"column_start":10,"column_end":19},"name":"FloatKind","qualname":"::ir::ty::FloatKind","value":"FloatKind::{Float, Double, LongDouble, Float128}","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2127},{"krate":0,"index":2129}],"decl_id":null,"docs":" The kind of float this type represents.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":771855,"byte_end":772018,"line_start":602,"line_end":611,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2131},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772136,"byte_end":772140,"line_start":617,"line_end":617,"column_start":5,"column_end":9},"name":"Void","qualname":"::ir::ty::TypeKind::Void","value":"TypeKind::Void","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" The void type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2133},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772177,"byte_end":772184,"line_start":620,"line_end":620,"column_start":5,"column_end":12},"name":"NullPtr","qualname":"::ir::ty::TypeKind::NullPtr","value":"TypeKind::NullPtr","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" The `nullptr_t` type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2135},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772252,"byte_end":772256,"line_start":623,"line_end":623,"column_start":5,"column_end":9},"name":"Comp","qualname":"::ir::ty::TypeKind::Comp","value":"TypeKind::Comp(CompInfo)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A compound type, that is, a class, struct, or union.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2139},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772447,"byte_end":772453,"line_start":628,"line_end":628,"column_start":5,"column_end":11},"name":"Opaque","qualname":"::ir::ty::TypeKind::Opaque","value":"TypeKind::Opaque","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An opaque type that we just don't understand. All usage of this shoulf\n result in an opaque blob of bytes generated from the containing type's\n layout.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2141},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772558,"byte_end":772561,"line_start":632,"line_end":632,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::ty::TypeKind::Int","value":"TypeKind::Int(IntKind)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An integer type, of a given kind. `bool` and `char` are also considered\n integers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2145},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772608,"byte_end":772613,"line_start":635,"line_end":635,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::ty::TypeKind::Float","value":"TypeKind::Float(FloatKind)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A floating point type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2149},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772670,"byte_end":772677,"line_start":638,"line_end":638,"column_start":5,"column_end":12},"name":"Complex","qualname":"::ir::ty::TypeKind::Complex","value":"TypeKind::Complex(FloatKind)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A complex floating point type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2153},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772759,"byte_end":772764,"line_start":641,"line_end":641,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ir::ty::TypeKind::Alias","value":"TypeKind::Alias(TypeId)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A type alias, with a name, that points to another type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2157},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772888,"byte_end":772901,"line_start":645,"line_end":645,"column_start":5,"column_end":18},"name":"TemplateAlias","qualname":"::ir::ty::TypeKind::TemplateAlias","value":"TypeKind::TemplateAlias(TypeId, Vec<TypeId>)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A templated alias, pointing to an inner type, just as `Alias`, but with\n template parameters.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2163},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772992,"byte_end":772998,"line_start":648,"line_end":648,"column_start":5,"column_end":11},"name":"Vector","qualname":"::ir::ty::TypeKind::Vector","value":"TypeKind::Vector(TypeId, usize)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A packed vector type: element type, number of elements\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2169},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773061,"byte_end":773066,"line_start":651,"line_end":651,"column_start":5,"column_end":10},"name":"Array","qualname":"::ir::ty::TypeKind::Array","value":"TypeKind::Array(TypeId, usize)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An array of a type and a length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2175},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773137,"byte_end":773145,"line_start":654,"line_end":654,"column_start":5,"column_end":13},"name":"Function","qualname":"::ir::ty::TypeKind::Function","value":"TypeKind::Function(FunctionSig)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A function type, with a given signature.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2179},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773189,"byte_end":773193,"line_start":657,"line_end":657,"column_start":5,"column_end":9},"name":"Enum","qualname":"::ir::ty::TypeKind::Enum","value":"TypeKind::Enum(Enum)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An `enum` type.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2183},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773296,"byte_end":773303,"line_start":661,"line_end":661,"column_start":5,"column_end":12},"name":"Pointer","qualname":"::ir::ty::TypeKind::Pointer","value":"TypeKind::Pointer(TypeId)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A pointer to a type. The bool field represents whether it's const or\n not.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2187},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773355,"byte_end":773367,"line_start":664,"line_end":664,"column_start":5,"column_end":17},"name":"BlockPointer","qualname":"::ir::ty::TypeKind::BlockPointer","value":"TypeKind::BlockPointer(TypeId)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A pointer to an Apple block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2191},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773432,"byte_end":773441,"line_start":667,"line_end":667,"column_start":5,"column_end":14},"name":"Reference","qualname":"::ir::ty::TypeKind::Reference","value":"TypeKind::Reference(TypeId)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A reference to a type, as in: int& foo().\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2195},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773567,"byte_end":773588,"line_start":671,"line_end":671,"column_start":5,"column_end":26},"name":"TemplateInstantiation","qualname":"::ir::ty::TypeKind::TemplateInstantiation","value":"TypeKind::TemplateInstantiation(TemplateInstantiation)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An instantiation of an abstract template definition with a set of\n concrete template arguments.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2199},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":773976,"byte_end":773993,"line_start":680,"line_end":680,"column_start":5,"column_end":22},"name":"UnresolvedTypeRef","qualname":"::ir::ty::TypeKind::UnresolvedTypeRef","value":"TypeKind::UnresolvedTypeRef(clang::Type, clang::Cursor, Option<ItemId>)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A reference to a yet-to-resolve type. This stores the clang cursor\n itself, and postpones its resolution.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2207},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774264,"byte_end":774279,"line_start":691,"line_end":691,"column_start":5,"column_end":20},"name":"ResolvedTypeRef","qualname":"::ir::ty::TypeKind::ResolvedTypeRef","value":"TypeKind::ResolvedTypeRef(TypeId)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" An indirection to another type.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2211},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774347,"byte_end":774356,"line_start":694,"line_end":694,"column_start":5,"column_end":14},"name":"TypeParam","qualname":"::ir::ty::TypeKind::TypeParam","value":"TypeKind::TypeParam","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" A named type, that is, a template parameter.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2213},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774430,"byte_end":774443,"line_start":697,"line_end":697,"column_start":5,"column_end":18},"name":"ObjCInterface","qualname":"::ir::ty::TypeKind::ObjCInterface","value":"TypeKind::ObjCInterface(ObjCInterface)","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" Objective C interface. Always referenced through a pointer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2217},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774517,"byte_end":774523,"line_start":700,"line_end":700,"column_start":5,"column_end":11},"name":"ObjCId","qualname":"::ir::ty::TypeKind::ObjCId","value":"TypeKind::ObjCId","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" Objective C 'id' type, points to any object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2219},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774564,"byte_end":774571,"line_start":703,"line_end":703,"column_start":5,"column_end":12},"name":"ObjCSel","qualname":"::ir::ty::TypeKind::ObjCSel","value":"TypeKind::ObjCSel","parent":{"krate":0,"index":6038},"children":[],"decl_id":null,"docs":" Objective C selector type\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6038},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":772098,"byte_end":772106,"line_start":615,"line_end":615,"column_start":10,"column_end":18},"name":"TypeKind","qualname":"::ir::ty::TypeKind","value":"TypeKind::{Void, NullPtr, Comp, Opaque, Int, Float, Complex, Alias, TemplateAlias, Vector, Array, Function, Enum, Pointer, BlockPointer, Reference, TemplateInstantiation, UnresolvedTypeRef, ResolvedTypeRef, TypeParam, ObjCInterface, ObjCId, ObjCSel}","parent":null,"children":[{"krate":0,"index":2131},{"krate":0,"index":2133},{"krate":0,"index":2135},{"krate":0,"index":2139},{"krate":0,"index":2141},{"krate":0,"index":2145},{"krate":0,"index":2149},{"krate":0,"index":2153},{"krate":0,"index":2157},{"krate":0,"index":2163},{"krate":0,"index":2169},{"krate":0,"index":2175},{"krate":0,"index":2179},{"krate":0,"index":2183},{"krate":0,"index":2187},{"krate":0,"index":2191},{"krate":0,"index":2195},{"krate":0,"index":2199},{"krate":0,"index":2207},{"krate":0,"index":2211},{"krate":0,"index":2213},{"krate":0,"index":2217},{"krate":0,"index":2219}],"decl_id":null,"docs":" The different kinds of types that we can parse.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4178},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774894,"byte_end":774907,"line_start":712,"line_end":712,"column_start":12,"column_end":25},"name":"from_clang_ty","qualname":"<Type>::from_clang_ty","value":"fn (potential_id: ItemId, ty: &clang::Type, location: Cursor, parent_id: Option<ItemId>, ctx: &mut BindgenContext) -> Result<ParseResult<Self>, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" This is another of the nasty methods. This one is the one that takes\n care of the core logic of converting a clang type to a `Type`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2221},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800691,"byte_end":800695,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Bool","qualname":"::ir::var::VarType::Bool","value":"VarType::Bool(bool)","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" A boolean.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2225},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800727,"byte_end":800730,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"Int","qualname":"::ir::var::VarType::Int","value":"VarType::Int(i64)","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" An integer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2229},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800774,"byte_end":800779,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Float","qualname":"::ir::var::VarType::Float","value":"VarType::Float(f64)","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" A floating point number.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2233},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800811,"byte_end":800815,"line_start":26,"line_end":26,"column_start":5,"column_end":9},"name":"Char","qualname":"::ir::var::VarType::Char","value":"VarType::Char(u8)","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" A character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2237},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800878,"byte_end":800884,"line_start":28,"line_end":28,"column_start":5,"column_end":11},"name":"String","qualname":"::ir::var::VarType::String","value":"VarType::String(Vec<u8>)","parent":{"krate":0,"index":6044},"children":[],"decl_id":null,"docs":" A string, not necessarily well-formed utf-8.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6044},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800658,"byte_end":800665,"line_start":18,"line_end":18,"column_start":10,"column_end":17},"name":"VarType","qualname":"::ir::var::VarType","value":"VarType::{Bool, Int, Float, Char, String}","parent":null,"children":[{"krate":0,"index":2221},{"krate":0,"index":2225},{"krate":0,"index":2229},{"krate":0,"index":2233},{"krate":0,"index":2237}],"decl_id":null,"docs":" The type for a constant variable.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6050},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":800988,"byte_end":800991,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"Var","qualname":"::ir::var::Var","value":"Var {  }","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2249}],"decl_id":null,"docs":" A `Var` is our intermediate representation of a variable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4232},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801385,"byte_end":801388,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Var>::new","value":"fn (name: String, mangled_name: Option<String>, ty: TypeId, val: Option<VarType>, is_const: bool) -> Var","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Var`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4234},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801759,"byte_end":801767,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"is_const","qualname":"<Var>::is_const","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this variable `const` qualified?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4236},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801878,"byte_end":801881,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"val","qualname":"<Var>::val","value":"fn (&self) -> Option<&VarType>","parent":null,"children":[],"decl_id":null,"docs":" The value of this constant variable, if any.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4238},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801989,"byte_end":801991,"line_start":76,"line_end":76,"column_start":12,"column_end":14},"name":"ty","qualname":"<Var>::ty","value":"fn (&self) -> TypeId","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":802079,"byte_end":802083,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"name","qualname":"<Var>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's name.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4242},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":802180,"byte_end":802192,"line_start":86,"line_end":86,"column_start":12,"column_end":24},"name":"mangled_name","qualname":"<Var>::mangled_name","value":"fn (&self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get this variable's mangled name.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6056},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":812568,"byte_end":812581,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"ObjCInterface","qualname":"::ir::objc::ObjCInterface","value":"ObjCInterface {  }","parent":null,"children":[{"krate":0,"index":2251},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2261}],"decl_id":null,"docs":" Objective C interface as used in TypeKind","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6062},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":812908,"byte_end":812918,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"ObjCMethod","qualname":"::ir::objc::ObjCMethod","value":"ObjCMethod {  }","parent":null,"children":[{"krate":0,"index":2263},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":2269}],"decl_id":null,"docs":" The objective c methods\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4320},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":813562,"byte_end":813566,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"name","qualname":"<ObjCInterface>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The name\n like, NSObject\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4322},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":813800,"byte_end":813809,"line_start":77,"line_end":77,"column_start":12,"column_end":21},"name":"rust_name","qualname":"<ObjCInterface>::rust_name","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Formats the name for rust\n Can be like NSObject, but with categories might be like NSObject_NSCoderMethods\n and protocols are like protocol_NSObject\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4324},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":814182,"byte_end":814189,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"methods","qualname":"<ObjCInterface>::methods","value":"fn (&self) -> &Vec<ObjCMethod>","parent":null,"children":[],"decl_id":null,"docs":" List of the methods defined in this interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4326},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":814319,"byte_end":814332,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"class_methods","qualname":"<ObjCInterface>::class_methods","value":"fn (&self) -> &Vec<ObjCMethod>","parent":null,"children":[],"decl_id":null,"docs":" List of the class methods defined in this interface\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4328},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":814465,"byte_end":814472,"line_start":100,"line_end":100,"column_start":12,"column_end":19},"name":"from_ty","qualname":"<ObjCInterface>::from_ty","value":"fn (cursor: &clang::Cursor, ctx: &mut BindgenContext) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parses the Objective C interface from the cursor\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4336},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":818058,"byte_end":818062,"line_start":195,"line_end":195,"column_start":12,"column_end":16},"name":"name","qualname":"<ObjCMethod>::name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original method selector name\n like, dataWithBytes:length:\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4338},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":818202,"byte_end":818211,"line_start":201,"line_end":201,"column_start":12,"column_end":21},"name":"rust_name","qualname":"<ObjCMethod>::rust_name","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Method name as converted to rust\n like, dataWithBytes_length_\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4340},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":818332,"byte_end":818341,"line_start":206,"line_end":206,"column_start":12,"column_end":21},"name":"signature","qualname":"<ObjCMethod>::signature","value":"fn (&self) -> &FunctionSig","parent":null,"children":[],"decl_id":null,"docs":" Returns the methods signature as FunctionSig\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4342},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":818441,"byte_end":818456,"line_start":211,"line_end":211,"column_start":12,"column_end":27},"name":"is_class_method","qualname":"<ObjCMethod>::is_class_method","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a class method?\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4344},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":818553,"byte_end":818571,"line_start":216,"line_end":216,"column_start":12,"column_end":30},"name":"format_method_call","qualname":"<ObjCMethod>::format_method_call","value":"fn (&self, args: &[quote::Tokens]) -> quote::Tokens","parent":null,"children":[],"decl_id":null,"docs":" Formats the method call\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2271},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":820746,"byte_end":820753,"line_start":12,"line_end":12,"column_start":5,"column_end":12},"name":"Recurse","qualname":"::parse::ParseError::Recurse","value":"ParseError::Recurse","parent":{"krate":0,"index":6068},"children":[],"decl_id":null,"docs":" Recurse down the current AST node's children.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2273},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":820913,"byte_end":820921,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"name":"Continue","qualname":"::parse::ParseError::Continue","value":"ParseError::Continue","parent":{"krate":0,"index":6068},"children":[],"decl_id":null,"docs":" Continue on to the next sibling AST node, or back up to the parent's\n siblings if we've exhausted all of this node's siblings (and so on).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6068},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":820675,"byte_end":820685,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"ParseError","qualname":"::parse::ParseError","value":"ParseError::{Recurse, Continue}","parent":null,"children":[{"krate":0,"index":2271},{"krate":0,"index":2273}],"decl_id":null,"docs":" Not so much an error in the traditional sense, but a control flow message\n when walking over Clang's AST with a cursor.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2277},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":821110,"byte_end":821125,"line_start":23,"line_end":23,"column_start":5,"column_end":20},"name":"AlreadyResolved","qualname":"::parse::ParseResult::AlreadyResolved","value":"ParseResult::AlreadyResolved(ItemId)","parent":{"krate":0,"index":6074},"children":[],"decl_id":null,"docs":" We've already resolved this item before, here is the extant `ItemId` for\n it.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2281},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":821268,"byte_end":821271,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"New","qualname":"::parse::ParseResult::New","value":"ParseResult::New(T, Option<clang::Cursor>)","parent":{"krate":0,"index":6074},"children":[],"decl_id":null,"docs":" This is a newly parsed item. If the cursor is `Some`, it points to the\n AST node where the new `T` was declared.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6074},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":820996,"byte_end":821007,"line_start":20,"line_end":20,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::parse::ParseResult","value":"ParseResult::{AlreadyResolved, New}","parent":null,"children":[{"krate":0,"index":2277},{"krate":0,"index":2281}],"decl_id":null,"docs":" The result of parsing a Clang AST node.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6086},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":825380,"byte_end":825385,"line_start":7,"line_end":7,"column_start":12,"column_end":17},"name":"Timer","qualname":"::time::Timer","value":"Timer {  }","parent":null,"children":[{"krate":0,"index":2295},{"krate":0,"index":2297},{"krate":0,"index":2299}],"decl_id":null,"docs":" RAII timer to measure how long phases take.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4422},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":825606,"byte_end":825609,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<Timer<'a>>::new","value":"fn (name: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a Timer with the given name, and starts it. By default,\n will print to stderr when it is `drop`'d\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4424},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":825844,"byte_end":825855,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"with_output","qualname":"<Timer<'a>>::with_output","value":"fn (mut self, output: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether or not the Timer will print a message\n when it is dropped.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4426},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":826011,"byte_end":826018,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"elapsed","qualname":"<Timer<'a>>::elapsed","value":"fn (&self) -> Duration","parent":null,"children":[],"decl_id":null,"docs":" Returns the time elapsed since the timer's creation\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4434},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"callbacks","qualname":"::callbacks","value":"/home/chivier_humber/.cargo/registry/src/github.com-1ecc6299db9ec823/bindgen-0.42.3/src/callbacks.rs","parent":null,"children":[{"krate":0,"index":4436},{"krate":0,"index":4442},{"krate":0,"index":4444},{"krate":0,"index":4446},{"krate":0,"index":6092},{"krate":0,"index":6110},{"krate":0,"index":6106},{"krate":0,"index":6102},{"krate":0,"index":6098},{"krate":0,"index":6094},{"krate":0,"index":4448},{"krate":0,"index":4452}],"decl_id":null,"docs":" A public API for more fine-grained customization of bindgen behavior.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2303},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827134,"byte_end":827140,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Ignore","qualname":"::callbacks::MacroParsingBehavior::Ignore","value":"MacroParsingBehavior::Ignore","parent":{"krate":0,"index":6092},"children":[],"decl_id":null,"docs":" Ignore the macro, generating no code for it, or anything that depends on\n it.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2305},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827205,"byte_end":827212,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"name":"Default","qualname":"::callbacks::MacroParsingBehavior::Default","value":"MacroParsingBehavior::Default","parent":{"krate":0,"index":6092},"children":[],"decl_id":null,"docs":" The default behavior bindgen would have otherwise.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6092},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827014,"byte_end":827034,"line_start":10,"line_end":10,"column_start":10,"column_end":30},"name":"MacroParsingBehavior","qualname":"::callbacks::MacroParsingBehavior","value":"MacroParsingBehavior::{Ignore, Default}","parent":null,"children":[{"krate":0,"index":2303},{"krate":0,"index":2305}],"decl_id":null,"docs":" An enum to allow ignoring parsing of macros.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827005,"byte_end":827215,"line_start":10,"line_end":16,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827005,"byte_end":827215,"line_start":10,"line_end":16,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":4452},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827428,"byte_end":827442,"line_start":26,"line_end":26,"column_start":11,"column_end":25},"name":"ParseCallbacks","qualname":"::callbacks::ParseCallbacks","value":"ParseCallbacks: fmt::Debug + UnwindSafe","parent":null,"children":[{"krate":0,"index":4454},{"krate":0,"index":4456},{"krate":0,"index":4458},{"krate":0,"index":4460}],"decl_id":null,"docs":" A trait to allow configuring different kinds of types in different\n situations.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4454},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827546,"byte_end":827562,"line_start":28,"line_end":28,"column_start":8,"column_end":24},"name":"will_parse_macro","qualname":"::callbacks::ParseCallbacks::will_parse_macro","value":"fn (&self, _name: &str) -> MacroParsingBehavior","parent":{"krate":0,"index":4452},"children":[],"decl_id":null,"docs":" This function will be run on every macro that is identified.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4456},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827814,"byte_end":827823,"line_start":34,"line_end":34,"column_start":8,"column_end":17},"name":"int_macro","qualname":"::callbacks::ParseCallbacks::int_macro","value":"fn (&self, _name: &str, _value: i64) -> Option<IntKind>","parent":{"krate":0,"index":4452},"children":[],"decl_id":null,"docs":" The integer kind an integer macro should have, given a name and the\n value of that macro, or `None` if you want the default to be chosen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4458},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":828044,"byte_end":828065,"line_start":40,"line_end":40,"column_start":8,"column_end":29},"name":"enum_variant_behavior","qualname":"::callbacks::ParseCallbacks::enum_variant_behavior","value":"fn (&self, _enum_name: Option<&str>, _original_variant_name: &str, _variant_value: EnumVariantValue) -> Option<EnumVariantCustomBehavior>","parent":{"krate":0,"index":4452},"children":[],"decl_id":null,"docs":" This function should return whether, given an enum variant\n name, and value, this enum variant will forcibly be a constant.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4460},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":828346,"byte_end":828363,"line_start":50,"line_end":50,"column_start":8,"column_end":25},"name":"enum_variant_name","qualname":"::callbacks::ParseCallbacks::enum_variant_name","value":"fn (&self, _enum_name: Option<&str>, _original_variant_name: &str, _variant_value: EnumVariantValue) -> Option<String>","parent":{"krate":0,"index":4452},"children":[],"decl_id":null,"docs":" Allows to rename an enum variant, replacing `_original_variant_name`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6112},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2893,"byte_end":2906,"line_start":107,"line_end":107,"column_start":16,"column_end":29},"name":"CodegenConfig","qualname":"::CodegenConfig","value":"CodegenConfig {  }","parent":null,"children":[{"krate":0,"index":2307}],"decl_id":null,"docs":" A type used to indicate which kind of items we have to generate.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[60,58,58,98,105,116,102,108,97,103,115,58,58,98,105,116,102,108,97,103,115,32,109,97,99,114,111,115,62],"byte_start":10244621,"byte_end":10245716,"line_start":7,"line_end":8,"column_start":25,"column_end":67}},{"value":"rustc_copy_clone_marker","span":{"file_name":[60,58,58,98,105,116,102,108,97,103,115,58,58,98,105,116,102,108,97,103,115,32,109,97,99,114,111,115,62],"byte_start":10244621,"byte_end":10245716,"line_start":7,"line_end":8,"column_start":25,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":6188},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2971,"byte_end":2980,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"name":"FUNCTIONS","qualname":"::CodegenConfig::FUNCTIONS","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate functions.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6190},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3044,"byte_end":3049,"line_start":111,"line_end":111,"column_start":15,"column_end":20},"name":"TYPES","qualname":"::CodegenConfig::TYPES","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate types.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6192},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3117,"byte_end":3121,"line_start":113,"line_end":113,"column_start":15,"column_end":19},"name":"VARS","qualname":"::CodegenConfig::VARS","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate constants.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6194},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3187,"byte_end":3194,"line_start":115,"line_end":115,"column_start":15,"column_end":22},"name":"METHODS","qualname":"::CodegenConfig::METHODS","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate methods.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6196},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3264,"byte_end":3276,"line_start":117,"line_end":117,"column_start":15,"column_end":27},"name":"CONSTRUCTORS","qualname":"::CodegenConfig::CONSTRUCTORS","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate constructors\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":6198},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3346,"byte_end":3357,"line_start":119,"line_end":119,"column_start":15,"column_end":26},"name":"DESTRUCTORS","qualname":"::CodegenConfig::DESTRUCTORS","value":"CodegenConfig","parent":{"krate":0,"index":6186},"children":[],"decl_id":null,"docs":" Whether to generate destructors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4526},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3464,"byte_end":3473,"line_start":125,"line_end":125,"column_start":12,"column_end":21},"name":"functions","qualname":"<CodegenConfig>::functions","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if functions should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4528},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3607,"byte_end":3612,"line_start":130,"line_end":130,"column_start":12,"column_end":17},"name":"types","qualname":"<CodegenConfig>::types","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if types should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4530},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3746,"byte_end":3750,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"vars","qualname":"<CodegenConfig>::vars","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if constants should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4532},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3880,"byte_end":3887,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"methods","qualname":"<CodegenConfig>::methods","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if methds should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4534},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4026,"byte_end":4038,"line_start":145,"line_end":145,"column_start":12,"column_end":24},"name":"constructors","qualname":"<CodegenConfig>::constructors","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if constructors should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4536},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4181,"byte_end":4192,"line_start":150,"line_end":150,"column_start":12,"column_end":23},"name":"destructors","qualname":"<CodegenConfig>::destructors","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if destructors should be generated.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6320},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5493,"byte_end":5500,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"Builder","qualname":"::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2319}],"decl_id":null,"docs":" Configure and generate Rust bindings for a C/C++ header.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4542},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5749,"byte_end":5756,"line_start":203,"line_end":203,"column_start":8,"column_end":15},"name":"builder","qualname":"::builder","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Construct a new [`Builder`](./struct.Builder.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4546},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5893,"byte_end":5911,"line_start":209,"line_end":209,"column_start":12,"column_end":30},"name":"command_line_flags","qualname":"<Builder>::command_line_flags","value":"fn (&self) -> Vec<String>","parent":null,"children":[],"decl_id":null,"docs":" Generates the command line flags use for creating `Builder`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4548},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18809,"byte_end":18815,"line_start":637,"line_end":637,"column_start":12,"column_end":18},"name":"header","qualname":"<Builder>::header","value":"fn <T> (mut self, header: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add an input C/C++ header to generate bindings for.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4550},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19078,"byte_end":19093,"line_start":645,"line_end":645,"column_start":12,"column_end":27},"name":"header_contents","qualname":"<Builder>::header_contents","value":"fn (mut self, name: &str, contents: &str) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add `contents` as an input C/C++ header named `name`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4552},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19366,"byte_end":19377,"line_start":655,"line_end":655,"column_start":12,"column_end":23},"name":"rust_target","qualname":"<Builder>::rust_target","value":"fn (mut self, rust_target: RustTarget) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the rust target","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4554},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19567,"byte_end":19589,"line_start":661,"line_end":661,"column_start":12,"column_end":34},"name":"disable_untagged_union","qualname":"<Builder>::disable_untagged_union","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Disable support for native Rust unions, if supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4556},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19738,"byte_end":19754,"line_start":667,"line_end":667,"column_start":12,"column_end":28},"name":"emit_ir_graphviz","qualname":"<Builder>::emit_ir_graphviz","value":"fn <T> (mut self, path: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Set the output graphviz file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4558},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20269,"byte_end":20286,"line_start":681,"line_end":681,"column_start":12,"column_end":29},"name":"generate_comments","qualname":"<Builder>::generate_comments","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether the generated bindings should contain documentation comments or\n not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4560},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21770,"byte_end":21791,"line_start":713,"line_end":713,"column_start":12,"column_end":33},"name":"whitelist_recursively","qualname":"<Builder>::whitelist_recursively","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to whitelist recursively or not. Defaults to true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4562},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22050,"byte_end":22067,"line_start":720,"line_end":720,"column_start":12,"column_end":29},"name":"objc_extern_crate","qualname":"<Builder>::objc_extern_crate","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate `#[macro_use] extern crate objc;` instead of `use objc;`\n in the prologue of the files generated from objective-c files\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4564},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22245,"byte_end":22259,"line_start":726,"line_end":726,"column_start":12,"column_end":26},"name":"generate_block","qualname":"<Builder>::generate_block","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate proper block signatures instead of void pointers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4566},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22513,"byte_end":22531,"line_start":733,"line_end":733,"column_start":12,"column_end":30},"name":"block_extern_crate","qualname":"<Builder>::block_extern_crate","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate `#[macro_use] extern crate block;` instead of `use block;`\n in the prologue of the files generated from apple block files\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4568},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23021,"byte_end":23041,"line_start":745,"line_end":745,"column_start":12,"column_end":32},"name":"trust_clang_mangling","qualname":"<Builder>::trust_clang_mangling","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether to use the clang-provided name mangling. This is true by default\n and probably needed for C++ features.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4570},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23305,"byte_end":23314,"line_start":753,"line_end":753,"column_start":12,"column_end":21},"name":"hide_type","qualname":"<Builder>::hide_type","value":"fn <T> (self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Hide the given type from the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[{"value":"deprecated(note = \"Use blacklist_type instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23243,"byte_end":23293,"line_start":752,"line_end":752,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4572},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23508,"byte_end":23522,"line_start":759,"line_end":759,"column_start":12,"column_end":26},"name":"blacklist_type","qualname":"<Builder>::blacklist_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Hide the given type from the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4574},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23756,"byte_end":23774,"line_start":766,"line_end":766,"column_start":12,"column_end":30},"name":"blacklist_function","qualname":"<Builder>::blacklist_function","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Hide the given function from the generated bindings. Regular expressions\n are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4576},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24074,"byte_end":24088,"line_start":774,"line_end":774,"column_start":12,"column_end":26},"name":"blacklist_item","qualname":"<Builder>::blacklist_item","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Hide the given item from the generated bindings, regardless of\n whether it's a type, function, module, etc. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4578},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24327,"byte_end":24338,"line_start":781,"line_end":781,"column_start":12,"column_end":23},"name":"opaque_type","qualname":"<Builder>::opaque_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Treat the given type as opaque in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4580},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24695,"byte_end":24711,"line_start":790,"line_end":790,"column_start":12,"column_end":28},"name":"whitelisted_type","qualname":"<Builder>::whitelisted_type","value":"fn <T> (self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given type so that it (and all types that it transitively\n refers to) appears in the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[{"value":"deprecated(note = \"use whitelist_type instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24633,"byte_end":24683,"line_start":789,"line_end":789,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4582},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24982,"byte_end":24996,"line_start":797,"line_end":797,"column_start":12,"column_end":26},"name":"whitelist_type","qualname":"<Builder>::whitelist_type","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given type so that it (and all types that it transitively\n refers to) appears in the generated bindings. Regular expressions are\n supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4584},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25307,"byte_end":25325,"line_start":805,"line_end":805,"column_start":12,"column_end":30},"name":"whitelist_function","qualname":"<Builder>::whitelist_function","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given function so that it (and all types that it\n transitively refers to) appears in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4586},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25616,"byte_end":25636,"line_start":814,"line_end":814,"column_start":12,"column_end":32},"name":"whitelisted_function","qualname":"<Builder>::whitelisted_function","value":"fn <T> (self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given function.","sig":null,"attributes":[{"value":"deprecated(note = \"use whitelist_function instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25550,"byte_end":25604,"line_start":813,"line_end":813,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4588},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25915,"byte_end":25928,"line_start":821,"line_end":821,"column_start":12,"column_end":25},"name":"whitelist_var","qualname":"<Builder>::whitelist_var","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given variable so that it (and all types that it\n transitively refers to) appears in the generated bindings. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4590},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26204,"byte_end":26219,"line_start":830,"line_end":830,"column_start":12,"column_end":27},"name":"whitelisted_var","qualname":"<Builder>::whitelisted_var","value":"fn <T> (self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Whitelist the given variable.","sig":null,"attributes":[{"value":"deprecated(note = \"use whitelist_var instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26143,"byte_end":26192,"line_start":829,"line_end":829,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":4592},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26372,"byte_end":26390,"line_start":835,"line_end":835,"column_start":12,"column_end":30},"name":"default_enum_style","qualname":"<Builder>::default_enum_style","value":"fn (mut self, arg: codegen::EnumVariation) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Set the default style of code to generate for enums\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4594},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26774,"byte_end":26787,"line_start":845,"line_end":845,"column_start":12,"column_end":25},"name":"bitfield_enum","qualname":"<Builder>::bitfield_enum","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as being\n bitfield-like. Regular expressions are supported.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4596},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27380,"byte_end":27394,"line_start":860,"line_end":860,"column_start":12,"column_end":26},"name":"rustified_enum","qualname":"<Builder>::rustified_enum","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as a Rust\n enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4598},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27656,"byte_end":27671,"line_start":867,"line_end":867,"column_start":12,"column_end":27},"name":"constified_enum","qualname":"<Builder>::constified_enum","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as a set of\n constants that are not to be put into a module.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4600},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28073,"byte_end":28095,"line_start":877,"line_end":877,"column_start":12,"column_end":34},"name":"constified_enum_module","qualname":"<Builder>::constified_enum_module","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Mark the given enum (or set of enums, if using a pattern) as a set of\n constants that should be put into a module.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4602},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28353,"byte_end":28361,"line_start":884,"line_end":884,"column_start":12,"column_end":20},"name":"raw_line","qualname":"<Builder>::raw_line","value":"fn <T> (mut self, arg: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add a string to prepend to the generated bindings. The string is passed\n through without any modification.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4604},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28546,"byte_end":28561,"line_start":890,"line_end":890,"column_start":12,"column_end":27},"name":"module_raw_line","qualname":"<Builder>::module_raw_line","value":"fn <T, U> (mut self, mod_: T, line: U) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add a given line to the beginning of module `mod`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4606},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28917,"byte_end":28933,"line_start":904,"line_end":904,"column_start":12,"column_end":28},"name":"module_raw_lines","qualname":"<Builder>::module_raw_lines","value":"fn <T, I> (mut self, mod_: T, lines: I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add a given set of lines to the beginning of module `mod`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4608},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29342,"byte_end":29351,"line_start":919,"line_end":919,"column_start":12,"column_end":21},"name":"clang_arg","qualname":"<Builder>::clang_arg","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add an argument to be passed straight through to clang.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4610},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29543,"byte_end":29553,"line_start":925,"line_end":925,"column_start":12,"column_end":22},"name":"clang_args","qualname":"<Builder>::clang_args","value":"fn <I> (mut self, iter: I) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Add arguments to be passed straight through to clang.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4612},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29883,"byte_end":29896,"line_start":938,"line_end":938,"column_start":12,"column_end":25},"name":"emit_builtins","qualname":"<Builder>::emit_builtins","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit bindings for builtin definitions (for example `__builtin_va_list`)\n in the generated Rust.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4614},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30048,"byte_end":30065,"line_start":944,"line_end":944,"column_start":12,"column_end":29},"name":"no_convert_floats","qualname":"<Builder>::no_convert_floats","value":"fn (mut self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Avoid converting floats to `f32`/`f64` by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4616},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30216,"byte_end":30228,"line_start":950,"line_end":950,"column_start":12,"column_end":24},"name":"layout_tests","qualname":"<Builder>::layout_tests","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether layout tests should be generated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4618},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30425,"byte_end":30435,"line_start":956,"line_end":956,"column_start":12,"column_end":22},"name":"impl_debug","qualname":"<Builder>::impl_debug","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Debug` should be implemented, if it can not be derived automatically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4620},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30634,"byte_end":30648,"line_start":962,"line_end":962,"column_start":12,"column_end":26},"name":"impl_partialeq","qualname":"<Builder>::impl_partialeq","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `PartialEq` should be implemented, if it can not be derived automatically.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4622},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30813,"byte_end":30824,"line_start":968,"line_end":968,"column_start":12,"column_end":23},"name":"derive_copy","qualname":"<Builder>::derive_copy","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Copy` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4624},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":30987,"byte_end":30999,"line_start":974,"line_end":974,"column_start":12,"column_end":24},"name":"derive_debug","qualname":"<Builder>::derive_debug","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Debug` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4626},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31165,"byte_end":31179,"line_start":980,"line_end":980,"column_start":12,"column_end":26},"name":"derive_default","qualname":"<Builder>::derive_default","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Default` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4628},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31344,"byte_end":31355,"line_start":986,"line_end":986,"column_start":12,"column_end":23},"name":"derive_hash","qualname":"<Builder>::derive_hash","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Hash` should be derived by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4630},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31651,"byte_end":31668,"line_start":994,"line_end":994,"column_start":12,"column_end":29},"name":"derive_partialord","qualname":"<Builder>::derive_partialord","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `PartialOrd` should be derived by default.\n If we don't compute partialord, we also cannot compute\n ord. Set the derive_ord to `false` when doit is `false`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4632},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32028,"byte_end":32038,"line_start":1005,"line_end":1005,"column_start":12,"column_end":22},"name":"derive_ord","qualname":"<Builder>::derive_ord","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Ord` should be derived by default.\n We can't compute `Ord` without computing `PartialOrd`,\n so we set the same option to derive_partialord.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4634},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32393,"byte_end":32409,"line_start":1015,"line_end":1015,"column_start":12,"column_end":28},"name":"derive_partialeq","qualname":"<Builder>::derive_partialeq","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `PartialEq` should be derived by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4636},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32789,"byte_end":32798,"line_start":1027,"line_end":1027,"column_start":12,"column_end":21},"name":"derive_eq","qualname":"<Builder>::derive_eq","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether `Eq` should be derived by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4638},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33071,"byte_end":33082,"line_start":1037,"line_end":1037,"column_start":12,"column_end":23},"name":"time_phases","qualname":"<Builder>::time_phases","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether or not to time bindgen phases, and print information to\n stderr.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4640},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33211,"byte_end":33225,"line_start":1043,"line_end":1043,"column_start":12,"column_end":26},"name":"emit_clang_ast","qualname":"<Builder>::emit_clang_ast","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit Clang AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4642},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33335,"byte_end":33342,"line_start":1049,"line_end":1049,"column_start":12,"column_end":19},"name":"emit_ir","qualname":"<Builder>::emit_ir","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Emit IR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4644},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33465,"byte_end":33486,"line_start":1055,"line_end":1055,"column_start":12,"column_end":33},"name":"enable_cxx_namespaces","qualname":"<Builder>::enable_cxx_namespaces","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Enable C++ namespaces.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4646},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34090,"byte_end":34114,"line_start":1073,"line_end":1073,"column_start":12,"column_end":36},"name":"disable_name_namespacing","qualname":"<Builder>::disable_name_namespacing","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Disable name auto-namespacing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4648},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35387,"byte_end":35417,"line_start":1106,"line_end":1106,"column_start":12,"column_end":42},"name":"conservative_inline_namespaces","qualname":"<Builder>::conservative_inline_namespaces","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Treat inline namespaces conservatively.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4650},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35807,"byte_end":35832,"line_start":1116,"line_end":1116,"column_start":12,"column_end":37},"name":"generate_inline_functions","qualname":"<Builder>::generate_inline_functions","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Whether inline functions should be generated or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4652},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35977,"byte_end":35993,"line_start":1122,"line_end":1122,"column_start":12,"column_end":28},"name":"ignore_functions","qualname":"<Builder>::ignore_functions","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Ignore functions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4654},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36142,"byte_end":36156,"line_start":1128,"line_end":1128,"column_start":12,"column_end":26},"name":"ignore_methods","qualname":"<Builder>::ignore_methods","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Ignore methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4656},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36432,"byte_end":36445,"line_start":1135,"line_end":1135,"column_start":12,"column_end":25},"name":"unstable_rust","qualname":"<Builder>::unstable_rust","value":"fn (self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Avoid generating any unstable Rust, such as Rust unions, in the generated bindings.\n","sig":null,"attributes":[{"value":"deprecated(note = \"please use `rust_target` instead\")","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36364,"byte_end":36420,"line_start":1134,"line_end":1134,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":4658},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36719,"byte_end":36727,"line_start":1145,"line_end":1145,"column_start":12,"column_end":20},"name":"use_core","qualname":"<Builder>::use_core","value":"fn (mut self) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Use core instead of libstd in the generated bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4660},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36896,"byte_end":36909,"line_start":1151,"line_end":1151,"column_start":12,"column_end":25},"name":"ctypes_prefix","qualname":"<Builder>::ctypes_prefix","value":"fn <T> (mut self, prefix: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Use the given prefix for the raw types instead of `::std::os::raw`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4662},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37197,"byte_end":37212,"line_start":1158,"line_end":1158,"column_start":12,"column_end":27},"name":"parse_callbacks","qualname":"<Builder>::parse_callbacks","value":"fn (mut self, cb: Box<callbacks::ParseCallbacks>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allows configuring types in different situations, see the\n [`ParseCallbacks`](./callbacks/trait.ParseCallbacks.html) documentation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4664},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37468,"byte_end":37487,"line_start":1168,"line_end":1168,"column_start":12,"column_end":31},"name":"with_codegen_config","qualname":"<Builder>::with_codegen_config","value":"fn (mut self, config: CodegenConfig) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose what to generate using a\n [`CodegenConfig`](./struct.CodegenConfig.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4666},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37672,"byte_end":37689,"line_start":1174,"line_end":1174,"column_start":12,"column_end":29},"name":"prepend_enum_name","qualname":"<Builder>::prepend_enum_name","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Prepend the enum name to constant or bitfield variants.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4668},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37866,"byte_end":37882,"line_start":1180,"line_end":1180,"column_start":12,"column_end":28},"name":"rustfmt_bindings","qualname":"<Builder>::rustfmt_bindings","value":"fn (mut self, doit: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set whether rustfmt should format the generated bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4670},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38113,"byte_end":38139,"line_start":1187,"line_end":1187,"column_start":12,"column_end":38},"name":"rustfmt_configuration_file","qualname":"<Builder>::rustfmt_configuration_file","value":"fn (mut self, path: Option<PathBuf>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the absolute path to the rustfmt configuration file, if None, the standard rustfmt\n options are used.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4672},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38392,"byte_end":38404,"line_start":1194,"line_end":1194,"column_start":12,"column_end":24},"name":"with_rustfmt","qualname":"<Builder>::with_rustfmt","value":"fn <P> (mut self, path: P) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets an explicit path to rustfmt, to be used when rustfmt is enabled.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4674},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38610,"byte_end":38618,"line_start":1200,"line_end":1200,"column_start":12,"column_end":20},"name":"generate","qualname":"<Builder>::generate","value":"fn (mut self) -> Result<Bindings, ()>","parent":null,"children":[],"decl_id":null,"docs":" Generate the Rust bindings using the options built up thus far.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39478,"byte_end":39501,"line_start":1224,"line_end":1224,"column_start":12,"column_end":35},"name":"dump_preprocessed_input","qualname":"<Builder>::dump_preprocessed_input","value":"fn (&self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Preprocess and dump the input header files to disk.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4680},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42139,"byte_end":42151,"line_start":1307,"line_end":1307,"column_start":12,"column_end":24},"name":"no_partialeq","qualname":"<Builder>::no_partialeq","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Don't derive `PartialEq` for a given type. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4682},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42380,"byte_end":42387,"line_start":1314,"line_end":1314,"column_start":12,"column_end":19},"name":"no_copy","qualname":"<Builder>::no_copy","value":"fn <T> (mut self, arg: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Don't derive `Copy` for a given type. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4684},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42608,"byte_end":42615,"line_start":1321,"line_end":1321,"column_start":12,"column_end":19},"name":"no_hash","qualname":"<Builder>::no_hash","value":"fn <T> (mut self, arg: T) -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Don't derive `Hash` for a given type. Regular\n expressions are supported.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6356},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54680,"byte_end":54688,"line_start":1676,"line_end":1676,"column_start":12,"column_end":20},"name":"Bindings","qualname":"::Bindings","value":"Bindings {  }","parent":null,"children":[{"krate":0,"index":2441},{"krate":0,"index":2443}],"decl_id":null,"docs":" Generated Rust bindings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4710},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58835,"byte_end":58844,"line_start":1801,"line_end":1801,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Bindings>::to_string","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Convert these bindings into source text (with raw lines prepended).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4712},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59184,"byte_end":59197,"line_start":1810,"line_end":1810,"column_start":12,"column_end":25},"name":"write_to_file","qualname":"<Bindings>::write_to_file","value":"fn <P> (&self, path: P) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write these bindings as source text to a file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4714},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":59542,"byte_end":59547,"line_start":1821,"line_end":1821,"column_start":12,"column_end":17},"name":"write","qualname":"<Bindings>::write","value":"fn <'a> (&self, mut writer: Box<Write + 'a>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write these bindings as source text to the given `Write`able.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6362},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65087,"byte_end":65099,"line_start":2003,"line_end":2003,"column_start":12,"column_end":24},"name":"ClangVersion","qualname":"::ClangVersion","value":"ClangVersion { parsed, full }","parent":null,"children":[{"krate":0,"index":2445},{"krate":0,"index":2447}],"decl_id":null,"docs":" Extracted Clang version data\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2445},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65168,"byte_end":65174,"line_start":2005,"line_end":2005,"column_start":9,"column_end":15},"name":"parsed","qualname":"::ClangVersion::parsed","value":"std::option::Option<(u32, u32)>","parent":{"krate":0,"index":6362},"children":[],"decl_id":null,"docs":" Major and minor semver, if parsing was successful\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2447},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65232,"byte_end":65236,"line_start":2007,"line_end":2007,"column_start":9,"column_end":13},"name":"full","qualname":"::ClangVersion::full","value":"std::string::String","parent":{"krate":0,"index":6362},"children":[],"decl_id":null,"docs":" full version string\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":4730},"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65322,"byte_end":65335,"line_start":2011,"line_end":2011,"column_start":8,"column_end":21},"name":"clang_version","qualname":"::clang_version","value":"fn () -> ClangVersion","parent":null,"children":[],"decl_id":null,"docs":" Get the major and the minor semver numbers of Clang's version\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69088,"byte_end":69094,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69389,"byte_end":69395,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91771,"byte_end":91777,"line_start":720,"line_end":720,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91904,"byte_end":91910,"line_start":726,"line_end":726,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91929,"byte_end":91935,"line_start":728,"line_end":728,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92167,"byte_end":92171,"line_start":740,"line_end":740,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92294,"byte_end":92298,"line_start":746,"line_end":746,"column_start":13,"column_end":17},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92323,"byte_end":92327,"line_start":748,"line_end":748,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93304,"byte_end":93315,"line_start":780,"line_end":780,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93749,"byte_end":93753,"line_start":795,"line_end":795,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103146,"byte_end":103170,"line_start":1080,"line_end":1080,"column_start":6,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":288},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103521,"byte_end":103544,"line_start":1099,"line_end":1099,"column_start":19,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103921,"byte_end":103944,"line_start":1114,"line_end":1114,"column_start":28,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104233,"byte_end":104247,"line_start":1127,"line_end":1127,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104962,"byte_end":104976,"line_start":1155,"line_end":1155,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105414,"byte_end":105421,"line_start":1173,"line_end":1173,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":106528,"byte_end":106551,"line_start":1211,"line_end":1211,"column_start":19,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107246,"byte_end":107271,"line_start":1241,"line_end":1241,"column_start":19,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107994,"byte_end":107998,"line_start":1270,"line_end":1270,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":108785,"byte_end":108790,"line_start":1300,"line_end":1300,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109280,"byte_end":109285,"line_start":1316,"line_end":1316,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109407,"byte_end":109412,"line_start":1322,"line_end":1322,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109846,"byte_end":109861,"line_start":1344,"line_end":1344,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109984,"byte_end":109999,"line_start":1350,"line_end":1350,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":111936,"byte_end":111951,"line_start":1418,"line_end":1418,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112188,"byte_end":112198,"line_start":1432,"line_end":1432,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112689,"byte_end":112699,"line_start":1448,"line_end":1448,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113106,"byte_end":113117,"line_start":1466,"line_end":1466,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113673,"byte_end":113684,"line_start":1484,"line_end":1484,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":121239,"byte_end":121249,"line_start":1742,"line_end":1742,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":124335,"byte_end":124345,"line_start":1835,"line_end":1835,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":124656,"byte_end":124666,"line_start":1850,"line_end":1850,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":257964,"byte_end":257973,"line_start":69,"line_end":69,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":258318,"byte_end":258330,"line_start":85,"line_end":85,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":498},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":259181,"byte_end":259185,"line_start":114,"line_end":114,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,101,114,114,111,114,46,114,115],"byte_start":268822,"byte_end":268827,"line_start":16,"line_end":16,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,101,114,114,111,114,46,114,115],"byte_start":268977,"byte_end":268982,"line_start":22,"line_end":22,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,115,116,114,117,99,116,95,108,97,121,111,117,116,46,114,115],"byte_start":279553,"byte_end":279572,"line_start":81,"line_end":81,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":129387,"byte_end":129400,"line_start":138,"line_end":138,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":131927,"byte_end":131940,"line_start":233,"line_end":233,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132081,"byte_end":132094,"line_start":241,"line_end":241,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132369,"byte_end":132375,"line_start":253,"line_end":253,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132903,"byte_end":132909,"line_start":273,"line_end":273,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":134688,"byte_end":134692,"line_start":335,"line_end":335,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":136128,"byte_end":136134,"line_start":384,"line_end":384,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":139184,"byte_end":139187,"line_start":476,"line_end":476,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":936},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":143346,"byte_end":143350,"line_start":590,"line_end":590,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":151920,"byte_end":151926,"line_start":814,"line_end":814,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":152214,"byte_end":152220,"line_start":828,"line_end":828,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":152868,"byte_end":152874,"line_start":851,"line_end":851,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":153050,"byte_end":153056,"line_start":857,"line_end":857,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":966},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":153351,"byte_end":153372,"line_start":872,"line_end":872,"column_start":24,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":156448,"byte_end":156453,"line_start":963,"line_end":963,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":157831,"byte_end":157840,"line_start":1015,"line_end":1015,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":162571,"byte_end":162583,"line_start":1164,"line_end":1164,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":162845,"byte_end":162853,"line_start":1174,"line_end":1174,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":164157,"byte_end":164169,"line_start":1215,"line_end":1215,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":167935,"byte_end":167943,"line_start":1344,"line_end":1344,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":171346,"byte_end":171354,"line_start":1444,"line_end":1444,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":191949,"byte_end":191955,"line_start":2022,"line_end":2022,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196636,"byte_end":196649,"line_start":2173,"line_end":2173,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":197215,"byte_end":197228,"line_start":2198,"line_end":2198,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":197333,"byte_end":197346,"line_start":2204,"line_end":2204,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1048}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":198669,"byte_end":198680,"line_start":2248,"line_end":2248,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":207591,"byte_end":207595,"line_start":2514,"line_end":2514,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1064},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":218993,"byte_end":218994,"line_start":2839,"line_end":2839,"column_start":22,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":220178,"byte_end":220179,"line_start":2877,"line_end":2877,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":221936,"byte_end":221937,"line_start":2928,"line_end":2928,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1112},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222282,"byte_end":222283,"line_start":2945,"line_end":2945,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222557,"byte_end":222558,"line_start":2960,"line_end":2960,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222836,"byte_end":222840,"line_start":2975,"line_end":2975,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1130},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223072,"byte_end":223076,"line_start":2987,"line_end":2987,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223315,"byte_end":223319,"line_start":2999,"line_end":2999,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223563,"byte_end":223567,"line_start":3011,"line_end":3011,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":231525,"byte_end":231546,"line_start":3202,"line_end":3202,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":231830,"byte_end":231851,"line_start":3216,"line_end":3216,"column_start":22,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1164}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":234151,"byte_end":234162,"line_start":3280,"line_end":3280,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":234993,"byte_end":235001,"line_start":3307,"line_end":3307,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":240293,"byte_end":240306,"line_start":3471,"line_end":3471,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1182},{"krate":0,"index":1184}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,102,101,97,116,117,114,101,115,46,114,115],"byte_start":295139,"byte_end":295151,"line_start":187,"line_end":187,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":299668,"byte_end":299679,"line_start":72,"line_end":72,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":299984,"byte_end":299995,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":323821,"byte_end":323843,"line_start":164,"line_end":164,"column_start":12,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":331788,"byte_end":331810,"line_start":368,"line_end":368,"column_start":34,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":339859,"byte_end":339866,"line_start":580,"line_end":580,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":342365,"byte_end":342382,"line_start":53,"line_end":53,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":344015,"byte_end":344032,"line_start":101,"line_end":101,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":353957,"byte_end":353964,"line_start":366,"line_end":366,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354813,"byte_end":354828,"line_start":26,"line_end":26,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1476}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354920,"byte_end":354935,"line_start":32,"line_end":32,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355439,"byte_end":355454,"line_start":47,"line_end":47,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355613,"byte_end":355628,"line_start":54,"line_end":54,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355773,"byte_end":355788,"line_start":62,"line_end":62,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":357136,"byte_end":357153,"line_start":96,"line_end":96,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":358587,"byte_end":358604,"line_start":145,"line_end":145,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":361161,"byte_end":361168,"line_start":225,"line_end":225,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":363953,"byte_end":363974,"line_start":43,"line_end":43,"column_start":12,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1574},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":364867,"byte_end":364888,"line_start":70,"line_end":70,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":368363,"byte_end":368370,"line_start":173,"line_end":173,"column_start":50,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":370497,"byte_end":370516,"line_start":50,"line_end":50,"column_start":12,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":372059,"byte_end":372078,"line_start":96,"line_end":96,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":383432,"byte_end":383439,"line_start":404,"line_end":404,"column_start":48,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":385706,"byte_end":385722,"line_start":52,"line_end":52,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":387348,"byte_end":387364,"line_start":100,"line_end":100,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":396898,"byte_end":396905,"line_start":353,"line_end":353,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":398717,"byte_end":398740,"line_start":43,"line_end":43,"column_start":12,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1768},{"krate":0,"index":1770}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":400142,"byte_end":400165,"line_start":87,"line_end":87,"column_start":34,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":405882,"byte_end":405889,"line_start":251,"line_end":251,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1790}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":408262,"byte_end":408278,"line_start":53,"line_end":53,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1832},{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":409604,"byte_end":409620,"line_start":93,"line_end":93,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1844},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":420878,"byte_end":420885,"line_start":389,"line_end":389,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":423700,"byte_end":423733,"line_start":60,"line_end":60,"column_start":12,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1908},{"krate":0,"index":1910},{"krate":0,"index":1912},{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":433163,"byte_end":433196,"line_start":321,"line_end":321,"column_start":34,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1918},{"krate":0,"index":1920},{"krate":0,"index":1922},{"krate":0,"index":1924},{"krate":0,"index":1926},{"krate":0,"index":1928},{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":436105,"byte_end":436112,"line_start":410,"line_end":410,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1934}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":437997,"byte_end":438005,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":439203,"byte_end":439211,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1976},{"krate":0,"index":1978},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1984},{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":444958,"byte_end":444965,"line_start":242,"line_end":242,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447205,"byte_end":447220,"line_start":65,"line_end":65,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447319,"byte_end":447334,"line_start":71,"line_end":71,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447846,"byte_end":447861,"line_start":86,"line_end":86,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":448020,"byte_end":448035,"line_start":93,"line_end":93,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":448180,"byte_end":448195,"line_start":101,"line_end":101,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2048}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":449037,"byte_end":449054,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":450626,"byte_end":450643,"line_start":176,"line_end":176,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2062},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2072}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":456261,"byte_end":456268,"line_start":341,"line_end":341,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2076}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309157,"byte_end":309172,"line_start":141,"line_end":141,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309261,"byte_end":309276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309577,"byte_end":309592,"line_start":159,"line_end":159,"column_start":27,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2138}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458562,"byte_end":458572,"line_start":56,"line_end":56,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2210},{"krate":0,"index":2212}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459462,"byte_end":459468,"line_start":88,"line_end":88,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461537,"byte_end":461549,"line_start":168,"line_end":168,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2252}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462268,"byte_end":462273,"line_start":197,"line_end":197,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2256}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462682,"byte_end":462687,"line_start":211,"line_end":211,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2260},{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":463279,"byte_end":463284,"line_start":233,"line_end":233,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2266}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":464581,"byte_end":464590,"line_start":274,"line_end":274,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2270}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":464946,"byte_end":464954,"line_start":292,"line_end":292,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2274}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":465926,"byte_end":465934,"line_start":332,"line_end":332,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2288},{"krate":0,"index":2290},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":468017,"byte_end":468025,"line_start":397,"line_end":397,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2300},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2306},{"krate":0,"index":2308}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":468850,"byte_end":468858,"line_start":435,"line_end":435,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2312}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":469398,"byte_end":469406,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2316},{"krate":0,"index":2318},{"krate":0,"index":2320},{"krate":0,"index":2322},{"krate":0,"index":2324},{"krate":0,"index":2326},{"krate":0,"index":2328}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":477497,"byte_end":477507,"line_start":698,"line_end":698,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":477614,"byte_end":477624,"line_start":704,"line_end":704,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":481949,"byte_end":481959,"line_start":827,"line_end":827,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2356},{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":483259,"byte_end":483268,"line_start":875,"line_end":875,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2374}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484420,"byte_end":484424,"line_start":933,"line_end":933,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2378},{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":487885,"byte_end":487893,"line_start":1039,"line_end":1039,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2384},{"krate":0,"index":2386},{"krate":0,"index":2390},{"krate":0,"index":2392},{"krate":0,"index":2394},{"krate":0,"index":2396},{"krate":0,"index":2398},{"krate":0,"index":2400},{"krate":0,"index":2402},{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2414},{"krate":0,"index":2418},{"krate":0,"index":2420},{"krate":0,"index":2422},{"krate":0,"index":2424},{"krate":0,"index":2426},{"krate":0,"index":2428},{"krate":0,"index":2430},{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":508350,"byte_end":508358,"line_start":1564,"line_end":1564,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2436}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":509782,"byte_end":509790,"line_start":1617,"line_end":1617,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":511781,"byte_end":511789,"line_start":1668,"line_end":1668,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2446}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":511951,"byte_end":511959,"line_start":1677,"line_end":1677,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523229,"byte_end":523235,"line_start":194,"line_end":194,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523394,"byte_end":523400,"line_start":201,"line_end":201,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523573,"byte_end":523574,"line_start":211,"line_end":211,"column_start":28,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2630}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523784,"byte_end":523785,"line_start":220,"line_end":220,"column_start":30,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523998,"byte_end":523999,"line_start":229,"line_end":229,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524203,"byte_end":524204,"line_start":238,"line_end":238,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2642}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524414,"byte_end":524415,"line_start":247,"line_end":247,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524685,"byte_end":524686,"line_start":257,"line_end":257,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2650}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524947,"byte_end":524948,"line_start":267,"line_end":267,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2654}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":525240,"byte_end":525241,"line_start":278,"line_end":278,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2658}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":532742,"byte_end":532767,"line_start":476,"line_end":476,"column_start":25,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2664},{"krate":0,"index":2666}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":533072,"byte_end":533097,"line_start":492,"line_end":492,"column_start":12,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":534398,"byte_end":534412,"line_start":540,"line_end":540,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2686},{"krate":0,"index":2688},{"krate":0,"index":2690},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2710},{"krate":0,"index":2712},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":2760},{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":2790},{"krate":0,"index":2792},{"krate":0,"index":2794},{"krate":0,"index":2796},{"krate":0,"index":2798},{"krate":0,"index":2802},{"krate":0,"index":2804},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2816},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2826},{"krate":0,"index":2828},{"krate":0,"index":2830},{"krate":0,"index":2832},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2838},{"krate":0,"index":2840},{"krate":0,"index":2842},{"krate":0,"index":2844},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2858},{"krate":0,"index":2860},{"krate":0,"index":2862},{"krate":0,"index":2864},{"krate":0,"index":2866},{"krate":0,"index":2868},{"krate":0,"index":2870},{"krate":0,"index":2872}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610198,"byte_end":610204,"line_start":2591,"line_end":2591,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2876}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610357,"byte_end":610369,"line_start":2598,"line_end":2598,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610479,"byte_end":610491,"line_start":2607,"line_end":2607,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2886},{"krate":0,"index":2888},{"krate":0,"index":2890}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612349,"byte_end":612360,"line_start":2665,"line_end":2665,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2894},{"krate":0,"index":2896},{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612927,"byte_end":612938,"line_start":2687,"line_end":2687,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2902},{"krate":0,"index":2904}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619968,"byte_end":619977,"line_start":155,"line_end":155,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620069,"byte_end":620078,"line_start":161,"line_end":161,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2972}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620562,"byte_end":620571,"line_start":177,"line_end":177,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2978}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620730,"byte_end":620739,"line_start":184,"line_end":184,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2984}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620873,"byte_end":620882,"line_start":192,"line_end":192,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624730,"byte_end":624734,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3046},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3056},{"krate":0,"index":3058}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630489,"byte_end":630500,"line_start":202,"line_end":202,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070},{"krate":0,"index":3072}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632555,"byte_end":632567,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3134}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":634711,"byte_end":634719,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3138},{"krate":0,"index":3140},{"krate":0,"index":3142},{"krate":0,"index":3144},{"krate":0,"index":3146},{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635700,"byte_end":635708,"line_start":142,"line_end":142,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3152}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636598,"byte_end":636601,"line_start":184,"line_end":184,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":3156}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636817,"byte_end":636820,"line_start":194,"line_end":194,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3160}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":640436,"byte_end":640447,"line_start":307,"line_end":307,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3172},{"krate":0,"index":3174},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3182},{"krate":0,"index":3184},{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":647791,"byte_end":647799,"line_start":508,"line_end":508,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3190}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650089,"byte_end":650100,"line_start":577,"line_end":577,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3196},{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650479,"byte_end":650490,"line_start":592,"line_end":592,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3202}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650649,"byte_end":650660,"line_start":598,"line_end":598,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3206}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650835,"byte_end":650846,"line_start":604,"line_end":604,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652697,"byte_end":652704,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":3216},{"krate":0,"index":3220},{"krate":0,"index":3224}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":657931,"byte_end":657947,"line_start":109,"line_end":109,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5818},{"krate":0,"index":5820},{"krate":0,"index":5822}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":658359,"byte_end":658376,"line_start":130,"line_end":130,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3374}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":658618,"byte_end":658635,"line_start":140,"line_end":140,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3378},{"krate":0,"index":3380}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659065,"byte_end":659066,"line_start":159,"line_end":159,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3384},{"krate":0,"index":3386}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659340,"byte_end":659344,"line_start":173,"line_end":173,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3390},{"krate":0,"index":3392}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659563,"byte_end":659571,"line_start":185,"line_end":185,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3396},{"krate":0,"index":3398}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659969,"byte_end":659970,"line_start":202,"line_end":202,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3402}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":660281,"byte_end":660282,"line_start":215,"line_end":215,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3406},{"krate":0,"index":3408}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":660901,"byte_end":660902,"line_start":239,"line_end":239,"column_start":27,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3412}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661116,"byte_end":661120,"line_start":251,"line_end":251,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3416}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661287,"byte_end":661289,"line_start":260,"line_end":260,"column_start":20,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3420},{"krate":0,"index":3422}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661539,"byte_end":661543,"line_start":274,"line_end":274,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3426},{"krate":0,"index":3428}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663445,"byte_end":663449,"line_start":320,"line_end":320,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3432}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663590,"byte_end":663594,"line_start":326,"line_end":326,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663736,"byte_end":663740,"line_start":332,"line_end":332,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3440}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663876,"byte_end":663880,"line_start":338,"line_end":338,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3444}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664022,"byte_end":664026,"line_start":344,"line_end":344,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3448}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664179,"byte_end":664183,"line_start":350,"line_end":350,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3452}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664327,"byte_end":664331,"line_start":356,"line_end":356,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3456}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664462,"byte_end":664466,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3460}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":666671,"byte_end":666675,"line_start":423,"line_end":423,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3464}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":666743,"byte_end":666747,"line_start":429,"line_end":429,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3468},{"krate":0,"index":3470},{"krate":0,"index":3472},{"krate":0,"index":3474},{"krate":0,"index":3476},{"krate":0,"index":3478},{"krate":0,"index":3480},{"krate":0,"index":3482},{"krate":0,"index":3484},{"krate":0,"index":3486},{"krate":0,"index":3488},{"krate":0,"index":3490},{"krate":0,"index":3492},{"krate":0,"index":3494},{"krate":0,"index":3496},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3502},{"krate":0,"index":3504},{"krate":0,"index":3506},{"krate":0,"index":3508},{"krate":0,"index":3510},{"krate":0,"index":3512},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3520},{"krate":0,"index":3522},{"krate":0,"index":3524},{"krate":0,"index":3526},{"krate":0,"index":3528},{"krate":0,"index":3530},{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":685482,"byte_end":685483,"line_start":972,"line_end":972,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3536},{"krate":0,"index":3538}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":685814,"byte_end":685818,"line_start":987,"line_end":987,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3542},{"krate":0,"index":3544}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":686228,"byte_end":686229,"line_start":1001,"line_end":1001,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3548},{"krate":0,"index":3550}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":686873,"byte_end":686877,"line_start":1024,"line_end":1024,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3554},{"krate":0,"index":3556}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687108,"byte_end":687109,"line_start":1034,"line_end":1034,"column_start":23,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3560}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687387,"byte_end":687391,"line_start":1045,"line_end":1045,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3564}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687535,"byte_end":687536,"line_start":1051,"line_end":1051,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3568}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687851,"byte_end":687855,"line_start":1064,"line_end":1064,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3572}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688133,"byte_end":688134,"line_start":1074,"line_end":1074,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3576}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688398,"byte_end":688402,"line_start":1085,"line_end":1085,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3580}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688700,"byte_end":688704,"line_start":1096,"line_end":1096,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689259,"byte_end":689260,"line_start":1121,"line_end":1121,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3590}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689549,"byte_end":689553,"line_start":1135,"line_end":1135,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3594}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689734,"byte_end":689742,"line_start":1144,"line_end":1144,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3598}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":690988,"byte_end":690992,"line_start":1187,"line_end":1187,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3606},{"krate":0,"index":3608},{"krate":0,"index":3620},{"krate":0,"index":3622},{"krate":0,"index":3624},{"krate":0,"index":3626},{"krate":0,"index":3630}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":711659,"byte_end":711663,"line_start":1771,"line_end":1771,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3636}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":712372,"byte_end":712376,"line_start":1791,"line_end":1791,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3640},{"krate":0,"index":3642}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":714498,"byte_end":714509,"line_start":1858,"line_end":1858,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3646},{"krate":0,"index":3648},{"krate":0,"index":3650}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715817,"byte_end":715825,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3670},{"krate":0,"index":3672},{"krate":0,"index":3674},{"krate":0,"index":3676},{"krate":0,"index":3678},{"krate":0,"index":3680},{"krate":0,"index":3682},{"krate":0,"index":3684},{"krate":0,"index":3686},{"krate":0,"index":3688},{"krate":0,"index":3690},{"krate":0,"index":3692},{"krate":0,"index":3694},{"krate":0,"index":3696}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718765,"byte_end":718773,"line_start":129,"line_end":129,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3700}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":720476,"byte_end":720482,"line_start":37,"line_end":37,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3734},{"krate":0,"index":3736},{"krate":0,"index":3738},{"krate":0,"index":3740},{"krate":0,"index":3742},{"krate":0,"index":3744},{"krate":0,"index":3746}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722190,"byte_end":722196,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3750},{"krate":0,"index":3752},{"krate":0,"index":3754},{"krate":0,"index":3756}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723583,"byte_end":723589,"line_start":136,"line_end":136,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3760}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723758,"byte_end":723764,"line_start":142,"line_end":142,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3764}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723932,"byte_end":723938,"line_start":148,"line_end":148,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3768}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":724103,"byte_end":724109,"line_start":154,"line_end":154,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3772}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":724291,"byte_end":724297,"line_start":160,"line_end":160,"column_start":50,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3776}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725469,"byte_end":725475,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":3802},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3808},{"krate":0,"index":3810}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726223,"byte_end":726229,"line_start":62,"line_end":62,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3814}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726502,"byte_end":726508,"line_start":75,"line_end":75,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3818}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734203,"byte_end":734224,"line_start":195,"line_end":195,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3874},{"krate":0,"index":3876},{"krate":0,"index":3878},{"krate":0,"index":3880}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":737536,"byte_end":737557,"line_start":291,"line_end":291,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3886},{"krate":0,"index":3888}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":738735,"byte_end":738756,"line_start":326,"line_end":326,"column_start":16,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3892},{"krate":0,"index":3894}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":739627,"byte_end":739631,"line_start":20,"line_end":20,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":3914}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":739857,"byte_end":739861,"line_start":30,"line_end":30,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3918}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":746774,"byte_end":746781,"line_start":258,"line_end":258,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3942},{"krate":0,"index":3944}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":747302,"byte_end":747307,"line_start":277,"line_end":277,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3948},{"krate":0,"index":3950}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":748787,"byte_end":748790,"line_start":325,"line_end":325,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3960},{"krate":0,"index":3962}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":748967,"byte_end":748975,"line_start":335,"line_end":335,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3966},{"krate":0,"index":3968}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":749554,"byte_end":749555,"line_start":356,"line_end":356,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3978}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":751161,"byte_end":751174,"line_start":410,"line_end":410,"column_start":5,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3990}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":752015,"byte_end":752028,"line_start":444,"line_end":444,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3994}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":752597,"byte_end":752610,"line_start":465,"line_end":465,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3998},{"krate":0,"index":4000}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":755547,"byte_end":755551,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4076},{"krate":0,"index":4078},{"krate":0,"index":4080},{"krate":0,"index":4082},{"krate":0,"index":4084},{"krate":0,"index":4086},{"krate":0,"index":4088},{"krate":0,"index":4090},{"krate":0,"index":4092},{"krate":0,"index":4094},{"krate":0,"index":4096},{"krate":0,"index":4098},{"krate":0,"index":4100},{"krate":0,"index":4102},{"krate":0,"index":4104},{"krate":0,"index":4106},{"krate":0,"index":4108},{"krate":0,"index":4110},{"krate":0,"index":4112},{"krate":0,"index":4114},{"krate":0,"index":4116},{"krate":0,"index":4118},{"krate":0,"index":4120},{"krate":0,"index":4122},{"krate":0,"index":4124},{"krate":0,"index":4126},{"krate":0,"index":4128},{"krate":0,"index":4130},{"krate":0,"index":4132},{"krate":0,"index":4134},{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":765688,"byte_end":765692,"line_start":384,"line_end":384,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":4140},{"krate":0,"index":4142}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766179,"byte_end":766183,"line_start":400,"line_end":400,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4146},{"krate":0,"index":4148}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766409,"byte_end":766417,"line_start":412,"line_end":412,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4152},{"krate":0,"index":4154}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766798,"byte_end":766802,"line_start":428,"line_end":428,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4158}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":767549,"byte_end":767557,"line_start":458,"line_end":458,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4162}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":767933,"byte_end":767941,"line_start":477,"line_end":477,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4166}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":770457,"byte_end":770461,"line_start":555,"line_end":555,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4170}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":770642,"byte_end":770650,"line_start":564,"line_end":564,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4174}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774581,"byte_end":774585,"line_start":706,"line_end":706,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":4178}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":798123,"byte_end":798127,"line_start":1209,"line_end":1209,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4184},{"krate":0,"index":4186}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801337,"byte_end":801340,"line_start":46,"line_end":46,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":4232},{"krate":0,"index":4234},{"krate":0,"index":4236},{"krate":0,"index":4238},{"krate":0,"index":4240},{"krate":0,"index":4242}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":802299,"byte_end":802302,"line_start":91,"line_end":91,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4246}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":803207,"byte_end":803210,"line_start":131,"line_end":131,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4252}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":813208,"byte_end":813221,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4318},{"krate":0,"index":4320},{"krate":0,"index":4322},{"krate":0,"index":4324},{"krate":0,"index":4326},{"krate":0,"index":4328},{"krate":0,"index":4330}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":817530,"byte_end":817540,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4334},{"krate":0,"index":4336},{"krate":0,"index":4338},{"krate":0,"index":4340},{"krate":0,"index":4342},{"krate":0,"index":4344}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":819884,"byte_end":819897,"line_start":260,"line_end":260,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4348},{"krate":0,"index":4350}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":823919,"byte_end":823927,"line_start":12,"line_end":12,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4392},{"krate":0,"index":4394},{"krate":0,"index":4396},{"krate":0,"index":4398},{"krate":0,"index":4400}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":825112,"byte_end":825120,"line_start":58,"line_end":58,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4404}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":825462,"byte_end":825467,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4422},{"krate":0,"index":4424},{"krate":0,"index":4426},{"krate":0,"index":4428}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":826623,"byte_end":826628,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":4432}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827234,"byte_end":827254,"line_start":18,"line_end":18,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4450}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3382,"byte_end":3395,"line_start":123,"line_end":123,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4526},{"krate":0,"index":4528},{"krate":0,"index":4530},{"krate":0,"index":4532},{"krate":0,"index":4534},{"krate":0,"index":4536}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4285,"byte_end":4298,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4540}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5803,"byte_end":5810,"line_start":207,"line_end":207,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":4546},{"krate":0,"index":4548},{"krate":0,"index":4550},{"krate":0,"index":4552},{"krate":0,"index":4554},{"krate":0,"index":4556},{"krate":0,"index":4558},{"krate":0,"index":4560},{"krate":0,"index":4562},{"krate":0,"index":4564},{"krate":0,"index":4566},{"krate":0,"index":4568},{"krate":0,"index":4570},{"krate":0,"index":4572},{"krate":0,"index":4574},{"krate":0,"index":4576},{"krate":0,"index":4578},{"krate":0,"index":4580},{"krate":0,"index":4582},{"krate":0,"index":4584},{"krate":0,"index":4586},{"krate":0,"index":4588},{"krate":0,"index":4590},{"krate":0,"index":4592},{"krate":0,"index":4594},{"krate":0,"index":4596},{"krate":0,"index":4598},{"krate":0,"index":4600},{"krate":0,"index":4602},{"krate":0,"index":4604},{"krate":0,"index":4606},{"krate":0,"index":4608},{"krate":0,"index":4610},{"krate":0,"index":4612},{"krate":0,"index":4614},{"krate":0,"index":4616},{"krate":0,"index":4618},{"krate":0,"index":4620},{"krate":0,"index":4622},{"krate":0,"index":4624},{"krate":0,"index":4626},{"krate":0,"index":4628},{"krate":0,"index":4630},{"krate":0,"index":4632},{"krate":0,"index":4634},{"krate":0,"index":4636},{"krate":0,"index":4638},{"krate":0,"index":4640},{"krate":0,"index":4642},{"krate":0,"index":4644},{"krate":0,"index":4646},{"krate":0,"index":4648},{"krate":0,"index":4650},{"krate":0,"index":4652},{"krate":0,"index":4654},{"krate":0,"index":4656},{"krate":0,"index":4658},{"krate":0,"index":4660},{"krate":0,"index":4662},{"krate":0,"index":4664},{"krate":0,"index":4666},{"krate":0,"index":4668},{"krate":0,"index":4670},{"krate":0,"index":4672},{"krate":0,"index":4674},{"krate":0,"index":4676},{"krate":0,"index":4680},{"krate":0,"index":4682},{"krate":0,"index":4684}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50447,"byte_end":50461,"line_start":1551,"line_end":1551,"column_start":35,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50471,"byte_end":50485,"line_start":1553,"line_end":1553,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4690},{"krate":0,"index":4692},{"krate":0,"index":4694}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51484,"byte_end":51498,"line_start":1585,"line_end":1585,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4698}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54755,"byte_end":54763,"line_start":1681,"line_end":1681,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4704},{"krate":0,"index":4710},{"krate":0,"index":4712},{"krate":0,"index":4714},{"krate":0,"index":4716}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1973,"byte_end":1982,"line_start":74,"line_end":74,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":4434}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69088,"byte_end":69094,"line_start":25,"line_end":25,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":4732},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":69389,"byte_end":69395,"line_start":38,"line_end":38,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":4732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91771,"byte_end":91777,"line_start":720,"line_end":720,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":4732},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91904,"byte_end":91910,"line_start":726,"line_end":726,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":4732},"to":{"krate":2,"index":2376}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":91929,"byte_end":91935,"line_start":728,"line_end":728,"column_start":15,"column_end":21},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":4732},"to":{"krate":2,"index":7726}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92167,"byte_end":92171,"line_start":740,"line_end":740,"column_start":20,"column_end":24},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":4740},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92294,"byte_end":92298,"line_start":746,"line_end":746,"column_start":13,"column_end":17},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":4740},"to":{"krate":2,"index":2376}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":92323,"byte_end":92327,"line_start":748,"line_end":748,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":4740},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93304,"byte_end":93315,"line_start":780,"line_end":780,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":4748},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":93749,"byte_end":93753,"line_start":795,"line_end":795,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":4740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103146,"byte_end":103170,"line_start":1080,"line_end":1080,"column_start":6,"column_end":30},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":4792},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103521,"byte_end":103544,"line_start":1099,"line_end":1099,"column_start":19,"column_end":42},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":292},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":103921,"byte_end":103944,"line_start":1114,"line_end":1114,"column_start":28,"column_end":51},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":292},"to":{"krate":2,"index":4362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104233,"byte_end":104247,"line_start":1127,"line_end":1127,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":104962,"byte_end":104976,"line_start":1155,"line_end":1155,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":304},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":105414,"byte_end":105421,"line_start":1173,"line_end":1173,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":106528,"byte_end":106551,"line_start":1211,"line_end":1211,"column_start":19,"column_end":42},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":326},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107246,"byte_end":107271,"line_start":1241,"line_end":1241,"column_start":19,"column_end":44},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":336},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":107994,"byte_end":107998,"line_start":1270,"line_end":1270,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":108785,"byte_end":108790,"line_start":1300,"line_end":1300,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109280,"byte_end":109285,"line_start":1316,"line_end":1316,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":354},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109407,"byte_end":109412,"line_start":1322,"line_end":1322,"column_start":15,"column_end":20},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":354},"to":{"krate":2,"index":1950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109846,"byte_end":109861,"line_start":1344,"line_end":1344,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":109984,"byte_end":109999,"line_start":1350,"line_end":1350,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":111936,"byte_end":111951,"line_start":1418,"line_end":1418,"column_start":15,"column_end":30},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":1950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112188,"byte_end":112198,"line_start":1432,"line_end":1432,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":112689,"byte_end":112699,"line_start":1448,"line_end":1448,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":388},"to":{"krate":2,"index":1950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113106,"byte_end":113117,"line_start":1466,"line_end":1466,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":113673,"byte_end":113684,"line_start":1484,"line_end":1484,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":400},"to":{"krate":2,"index":8146}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":121239,"byte_end":121249,"line_start":1742,"line_end":1742,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":4820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":124335,"byte_end":124345,"line_start":1835,"line_end":1835,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":4820},"to":{"krate":2,"index":1950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,108,97,110,103,46,114,115],"byte_start":124656,"byte_end":124666,"line_start":1850,"line_end":1850,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":4826},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":257964,"byte_end":257973,"line_start":69,"line_end":69,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":5226},"to":{"krate":0,"index":484}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":258318,"byte_end":258330,"line_start":85,"line_end":85,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":5196},"to":{"krate":0,"index":484}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,105,109,112,108,95,100,101,98,117,103,46,114,115],"byte_start":259181,"byte_end":259185,"line_start":114,"line_end":114,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":484}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,101,114,114,111,114,46,114,115],"byte_start":268822,"byte_end":268827,"line_start":16,"line_end":16,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":4832},"to":{"krate":2,"index":8150}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,101,114,114,111,114,46,114,115],"byte_start":268977,"byte_end":268982,"line_start":22,"line_end":22,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":4832},"to":{"krate":1,"index":2464}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,115,116,114,117,99,116,95,108,97,121,111,117,116,46,114,115],"byte_start":279553,"byte_end":279572,"line_start":81,"line_end":81,"column_start":10,"column_end":29},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":4850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":129387,"byte_end":129400,"line_start":138,"line_end":138,"column_start":10,"column_end":23},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":131927,"byte_end":131940,"line_start":233,"line_end":233,"column_start":25,"column_end":38},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":856},"to":{"krate":2,"index":1916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132081,"byte_end":132094,"line_start":241,"line_end":241,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":856},"to":{"krate":2,"index":1934}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132369,"byte_end":132375,"line_start":253,"line_end":253,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":22,"index":224},"to":{"krate":0,"index":900}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":132903,"byte_end":132909,"line_start":273,"line_end":273,"column_start":46,"column_end":52},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":22,"index":224},"to":{"krate":0,"index":908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":134688,"byte_end":134692,"line_start":335,"line_end":335,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":136128,"byte_end":136134,"line_start":384,"line_end":384,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":139184,"byte_end":139187,"line_start":476,"line_end":476,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":6050},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":143346,"byte_end":143350,"line_start":590,"line_end":590,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":151920,"byte_end":151926,"line_start":814,"line_end":814,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":152214,"byte_end":152220,"line_start":828,"line_end":828,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":948},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":152868,"byte_end":152874,"line_start":851,"line_end":851,"column_start":32,"column_end":38},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":948},"to":{"krate":0,"index":3342}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":153050,"byte_end":153056,"line_start":857,"line_end":857,"column_start":26,"column_end":32},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":948},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":153351,"byte_end":153372,"line_start":872,"line_end":872,"column_start":24,"column_end":45},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":5926},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":156448,"byte_end":156453,"line_start":963,"line_end":963,"column_start":31,"column_end":36},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":5202},"to":{"krate":0,"index":976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":157831,"byte_end":157840,"line_start":1015,"line_end":1015,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":5226},"to":{"krate":0,"index":976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":162571,"byte_end":162583,"line_start":1164,"line_end":1164,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":5196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":162845,"byte_end":162853,"line_start":1174,"line_end":1174,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":5208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":164157,"byte_end":164169,"line_start":1215,"line_end":1215,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":5196},"to":{"krate":0,"index":976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":167935,"byte_end":167943,"line_start":1344,"line_end":1344,"column_start":31,"column_end":39},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":5208},"to":{"krate":0,"index":976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":171346,"byte_end":171354,"line_start":1444,"line_end":1444,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":5264},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":191949,"byte_end":191955,"line_start":2022,"line_end":2022,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":5190},"to":{"krate":0,"index":1024}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":196636,"byte_end":196649,"line_start":2173,"line_end":2173,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":4856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":197215,"byte_end":197228,"line_start":2198,"line_end":2198,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":4856},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":197333,"byte_end":197346,"line_start":2204,"line_end":2204,"column_start":28,"column_end":41},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":4856},"to":{"krate":2,"index":6976}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":198669,"byte_end":198680,"line_start":2248,"line_end":2248,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":207591,"byte_end":207595,"line_start":2514,"line_end":2514,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":5664},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":218562,"byte_end":218573,"line_start":2823,"line_end":2823,"column_start":17,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":1070},"to":{"krate":0,"index":1078}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":218993,"byte_end":218994,"line_start":2839,"line_end":2839,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":327},"to":{"krate":0,"index":1078}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":219924,"byte_end":219935,"line_start":2867,"line_end":2867,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":1086},"to":{"krate":0,"index":1092}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":219938,"byte_end":219949,"line_start":2867,"line_end":2867,"column_start":42,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":1070},"to":{"krate":0,"index":1092}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":220178,"byte_end":220179,"line_start":2877,"line_end":2877,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":331},"to":{"krate":0,"index":1092}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":221710,"byte_end":221721,"line_start":2918,"line_end":2918,"column_start":25,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":1086},"to":{"krate":0,"index":1104}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":221724,"byte_end":221732,"line_start":2918,"line_end":2918,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1078},"to":{"krate":0,"index":1104}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":221936,"byte_end":221937,"line_start":2928,"line_end":2928,"column_start":33,"column_end":34},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":337},"to":{"krate":0,"index":1104}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222282,"byte_end":222283,"line_start":2945,"line_end":2945,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":341},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222557,"byte_end":222558,"line_start":2960,"line_end":2960,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":343},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":222836,"byte_end":222840,"line_start":2975,"line_end":2975,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223072,"byte_end":223076,"line_start":2987,"line_end":2987,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223315,"byte_end":223319,"line_start":2999,"line_end":2999,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":223563,"byte_end":223567,"line_start":3011,"line_end":3011,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":231525,"byte_end":231546,"line_start":3202,"line_end":3202,"column_start":22,"column_end":43},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":5926},"to":{"krate":0,"index":1070}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":231830,"byte_end":231851,"line_start":3216,"line_end":3216,"column_start":22,"column_end":43},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":5926},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":234151,"byte_end":234162,"line_start":3280,"line_end":3280,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":5766},"to":{"krate":0,"index":1086}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":234993,"byte_end":235001,"line_start":3307,"line_end":3307,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":5748},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,111,100,101,103,101,110,47,109,111,100,46,114,115],"byte_start":240293,"byte_end":240306,"line_start":3471,"line_end":3471,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":6056},"to":{"krate":0,"index":916}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,102,101,97,116,117,114,101,115,46,114,115],"byte_start":295139,"byte_end":295151,"line_start":187,"line_end":187,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":4924},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":299668,"byte_end":299679,"line_start":72,"line_end":72,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":4966},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,110,111,116,97,116,105,111,110,115,46,114,115],"byte_start":299984,"byte_end":299995,"line_start":86,"line_end":86,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":4966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":323821,"byte_end":323843,"line_start":164,"line_end":164,"column_start":12,"column_end":34},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":4982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":331788,"byte_end":331810,"line_start":368,"line_end":368,"column_start":34,"column_end":56},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":4982},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,116,101,109,112,108,97,116,101,95,112,97,114,97,109,115,46,114,115],"byte_start":339859,"byte_end":339866,"line_start":580,"line_end":580,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":1,"index":9284},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":342365,"byte_end":342382,"line_start":53,"line_end":53,"column_start":12,"column_end":29},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":4992},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":344015,"byte_end":344032,"line_start":101,"line_end":101,"column_start":34,"column_end":51},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":4992},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,98,117,103,46,114,115],"byte_start":353957,"byte_end":353964,"line_start":366,"line_end":366,"column_start":46,"column_end":53},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354813,"byte_end":354828,"line_start":26,"line_end":26,"column_start":18,"column_end":33},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":5002},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":354920,"byte_end":354935,"line_start":32,"line_end":32,"column_start":26,"column_end":41},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":5002},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355439,"byte_end":355454,"line_start":47,"line_end":47,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":5002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355613,"byte_end":355628,"line_start":54,"line_end":54,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":5002},"to":{"krate":2,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":355773,"byte_end":355788,"line_start":62,"line_end":62,"column_start":27,"column_end":42},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":5002},"to":{"krate":2,"index":1886}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":357136,"byte_end":357153,"line_start":96,"line_end":96,"column_start":12,"column_end":29},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":5026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":358587,"byte_end":358604,"line_start":145,"line_end":145,"column_start":34,"column_end":51},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":5026},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,118,116,97,98,108,101,46,114,115],"byte_start":361161,"byte_end":361168,"line_start":225,"line_end":225,"column_start":46,"column_end":53},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":1,"index":9284},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":363953,"byte_end":363974,"line_start":43,"line_end":43,"column_start":12,"column_end":33},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":5036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":364867,"byte_end":364888,"line_start":70,"line_end":70,"column_start":34,"column_end":55},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":5036},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,100,101,115,116,114,117,99,116,111,114,46,114,115],"byte_start":368363,"byte_end":368370,"line_start":173,"line_end":173,"column_start":50,"column_end":57},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":370497,"byte_end":370516,"line_start":50,"line_end":50,"column_start":12,"column_end":31},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":5046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":372059,"byte_end":372078,"line_start":96,"line_end":96,"column_start":34,"column_end":53},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":5046},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,100,101,102,97,117,108,116,46,114,115],"byte_start":383432,"byte_end":383439,"line_start":404,"line_end":404,"column_start":48,"column_end":55},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":385706,"byte_end":385722,"line_start":52,"line_end":52,"column_start":12,"column_end":28},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":5056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":387348,"byte_end":387364,"line_start":100,"line_end":100,"column_start":34,"column_end":50},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":5056},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,99,111,112,121,46,114,115],"byte_start":396898,"byte_end":396905,"line_start":353,"line_end":353,"column_start":45,"column_end":52},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":398717,"byte_end":398740,"line_start":43,"line_end":43,"column_start":12,"column_end":35},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":5066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":400142,"byte_end":400165,"line_start":87,"line_end":87,"column_start":34,"column_end":57},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":5066},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,116,121,112,101,95,112,97,114,97,109,95,105,110,95,97,114,114,97,121,46,114,115],"byte_start":405882,"byte_end":405889,"line_start":251,"line_end":251,"column_start":52,"column_end":59},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":408262,"byte_end":408278,"line_start":53,"line_end":53,"column_start":12,"column_end":28},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":5076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":409604,"byte_end":409620,"line_start":93,"line_end":93,"column_start":34,"column_end":50},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":5076},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,104,97,115,104,46,114,115],"byte_start":420878,"byte_end":420885,"line_start":389,"line_end":389,"column_start":45,"column_end":52},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":423700,"byte_end":423733,"line_start":60,"line_end":60,"column_start":12,"column_end":45},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":5086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":433163,"byte_end":433196,"line_start":321,"line_end":321,"column_start":34,"column_end":67},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":5086},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,100,101,114,105,118,101,95,112,97,114,116,105,97,108,101,113,95,111,114,95,112,97,114,116,105,97,108,111,114,100,46,114,115],"byte_start":436105,"byte_end":436112,"line_start":410,"line_end":410,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":1,"index":9284},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":437997,"byte_end":438005,"line_start":43,"line_end":43,"column_start":12,"column_end":20},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":5096},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":439203,"byte_end":439211,"line_start":81,"line_end":81,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":5096},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,104,97,115,95,102,108,111,97,116,46,114,115],"byte_start":444958,"byte_end":444965,"line_start":242,"line_end":242,"column_start":37,"column_end":44},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":1,"index":9314},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447205,"byte_end":447220,"line_start":65,"line_end":65,"column_start":18,"column_end":33},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":5106},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447319,"byte_end":447334,"line_start":71,"line_end":71,"column_start":26,"column_end":41},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":5106},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":447846,"byte_end":447861,"line_start":86,"line_end":86,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":5106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":448020,"byte_end":448035,"line_start":93,"line_end":93,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":5106},"to":{"krate":2,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":448180,"byte_end":448195,"line_start":101,"line_end":101,"column_start":27,"column_end":42},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":5106},"to":{"krate":2,"index":1886}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":449037,"byte_end":449054,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":5130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":450626,"byte_end":450643,"line_start":176,"line_end":176,"column_start":34,"column_end":51},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":5130},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,115,105,122,101,100,110,101,115,115,46,114,115],"byte_start":456261,"byte_end":456268,"line_start":341,"line_end":341,"column_start":46,"column_end":53},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":1,"index":9284},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":306853,"byte_end":306858,"line_start":84,"line_end":84,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":306866,"byte_end":306871,"line_start":84,"line_end":84,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":8146},"to":{"krate":0,"index":2110}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309157,"byte_end":309172,"line_start":141,"line_end":141,"column_start":18,"column_end":33},"kind":{"variant":"Impl","fields":[125]},"from":{"krate":0,"index":5136},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309261,"byte_end":309276,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[126]},"from":{"krate":0,"index":5136},"to":{"krate":2,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,97,110,97,108,121,115,105,115,47,109,111,100,46,114,115],"byte_start":309577,"byte_end":309592,"line_start":159,"line_end":159,"column_start":27,"column_end":42},"kind":{"variant":"Impl","fields":[127]},"from":{"krate":0,"index":5136},"to":{"krate":2,"index":1886}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":458562,"byte_end":458572,"line_start":56,"line_end":56,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[128]},"from":{"krate":0,"index":5172},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":459462,"byte_end":459468,"line_start":88,"line_end":88,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[129]},"from":{"krate":0,"index":5190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":461537,"byte_end":461549,"line_start":168,"line_end":168,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[130]},"from":{"krate":0,"index":5196},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462268,"byte_end":462273,"line_start":197,"line_end":197,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[131]},"from":{"krate":0,"index":5202},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":462682,"byte_end":462687,"line_start":211,"line_end":211,"column_start":16,"column_end":21},"kind":{"variant":"Impl","fields":[132]},"from":{"krate":0,"index":5202},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":463279,"byte_end":463284,"line_start":233,"line_end":233,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[133]},"from":{"krate":0,"index":5202},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":464581,"byte_end":464590,"line_start":274,"line_end":274,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[134]},"from":{"krate":0,"index":5226},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":464946,"byte_end":464954,"line_start":292,"line_end":292,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[135]},"from":{"krate":0,"index":5208},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":465926,"byte_end":465934,"line_start":332,"line_end":332,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[136]},"from":{"krate":0,"index":5208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":468017,"byte_end":468025,"line_start":397,"line_end":397,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[137]},"from":{"krate":0,"index":5208},"to":{"krate":0,"index":2230}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":468850,"byte_end":468858,"line_start":435,"line_end":435,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[138]},"from":{"krate":0,"index":5214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":469398,"byte_end":469406,"line_start":458,"line_end":458,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[139]},"from":{"krate":0,"index":5214},"to":{"krate":0,"index":2230}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":477497,"byte_end":477507,"line_start":698,"line_end":698,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[140]},"from":{"krate":0,"index":5220},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":477614,"byte_end":477624,"line_start":704,"line_end":704,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[141]},"from":{"krate":0,"index":5220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":481949,"byte_end":481959,"line_start":827,"line_end":827,"column_start":16,"column_end":26},"kind":{"variant":"Impl","fields":[142]},"from":{"krate":0,"index":5220},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":483259,"byte_end":483268,"line_start":875,"line_end":875,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[143]},"from":{"krate":0,"index":5226},"to":{"krate":0,"index":2230}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":484420,"byte_end":484424,"line_start":933,"line_end":933,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[144]},"from":{"krate":0,"index":5254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":487885,"byte_end":487893,"line_start":1039,"line_end":1039,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[145]},"from":{"krate":0,"index":5264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":508350,"byte_end":508358,"line_start":1564,"line_end":1564,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[146]},"from":{"krate":0,"index":5264},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":509782,"byte_end":509790,"line_start":1617,"line_end":1617,"column_start":19,"column_end":27},"kind":{"variant":"Impl","fields":[147]},"from":{"krate":0,"index":5264},"to":{"krate":0,"index":3352}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":511781,"byte_end":511789,"line_start":1668,"line_end":1668,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[148]},"from":{"krate":0,"index":5264},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,109,112,46,114,115],"byte_start":511951,"byte_end":511959,"line_start":1677,"line_end":1677,"column_start":16,"column_end":24},"kind":{"variant":"Impl","fields":[149]},"from":{"krate":0,"index":5264},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523229,"byte_end":523235,"line_start":194,"line_end":194,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[151]},"from":{"krate":0,"index":5284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523394,"byte_end":523400,"line_start":201,"line_end":201,"column_start":38,"column_end":44},"kind":{"variant":"Impl","fields":[152]},"from":{"krate":0,"index":5284},"to":{"krate":2,"index":2370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523573,"byte_end":523574,"line_start":211,"line_end":211,"column_start":28,"column_end":29},"kind":{"variant":"Impl","fields":[153]},"from":{"krate":0,"index":709},"to":{"krate":0,"index":2914}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523784,"byte_end":523785,"line_start":220,"line_end":220,"column_start":30,"column_end":31},"kind":{"variant":"Impl","fields":[154]},"from":{"krate":0,"index":711},"to":{"krate":0,"index":2930}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":523998,"byte_end":523999,"line_start":229,"line_end":229,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[155]},"from":{"krate":0,"index":713},"to":{"krate":0,"index":2922}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524203,"byte_end":524204,"line_start":238,"line_end":238,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[156]},"from":{"krate":0,"index":715},"to":{"krate":0,"index":2938}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524414,"byte_end":524415,"line_start":247,"line_end":247,"column_start":33,"column_end":34},"kind":{"variant":"Impl","fields":[157]},"from":{"krate":0,"index":717},"to":{"krate":0,"index":2946}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524685,"byte_end":524686,"line_start":257,"line_end":257,"column_start":32,"column_end":33},"kind":{"variant":"Impl","fields":[158]},"from":{"krate":0,"index":719},"to":{"krate":0,"index":2942}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":524947,"byte_end":524948,"line_start":267,"line_end":267,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[159]},"from":{"krate":0,"index":721},"to":{"krate":0,"index":2950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":525240,"byte_end":525241,"line_start":278,"line_end":278,"column_start":26,"column_end":27},"kind":{"variant":"Impl","fields":[160]},"from":{"krate":0,"index":723},"to":{"krate":0,"index":2954}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":532742,"byte_end":532767,"line_start":476,"line_end":476,"column_start":25,"column_end":50},"kind":{"variant":"Impl","fields":[161]},"from":{"krate":0,"index":2660},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":533072,"byte_end":533097,"line_start":492,"line_end":492,"column_start":12,"column_end":37},"kind":{"variant":"Impl","fields":[162]},"from":{"krate":0,"index":2660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":534398,"byte_end":534412,"line_start":540,"line_end":540,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[163]},"from":{"krate":0,"index":5580},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610198,"byte_end":610204,"line_start":2591,"line_end":2591,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[164]},"from":{"krate":0,"index":5284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610357,"byte_end":610369,"line_start":2598,"line_end":2598,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[165]},"from":{"krate":0,"index":5586},"to":{"krate":2,"index":2614}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":610479,"byte_end":610491,"line_start":2607,"line_end":2607,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[166]},"from":{"krate":0,"index":5586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612349,"byte_end":612360,"line_start":2665,"line_end":2665,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[167]},"from":{"krate":0,"index":5598},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,99,111,110,116,101,120,116,46,114,115],"byte_start":612927,"byte_end":612938,"line_start":2687,"line_end":2687,"column_start":29,"column_end":40},"kind":{"variant":"Impl","fields":[168]},"from":{"krate":0,"index":5598},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":619968,"byte_end":619977,"line_start":155,"line_end":155,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[169]},"from":{"krate":0,"index":5620},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620069,"byte_end":620078,"line_start":161,"line_end":161,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[170]},"from":{"krate":0,"index":5620},"to":{"krate":2,"index":2424}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620562,"byte_end":620571,"line_start":177,"line_end":177,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[171]},"from":{"krate":0,"index":5620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620730,"byte_end":620739,"line_start":184,"line_end":184,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[172]},"from":{"krate":0,"index":5620},"to":{"krate":2,"index":1844}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,100,101,114,105,118,101,46,114,115],"byte_start":620873,"byte_end":620882,"line_start":192,"line_end":192,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[173]},"from":{"krate":0,"index":5620},"to":{"krate":2,"index":1886}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":624730,"byte_end":624734,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[174]},"from":{"krate":0,"index":5664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,101,110,117,109,95,116,121,46,114,115],"byte_start":630489,"byte_end":630500,"line_start":202,"line_end":202,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[175]},"from":{"krate":0,"index":5670},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632555,"byte_end":632567,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[176]},"from":{"krate":0,"index":5718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":634711,"byte_end":634719,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[177]},"from":{"krate":0,"index":5748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635700,"byte_end":635708,"line_start":142,"line_end":142,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[178]},"from":{"krate":0,"index":5748},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636598,"byte_end":636601,"line_start":184,"line_end":184,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[179]},"from":{"krate":0,"index":5754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":636817,"byte_end":636820,"line_start":194,"line_end":194,"column_start":26,"column_end":29},"kind":{"variant":"Impl","fields":[180]},"from":{"krate":0,"index":5754},"to":{"krate":22,"index":140}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":640436,"byte_end":640447,"line_start":307,"line_end":307,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[181]},"from":{"krate":0,"index":5766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":647791,"byte_end":647799,"line_start":508,"line_end":508,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[182]},"from":{"krate":0,"index":5748},"to":{"krate":0,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650089,"byte_end":650100,"line_start":577,"line_end":577,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[183]},"from":{"krate":0,"index":5766},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650479,"byte_end":650490,"line_start":592,"line_end":592,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[184]},"from":{"krate":0,"index":5766},"to":{"krate":0,"index":2918}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650649,"byte_end":650660,"line_start":598,"line_end":598,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[185]},"from":{"krate":0,"index":5766},"to":{"krate":0,"index":2958}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":650835,"byte_end":650846,"line_start":604,"line_end":604,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[186]},"from":{"krate":0,"index":5766},"to":{"krate":0,"index":2962}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,110,116,46,114,115],"byte_start":652697,"byte_end":652704,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[187]},"from":{"krate":0,"index":5772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":657931,"byte_end":657947,"line_start":109,"line_end":109,"column_start":14,"column_end":30},"kind":{"variant":"Impl","fields":[188]},"from":{"krate":0,"index":5814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":658359,"byte_end":658376,"line_start":130,"line_end":130,"column_start":10,"column_end":27},"kind":{"variant":"Impl","fields":[189]},"from":{"krate":0,"index":3370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":658618,"byte_end":658635,"line_start":140,"line_end":140,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[190]},"from":{"krate":0,"index":3370},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659065,"byte_end":659066,"line_start":159,"line_end":159,"column_start":29,"column_end":30},"kind":{"variant":"Impl","fields":[191]},"from":{"krate":0,"index":907},"to":{"krate":0,"index":3864}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659340,"byte_end":659344,"line_start":173,"line_end":173,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[192]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3864}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659563,"byte_end":659571,"line_start":185,"line_end":185,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[193]},"from":{"krate":0,"index":5856},"to":{"krate":0,"index":3864}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":659969,"byte_end":659970,"line_start":202,"line_end":202,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[194]},"from":{"krate":0,"index":909},"to":{"krate":0,"index":3342}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":660281,"byte_end":660282,"line_start":215,"line_end":215,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[195]},"from":{"krate":0,"index":911},"to":{"krate":0,"index":3346}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":660901,"byte_end":660902,"line_start":239,"line_end":239,"column_start":27,"column_end":28},"kind":{"variant":"Impl","fields":[196]},"from":{"krate":0,"index":913},"to":{"krate":0,"index":3366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661116,"byte_end":661120,"line_start":251,"line_end":251,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[197]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661287,"byte_end":661289,"line_start":260,"line_end":260,"column_start":20,"column_end":22},"kind":{"variant":"Impl","fields":[198]},"from":{"krate":0,"index":919},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":661539,"byte_end":661543,"line_start":274,"line_end":274,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[199]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663445,"byte_end":663449,"line_start":320,"line_end":320,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[200]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2914}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663590,"byte_end":663594,"line_start":326,"line_end":326,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[201]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2930}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663736,"byte_end":663740,"line_start":332,"line_end":332,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[202]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2922}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":663876,"byte_end":663880,"line_start":338,"line_end":338,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[203]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2938}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664022,"byte_end":664026,"line_start":344,"line_end":344,"column_start":30,"column_end":34},"kind":{"variant":"Impl","fields":[204]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2946}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664179,"byte_end":664183,"line_start":350,"line_end":350,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[205]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2942}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664327,"byte_end":664331,"line_start":356,"line_end":356,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[206]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":664462,"byte_end":664466,"line_start":362,"line_end":362,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[207]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2954}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":666671,"byte_end":666675,"line_start":423,"line_end":423,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[208]},"from":{"krate":0,"index":5824},"to":{"krate":2,"index":2602}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":666743,"byte_end":666747,"line_start":429,"line_end":429,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[209]},"from":{"krate":0,"index":5824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":685482,"byte_end":685483,"line_start":972,"line_end":972,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[210]},"from":{"krate":0,"index":963},"to":{"krate":0,"index":3352}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":685814,"byte_end":685818,"line_start":987,"line_end":987,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[211]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3352}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":686228,"byte_end":686229,"line_start":1001,"line_end":1001,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[212]},"from":{"krate":0,"index":967},"to":{"krate":0,"index":1526}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":686873,"byte_end":686877,"line_start":1024,"line_end":1024,"column_start":20,"column_end":24},"kind":{"variant":"Impl","fields":[213]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":1526}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687108,"byte_end":687109,"line_start":1034,"line_end":1034,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[214]},"from":{"krate":0,"index":973},"to":{"krate":0,"index":2078}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687387,"byte_end":687391,"line_start":1045,"line_end":1045,"column_start":20,"column_end":24},"kind":{"variant":"Impl","fields":[215]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":2078}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687535,"byte_end":687536,"line_start":1051,"line_end":1051,"column_start":33,"column_end":34},"kind":{"variant":"Impl","fields":[216]},"from":{"krate":0,"index":977},"to":{"krate":0,"index":3358}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":687851,"byte_end":687855,"line_start":1064,"line_end":1064,"column_start":30,"column_end":34},"kind":{"variant":"Impl","fields":[217]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3358}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688133,"byte_end":688134,"line_start":1074,"line_end":1074,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[218]},"from":{"krate":0,"index":979},"to":{"krate":0,"index":3362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688398,"byte_end":688402,"line_start":1085,"line_end":1085,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[219]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3362}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":688700,"byte_end":688704,"line_start":1096,"line_end":1096,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[220]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689259,"byte_end":689260,"line_start":1121,"line_end":1121,"column_start":32,"column_end":33},"kind":{"variant":"Impl","fields":[221]},"from":{"krate":0,"index":983},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689549,"byte_end":689553,"line_start":1135,"line_end":1135,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[222]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":689734,"byte_end":689742,"line_start":1144,"line_end":1144,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[223]},"from":{"krate":0,"index":5856},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":690988,"byte_end":690992,"line_start":1187,"line_end":1187,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[224]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":4370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":711659,"byte_end":711663,"line_start":1771,"line_end":1771,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[225]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3342}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":712372,"byte_end":712376,"line_start":1791,"line_end":1791,"column_start":28,"column_end":32},"kind":{"variant":"Impl","fields":[226]},"from":{"krate":0,"index":5824},"to":{"krate":0,"index":3346}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,46,114,115],"byte_start":714498,"byte_end":714509,"line_start":1858,"line_end":1858,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[227]},"from":{"krate":0,"index":5850},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":715817,"byte_end":715825,"line_start":28,"line_end":28,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[228]},"from":{"krate":0,"index":5856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,105,116,101,109,95,107,105,110,100,46,114,115],"byte_start":718765,"byte_end":718773,"line_start":129,"line_end":129,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[229]},"from":{"krate":0,"index":5856},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":720476,"byte_end":720482,"line_start":37,"line_end":37,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[230]},"from":{"krate":0,"index":5862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":722190,"byte_end":722196,"line_start":101,"line_end":101,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[231]},"from":{"krate":0,"index":5880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723583,"byte_end":723589,"line_start":136,"line_end":136,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[232]},"from":{"krate":0,"index":5880},"to":{"krate":0,"index":2918}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723758,"byte_end":723764,"line_start":142,"line_end":142,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[233]},"from":{"krate":0,"index":5880},"to":{"krate":0,"index":2934}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":723932,"byte_end":723938,"line_start":148,"line_end":148,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[234]},"from":{"krate":0,"index":5880},"to":{"krate":0,"index":2926}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":724103,"byte_end":724109,"line_start":154,"line_end":154,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[235]},"from":{"krate":0,"index":5880},"to":{"krate":0,"index":2958}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,108,97,121,111,117,116,46,114,115],"byte_start":724291,"byte_end":724297,"line_start":160,"line_end":160,"column_start":50,"column_end":56},"kind":{"variant":"Impl","fields":[236]},"from":{"krate":0,"index":5880},"to":{"krate":0,"index":2962}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":725469,"byte_end":725475,"line_start":31,"line_end":31,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[237]},"from":{"krate":0,"index":5916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726223,"byte_end":726229,"line_start":62,"line_end":62,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[238]},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,109,111,100,117,108,101,46,114,115],"byte_start":726502,"byte_end":726508,"line_start":75,"line_end":75,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[239]},"from":{"krate":0,"index":5916},"to":{"krate":0,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":730663,"byte_end":730668,"line_start":102,"line_end":102,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":734203,"byte_end":734224,"line_start":195,"line_end":195,"column_start":6,"column_end":27},"kind":{"variant":"Impl","fields":[240]},"from":{"krate":0,"index":5926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":737536,"byte_end":737557,"line_start":291,"line_end":291,"column_start":19,"column_end":40},"kind":{"variant":"Impl","fields":[241]},"from":{"krate":0,"index":5926},"to":{"krate":0,"index":3352}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,101,109,112,108,97,116,101,46,114,115],"byte_start":738735,"byte_end":738756,"line_start":326,"line_end":326,"column_start":16,"column_end":37},"kind":{"variant":"Impl","fields":[242]},"from":{"krate":0,"index":5926},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":739627,"byte_end":739631,"line_start":20,"line_end":20,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[243]},"from":{"krate":0,"index":5936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":739857,"byte_end":739861,"line_start":30,"line_end":30,"column_start":23,"column_end":27},"kind":{"variant":"Impl","fields":[244]},"from":{"krate":0,"index":5936},"to":{"krate":2,"index":2610}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":746774,"byte_end":746781,"line_start":258,"line_end":258,"column_start":39,"column_end":46},"kind":{"variant":"Impl","fields":[245]},"from":{"krate":0,"index":3582},"to":{"krate":0,"index":3934}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":747302,"byte_end":747307,"line_start":277,"line_end":277,"column_start":39,"column_end":44},"kind":{"variant":"Impl","fields":[246]},"from":{"krate":0,"index":6010},"to":{"krate":0,"index":3934}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":748572,"byte_end":748579,"line_start":317,"line_end":317,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2592},"to":{"krate":0,"index":3952}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":748787,"byte_end":748790,"line_start":325,"line_end":325,"column_start":25,"column_end":28},"kind":{"variant":"Impl","fields":[247]},"from":{"krate":5,"index":4534},"to":{"krate":0,"index":3952}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":748967,"byte_end":748975,"line_start":335,"line_end":335,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[248]},"from":{"krate":5,"index":2240},"to":{"krate":0,"index":3952}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":749554,"byte_end":749555,"line_start":356,"line_end":356,"column_start":20,"column_end":21},"kind":{"variant":"Impl","fields":[249]},"from":{"krate":0,"index":1059},"to":{"krate":0,"index":3970}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":751161,"byte_end":751174,"line_start":410,"line_end":410,"column_start":5,"column_end":18},"kind":{"variant":"Impl","fields":[250]},"from":{"krate":0,"index":3986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":752015,"byte_end":752028,"line_start":444,"line_end":444,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[251]},"from":{"krate":0,"index":3986},"to":{"krate":0,"index":3970}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,114,97,118,101,114,115,97,108,46,114,115],"byte_start":752597,"byte_end":752610,"line_start":465,"line_end":465,"column_start":9,"column_end":22},"kind":{"variant":"Impl","fields":[252]},"from":{"krate":0,"index":3986},"to":{"krate":2,"index":3908}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":755547,"byte_end":755551,"line_start":44,"line_end":44,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[253]},"from":{"krate":0,"index":6016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":765688,"byte_end":765692,"line_start":384,"line_end":384,"column_start":19,"column_end":23},"kind":{"variant":"Impl","fields":[254]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":3352}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766179,"byte_end":766183,"line_start":400,"line_end":400,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[255]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":3864}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766409,"byte_end":766417,"line_start":412,"line_end":412,"column_start":26,"column_end":34},"kind":{"variant":"Impl","fields":[256]},"from":{"krate":0,"index":6038},"to":{"krate":0,"index":3864}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":766798,"byte_end":766802,"line_start":428,"line_end":428,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[257]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":767549,"byte_end":767557,"line_start":458,"line_end":458,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[258]},"from":{"krate":0,"index":6038},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":767933,"byte_end":767941,"line_start":477,"line_end":477,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[259]},"from":{"krate":0,"index":6038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":770457,"byte_end":770461,"line_start":555,"line_end":555,"column_start":29,"column_end":33},"kind":{"variant":"Impl","fields":[260]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":770642,"byte_end":770650,"line_start":564,"line_end":564,"column_start":29,"column_end":37},"kind":{"variant":"Impl","fields":[261]},"from":{"krate":0,"index":6038},"to":{"krate":0,"index":3854}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":774581,"byte_end":774585,"line_start":706,"line_end":706,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[262]},"from":{"krate":0,"index":6016},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,116,121,46,114,115],"byte_start":798123,"byte_end":798127,"line_start":1209,"line_end":1209,"column_start":16,"column_end":20},"kind":{"variant":"Impl","fields":[263]},"from":{"krate":0,"index":6016},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":801337,"byte_end":801340,"line_start":46,"line_end":46,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[264]},"from":{"krate":0,"index":6050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":802299,"byte_end":802302,"line_start":91,"line_end":91,"column_start":24,"column_end":27},"kind":{"variant":"Impl","fields":[265]},"from":{"krate":0,"index":6050},"to":{"krate":0,"index":3010}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,118,97,114,46,114,115],"byte_start":803207,"byte_end":803210,"line_start":131,"line_end":131,"column_start":29,"column_end":32},"kind":{"variant":"Impl","fields":[266]},"from":{"krate":0,"index":6050},"to":{"krate":0,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":813208,"byte_end":813221,"line_start":56,"line_end":56,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[267]},"from":{"krate":0,"index":6056},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":817530,"byte_end":817540,"line_start":175,"line_end":175,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[268]},"from":{"krate":0,"index":6062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,105,114,47,111,98,106,99,46,114,115],"byte_start":819884,"byte_end":819897,"line_start":260,"line_end":260,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[269]},"from":{"krate":0,"index":6056},"to":{"krate":0,"index":3980}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":821485,"byte_end":821490,"line_start":32,"line_end":32,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":4366}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,112,97,114,115,101,46,114,115],"byte_start":821926,"byte_end":821931,"line_start":44,"line_end":44,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":1678},"to":{"krate":0,"index":4370}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":823919,"byte_end":823927,"line_start":12,"line_end":12,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[270]},"from":{"krate":0,"index":6080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,114,101,103,101,120,95,115,101,116,46,114,115],"byte_start":825112,"byte_end":825120,"line_start":58,"line_end":58,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[271]},"from":{"krate":0,"index":6080},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":825462,"byte_end":825467,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[272]},"from":{"krate":0,"index":6086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,116,105,109,101,46,114,115],"byte_start":826623,"byte_end":826628,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[273]},"from":{"krate":0,"index":6086},"to":{"krate":2,"index":1950}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827234,"byte_end":827254,"line_start":18,"line_end":18,"column_start":18,"column_end":38},"kind":{"variant":"Impl","fields":[274]},"from":{"krate":0,"index":6092},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827449,"byte_end":827454,"line_start":26,"line_end":26,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":8146},"to":{"krate":0,"index":4452}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,99,97,108,108,98,97,99,107,115,46,114,115],"byte_start":827457,"byte_end":827467,"line_start":26,"line_end":26,"column_start":40,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":5548},"to":{"krate":0,"index":4452}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3382,"byte_end":3395,"line_start":123,"line_end":123,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[275]},"from":{"krate":0,"index":6112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4285,"byte_end":4298,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[276]},"from":{"krate":0,"index":6112},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5803,"byte_end":5810,"line_start":207,"line_end":207,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[277]},"from":{"krate":0,"index":6320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50447,"byte_end":50461,"line_start":1551,"line_end":1551,"column_start":35,"column_end":49},"kind":{"variant":"Impl","fields":[278]},"from":{"krate":0,"index":6330},"to":{"krate":1,"index":5548}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50471,"byte_end":50485,"line_start":1553,"line_end":1553,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[279]},"from":{"krate":0,"index":6330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51484,"byte_end":51498,"line_start":1585,"line_end":1585,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[280]},"from":{"krate":0,"index":6330},"to":{"krate":2,"index":2592}},{"span":{"file_name":[47,104,111,109,101,47,99,104,105,118,105,101,114,95,104,117,109,98,101,114,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,105,110,100,103,101,110,45,48,46,52,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54755,"byte_end":54763,"line_start":1681,"line_end":1681,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[281]},"from":{"krate":0,"index":6356},"to":{"krate":4294967295,"index":4294967295}}]}