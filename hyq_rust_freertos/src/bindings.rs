/* automatically generated by rust-bindgen */

pub type __uint32_t = ::std::os::raw::c_uint;
pub type TaskFunction_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type StackType_t = usize;
pub type BaseType_t = ::std::os::raw::c_long;
pub type UBaseType_t = ::std::os::raw::c_ulong;
pub type TickType_t = u32;
extern "C" {
    pub fn vPortYieldFromISR();
}
extern "C" {
    pub fn vPortYield();
}
extern "C" {
    pub fn xPortSetInterruptMask() -> BaseType_t;
}
extern "C" {
    pub fn vPortClearInterruptMask(xMask: ::std::os::raw::c_long);
}
extern "C" {
    pub fn vPortDisableInterrupts();
}
extern "C" {
    pub fn vPortEnableInterrupts();
}
extern "C" {
    pub fn vPortEnterCritical();
}
extern "C" {
    pub fn vPortExitCritical();
}
extern "C" {
    pub fn vPortForciblyEndThread(pxTaskToDelete: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vPortAddTaskHandle(pxTaskHandle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vPortFindTicksPerSecond();
}
extern "C" {
    pub fn ulPortGetTimerValue() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn pxPortInitialiseStack(
        pxTopOfStack: *mut StackType_t,
        pxCode: TaskFunction_t,
        pvParameters: *mut ::std::os::raw::c_void,
    ) -> *mut StackType_t;
}
extern "C" {
    pub fn pvPortMalloc(xSize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vPortFree(pv: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vPortInitialiseBlocks();
}
extern "C" {
    pub fn xPortGetFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortGetMinimumEverFreeHeapSize() -> usize;
}
extern "C" {
    pub fn xPortStartScheduler() -> BaseType_t;
}
extern "C" {
    pub fn vPortEndScheduler();
}
